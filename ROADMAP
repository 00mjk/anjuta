Introduction:
-------------
This document is the roadmap for future development of anjuta.

The goal of Anjuta DevStudio is to provide a truely customizable and
extensible IDE framework and at the same time provide the basic implementations
of common development tools. libanjuta is the framework that realizes the
Anjuta IDE plugin framework and Anjuta DevStudio realizes many of the common
development plugins.

Anjuta branches:
----------------
Anjuta currently has two main branches, ANJUTA_1_2_0 and HEAD. The ANJUTA_1_2_0
branch is stable branch and corresponds to anjuta-1.x release series. The
HEAD branch is the anjuta-2.x releases and is the latest development series.

Anjuta 2.x development series has new extensible plugin architecture and all
the plugins have been ported to this new plateform. The libanjuta interface
defines all the IDE APIs and is used to write anjuta plugins. In addition, it
also provides many utility classes.

Following are the major milestones that we will attempt to reach by the
estimated dates given. There will be smaller releases in-between, mainly
stablization and bugfix releases.

Milestone 2.1.0 - (Estimated release time Aug 2005):
----------------------------------------------------
- Compelete autotools project management implementation (gnome-build)
- Complete libanjuta API definition and documentation
- Complete Users manual, tutorials and FAQ
- Partial implementation of ants (java) project management (gnome-build)
- Partial implementation of Online anjuta plugin installer
- Fix GDL to restore widgets dock locations correctly.
- Fix GDL to restore widgets geometry correctly on dock.

Milestone 2.2.0 - (Estimated release time Oct 2005):
----------------------------------------------------
- Bug fixing and stable release.

Milestone 2.3.0 - (Estimated release time Dec 2005):
----------------------------------------------------
- Complete ants project management backend for gnome-build
- Complete ants build system plugin.
- Complete online anjuta plugin installer
- Complete API implementations in plugins (i.e no missing implementation stubs).
- More plugins.

Milestone 2.4.0 - (Estimated release time Feb 2006):
----------------------------------------------------
- Bug fixing and stable release.

gTranslator plugin for Anjuta:
------------------------------
gTranslator is a software used by translators to edit and update .po files,
which are localization files in a project. This plugin will be responsible
for integrating gTranslator in Anjuta DevStudio. The implementation will
closely follow the way we have integrated DevHelp in Anjuta.

The first task involves collaborating with gTranslator developers to have
gTranslator in form of a library that will provide all the neccessary widgets
to be embeded in Anjuta. The approach would be to segregate all UI (menus and
toolbars) controls from the main engine. The main engine (library) should
contain only the main widgets and API for their interaction with the UI and
themsleves. gTranslator executable will itself use this library and implement
the UIs within.

Once that has been done and neccessary library interface has been created
in gTranslator, we can move ahead with creating the actual Anjuta plugin. If
gTranslator library creation is done properly, the Anjuta plugin should
not involve much work, because the only thing that matters at this point is
it to wrap the library with our own UI and embed the widgets in Anjuta Shell.
Much of this can be easily understood from existing plugins (e.g. devhelp
plugin).

Performance Profiler plugin:
----------------------------
gprof is a command line tool for profiling program performance. The executable
is required to be compiled with -p flag and when the program is executed,
a profiling info is collected in a file. After the execution is done, gprof
can be used to interpret the profile data. This plugin parses the output from
gprof and presents the information in different views -- text, lists
and graphs. It is similar to the valgrind plugin given below.

Valgrind plugin:
----------------
Valgrind is a command-line memory profiling tool and is considered one of
bests. The plugin basically gives a graphical front-end to it that can be
used by Anjuta users to profile their projects. There should be a menu item
in Build submenu that, when activated, will bring up a list of all existing
executables and let the user select one (ala Execute and Start debugger menus).
There should also be interface to specify various valgrind options in the
dialog.

The output from the valgrind should be then parsed and the statistics
presented in different views. Some views will be in form of lists and trees,
while some will be in nicely drawn graphics (using GnomeCanvas widget).
All views should be implemented as notebook pages in a single plugin widget
for docking in shell. The plugin should accept application/x-executable
mime type and should be user activatable.

The parsing code can be taken from Alleyoop project, which is a gnome
front-end for valgrind. Some of the ideas for the user interface can also be
taken from it.
