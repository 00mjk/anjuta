ABS
ACCESSPERMS
ALLPERMS
ANCHOR_INSELECT
ANCHOR_SELECTED
ANCHOR_UNSELECTED
ATEXIT
Abs
Alignment
AllEvents
AllFrames
AllocRawImage
AllocRawImageCmap
AllocRawImageWithCmap
AlphaChannelInfo
AlphaPtr
BAD_CAST
BEGIN_GNOME_DECLS
BUFSIZ
BYTE_ALREADY_TYPEDEFED
BodyImageLoaded
Boolean
Byte
Byte
CHAR
CHARVAL
CHECK_CALLBACK
CLAMP
CLEAR_ALL
CLEAR_HARD
CLEAR_NONE
CLEAR_SOFT
CLK_TCK
COLOR_CLASS_GRAYSCALE
COLOR_CLASS_INDEXED
COLOR_CLASS_RGB
CORBA_sequence_CORBA_string
CORBA_sequence_CORBA_string__alloc(void)
CORBA_sequence_CORBA_string__free(gpointer mem, gpointer dat, CORBA_boolean free_strings) /* ORBit internal use */
CORBA_sequence_CORBA_string_allocbuf(CORBA_unsigned_long len)
DEBUG
DEBUG_MEMORY
DEBUG_MEMORY_LOCATION
DEFFILEMODE
DIR
DIR
DOMAIN
D_
Dimension
END_GNOME_DECLS
EOF
EXIT_FAILURE
EXIT_SUCCESS
FALSE
FILE
FONTHEIGHT
FONT_BOLD
FONT_FIXED
FONT_ITALIC
FONT_MEDIUM
FONT_REGULAR
FONT_SCALABLE
FP_INFINITE
FP_NAN
FP_NORMAL
FP_SUBNORMAL
FP_ZERO
F_LOCK
F_OK
F_TEST
F_TLOCK
F_ULOCK
False
FirstFrame
FnHeight
FontInfo
FrameScrolling
FrameSize
FreeImageBuffer
FreePixmap
FreeRawImage
GAllocator
GArray
GByteArray
GCache
GCacheDestroyFunc
GCacheDupFunc
GCacheNewFunc
GCompareFunc
GCompletion
GCompletionFunc
GCond
GDK_0
GDK_1
GDK_2
GDK_3
GDK_3270_AltCursor
GDK_3270_Attn
GDK_3270_BackTab
GDK_3270_ChangeScreen
GDK_3270_Copy
GDK_3270_CursorBlink
GDK_3270_CursorSelect
GDK_3270_Duplicate
GDK_3270_Enter
GDK_3270_EraseEOF
GDK_3270_EraseInput
GDK_3270_ExSelect
GDK_3270_FieldMark
GDK_3270_Ident
GDK_3270_Jump
GDK_3270_KeyClick
GDK_3270_Left2
GDK_3270_PA2
GDK_3270_PA3
GDK_3270_Play
GDK_3270_PrintScreen
GDK_3270_Quit
GDK_3270_Record
GDK_3270_Reset
GDK_3270_Right2
GDK_3270_Rule
GDK_3270_Setup
GDK_3270_Test
GDK_4
GDK_5
GDK_6
GDK_7
GDK_8
GDK_9
GDK_A
GDK_AE
GDK_Aacute
GDK_Abreve
GDK_AccessX_Enable
GDK_AccessX_Feedback_Enable
GDK_Acircumflex
GDK_Adiaeresis
GDK_Agrave
GDK_Alt_L
GDK_Amacron
GDK_Aogonek
GDK_Arabic_ain
GDK_Arabic_alef
GDK_Arabic_alefmaksura
GDK_Arabic_beh
GDK_Arabic_comma
GDK_Arabic_dad
GDK_Arabic_dal
GDK_Arabic_damma
GDK_Arabic_dammatan
GDK_Arabic_fatha
GDK_Arabic_fathatan
GDK_Arabic_feh
GDK_Arabic_ghain
GDK_Arabic_ha
GDK_Arabic_hah
GDK_Arabic_hamza
GDK_Arabic_hamzaonalef
GDK_Arabic_hamzaonwaw
GDK_Arabic_hamzaonyeh
GDK_Arabic_hamzaunderalef
GDK_Arabic_heh
GDK_Arabic_jeem
GDK_Arabic_kaf
GDK_Arabic_kasra
GDK_Arabic_kasratan
GDK_Arabic_khah
GDK_Arabic_lam
GDK_Arabic_maddaonalef
GDK_Arabic_meem
GDK_Arabic_noon
GDK_Arabic_qaf
GDK_Arabic_question_mark
GDK_Arabic_ra
GDK_Arabic_sad
GDK_Arabic_seen
GDK_Arabic_semicolon
GDK_Arabic_shadda
GDK_Arabic_sheen
GDK_Arabic_sukun
GDK_Arabic_switch
GDK_Arabic_tah
GDK_Arabic_tatweel
GDK_Arabic_teh
GDK_Arabic_tehmarbuta
GDK_Arabic_thal
GDK_Arabic_theh
GDK_Arabic_waw
GDK_Arabic_yeh
GDK_Arabic_zah
GDK_Arabic_zain
GDK_Aring
GDK_Atilde
GDK_B
GDK_BackSpace
GDK_Begin
GDK_BounceKeys_Enable
GDK_Break
GDK_Byelorussian_SHORTU
GDK_Byelorussian_shortu
GDK_C
GDK_COLORMAP_XCOLORMAP
GDK_COLORMAP_XDISPLAY
GDK_CORE_POINTER
GDK_CURRENT_TIME
GDK_Cabovedot
GDK_Cacute
GDK_Cancel
GDK_Caps_Lock
GDK_Ccaron
GDK_Ccedilla
GDK_Ccircumflex
GDK_Clear
GDK_Control_L
GDK_Control_R
GDK_Cyrillic_A
GDK_Cyrillic_BE
GDK_Cyrillic_CHE
GDK_Cyrillic_DE
GDK_Cyrillic_DZHE
GDK_Cyrillic_E
GDK_Cyrillic_EF
GDK_Cyrillic_EL
GDK_Cyrillic_EM
GDK_Cyrillic_EN
GDK_Cyrillic_ER
GDK_Cyrillic_ES
GDK_Cyrillic_GHE
GDK_Cyrillic_HA
GDK_Cyrillic_HARDSIGN
GDK_Cyrillic_I
GDK_Cyrillic_IE
GDK_Cyrillic_IO
GDK_Cyrillic_JE
GDK_Cyrillic_KA
GDK_Cyrillic_LJE
GDK_Cyrillic_NJE
GDK_Cyrillic_O
GDK_Cyrillic_PE
GDK_Cyrillic_SHA
GDK_Cyrillic_SHCHA
GDK_Cyrillic_SHORTI
GDK_Cyrillic_SOFTSIGN
GDK_Cyrillic_TE
GDK_Cyrillic_TSE
GDK_Cyrillic_U
GDK_Cyrillic_VE
GDK_Cyrillic_YA
GDK_Cyrillic_YERU
GDK_Cyrillic_YU
GDK_Cyrillic_ZE
GDK_Cyrillic_ZHE
GDK_Cyrillic_a
GDK_Cyrillic_be
GDK_Cyrillic_che
GDK_Cyrillic_de
GDK_Cyrillic_dzhe
GDK_Cyrillic_e
GDK_Cyrillic_ef
GDK_Cyrillic_el
GDK_Cyrillic_em
GDK_Cyrillic_en
GDK_Cyrillic_er
GDK_Cyrillic_es
GDK_Cyrillic_ghe
GDK_Cyrillic_ha
GDK_Cyrillic_hardsign
GDK_Cyrillic_i
GDK_Cyrillic_ie
GDK_Cyrillic_io
GDK_Cyrillic_je
GDK_Cyrillic_ka
GDK_Cyrillic_lje
GDK_Cyrillic_nje
GDK_Cyrillic_o
GDK_Cyrillic_pe
GDK_Cyrillic_sha
GDK_Cyrillic_shcha
GDK_Cyrillic_shorti
GDK_Cyrillic_softsign
GDK_Cyrillic_te
GDK_Cyrillic_tse
GDK_Cyrillic_u
GDK_Cyrillic_ve
GDK_Cyrillic_ya
GDK_Cyrillic_yeru
GDK_Cyrillic_yu
GDK_Cyrillic_ze
GDK_Cyrillic_zhe
GDK_D
GDK_DISPLAY
GDK_Dcaron
GDK_Delete
GDK_Down
GDK_Dstroke
GDK_E
GDK_ENG
GDK_ETH
GDK_Eabovedot
GDK_Eacute
GDK_Ecaron
GDK_Ecircumflex
GDK_Ediaeresis
GDK_Egrave
GDK_Eisu_Shift
GDK_Eisu_toggle
GDK_Emacron
GDK_End
GDK_Eogonek
GDK_Escape
GDK_Eth
GDK_Execute
GDK_F
GDK_F1
GDK_F10
GDK_F11
GDK_F12
GDK_F14
GDK_F15
GDK_F16
GDK_F17
GDK_F18
GDK_F19
GDK_F2
GDK_F20
GDK_F21
GDK_F22
GDK_F23
GDK_F24
GDK_F25
GDK_F26
GDK_F27
GDK_F28
GDK_F3
GDK_F30
GDK_F31
GDK_F32
GDK_F33
GDK_F34
GDK_F35
GDK_F4
GDK_F5
GDK_F6
GDK_F7
GDK_F8
GDK_F9
GDK_FONT_XDISPLAY
GDK_FONT_XFONT
GDK_Find
GDK_First_Virtual_Screen
GDK_G
GDK_GC_XDISPLAY
GDK_GC_XGC
GDK_Gabovedot
GDK_Gbreve
GDK_Gcedilla
GDK_Gcircumflex
GDK_Greek_ALPHA
GDK_Greek_ALPHAaccent
GDK_Greek_BETA
GDK_Greek_CHI
GDK_Greek_DELTA
GDK_Greek_EPSILON
GDK_Greek_EPSILONaccent
GDK_Greek_ETA
GDK_Greek_ETAaccent
GDK_Greek_GAMMA
GDK_Greek_IOTA
GDK_Greek_IOTAaccent
GDK_Greek_IOTAdiaeresis
GDK_Greek_KAPPA
GDK_Greek_LAMBDA
GDK_Greek_LAMDA
GDK_Greek_MU
GDK_Greek_NU
GDK_Greek_OMEGA
GDK_Greek_OMEGAaccent
GDK_Greek_OMICRON
GDK_Greek_OMICRONaccent
GDK_Greek_PHI
GDK_Greek_PI
GDK_Greek_PSI
GDK_Greek_RHO
GDK_Greek_SIGMA
GDK_Greek_TAU
GDK_Greek_THETA
GDK_Greek_UPSILON
GDK_Greek_UPSILONaccent
GDK_Greek_UPSILONdieresis
GDK_Greek_XI
GDK_Greek_ZETA
GDK_Greek_accentdieresis
GDK_Greek_alpha
GDK_Greek_alphaaccent
GDK_Greek_beta
GDK_Greek_chi
GDK_Greek_delta
GDK_Greek_epsilon
GDK_Greek_epsilonaccent
GDK_Greek_eta
GDK_Greek_etaaccent
GDK_Greek_finalsmallsigma
GDK_Greek_gamma
GDK_Greek_horizbar
GDK_Greek_iota
GDK_Greek_iotaaccent
GDK_Greek_iotaaccentdieresis
GDK_Greek_iotadieresis
GDK_Greek_kappa
GDK_Greek_lambda
GDK_Greek_lamda
GDK_Greek_mu
GDK_Greek_nu
GDK_Greek_omega
GDK_Greek_omegaaccent
GDK_Greek_omicron
GDK_Greek_omicronaccent
GDK_Greek_phi
GDK_Greek_pi
GDK_Greek_psi
GDK_Greek_rho
GDK_Greek_sigma
GDK_Greek_switch
GDK_Greek_tau
GDK_Greek_theta
GDK_Greek_upsilon
GDK_Greek_upsilonaccent
GDK_Greek_upsilonaccentdieresis
GDK_Greek_upsilondieresis
GDK_Greek_xi
GDK_Greek_zeta
GDK_H
GDK_Hangul
GDK_Hangul_A
GDK_Hangul_AE
GDK_Hangul_AraeA
GDK_Hangul_AraeAE
GDK_Hangul_Banja
GDK_Hangul_Cieuc
GDK_Hangul_Codeinput
GDK_Hangul_Dikeud
GDK_Hangul_E
GDK_Hangul_EO
GDK_Hangul_EU
GDK_Hangul_End
GDK_Hangul_Hanja
GDK_Hangul_Hieuh
GDK_Hangul_I
GDK_Hangul_Ieung
GDK_Hangul_J_Cieuc
GDK_Hangul_J_Dikeud
GDK_Hangul_J_Hieuh
GDK_Hangul_J_Ieung
GDK_Hangul_J_Jieuj
GDK_Hangul_J_Khieuq
GDK_Hangul_J_Kiyeog
GDK_Hangul_J_KiyeogSios
GDK_Hangul_J_KkogjiDalrinIeung
GDK_Hangul_J_Mieum
GDK_Hangul_J_Nieun
GDK_Hangul_J_NieunHieuh
GDK_Hangul_J_NieunJieuj
GDK_Hangul_J_PanSios
GDK_Hangul_J_Phieuf
GDK_Hangul_J_Pieub
GDK_Hangul_J_PieubSios
GDK_Hangul_J_Rieul
GDK_Hangul_J_RieulHieuh
GDK_Hangul_J_RieulKiyeog
GDK_Hangul_J_RieulMieum
GDK_Hangul_J_RieulPhieuf
GDK_Hangul_J_RieulPieub
GDK_Hangul_J_RieulSios
GDK_Hangul_J_RieulTieut
GDK_Hangul_J_Sios
GDK_Hangul_J_SsangKiyeog
GDK_Hangul_J_SsangSios
GDK_Hangul_J_Tieut
GDK_Hangul_J_YeorinHieuh
GDK_Hangul_Jamo
GDK_Hangul_Jeonja
GDK_Hangul_Jieuj
GDK_Hangul_Khieuq
GDK_Hangul_Kiyeog
GDK_Hangul_KiyeogSios
GDK_Hangul_KkogjiDalrinIeung
GDK_Hangul_Mieum
GDK_Hangul_MultipleCandidate
GDK_Hangul_Nieun
GDK_Hangul_NieunHieuh
GDK_Hangul_NieunJieuj
GDK_Hangul_O
GDK_Hangul_OE
GDK_Hangul_PanSios
GDK_Hangul_Phieuf
GDK_Hangul_Pieub
GDK_Hangul_PieubSios
GDK_Hangul_PostHanja
GDK_Hangul_PreHanja
GDK_Hangul_PreviousCandidate
GDK_Hangul_Rieul
GDK_Hangul_RieulHieuh
GDK_Hangul_RieulKiyeog
GDK_Hangul_RieulMieum
GDK_Hangul_RieulPhieuf
GDK_Hangul_RieulPieub
GDK_Hangul_RieulSios
GDK_Hangul_RieulTieut
GDK_Hangul_RieulYeorinHieuh
GDK_Hangul_Romaja
GDK_Hangul_SingleCandidate
GDK_Hangul_Sios
GDK_Hangul_Special
GDK_Hangul_SsangDikeud
GDK_Hangul_SsangJieuj
GDK_Hangul_SsangKiyeog
GDK_Hangul_SsangPieub
GDK_Hangul_SsangSios
GDK_Hangul_Start
GDK_Hangul_SunkyeongeumMieum
GDK_Hangul_SunkyeongeumPhieuf
GDK_Hangul_SunkyeongeumPieub
GDK_Hangul_Tieut
GDK_Hangul_U
GDK_Hangul_WA
GDK_Hangul_WAE
GDK_Hangul_WE
GDK_Hangul_WEO
GDK_Hangul_WI
GDK_Hangul_YA
GDK_Hangul_YAE
GDK_Hangul_YE
GDK_Hangul_YEO
GDK_Hangul_YI
GDK_Hangul_YO
GDK_Hangul_YU
GDK_Hangul_YeorinHieuh
GDK_Hangul_switch
GDK_Hankaku
GDK_Hcircumflex
GDK_Hebrew_switch
GDK_Henkan
GDK_Henkan_Mode
GDK_Hiragana
GDK_Hiragana_Katakana
GDK_Home
GDK_Hstroke
GDK_Hyper_L
GDK_Hyper_R
GDK_I
GDK_IMAGE_XDISPLAY
GDK_IMAGE_XIMAGE
GDK_ISO_Center_Object
GDK_ISO_Continuous_Underline
GDK_ISO_Discontinuous_Underline
GDK_ISO_Emphasize
GDK_ISO_Enter
GDK_ISO_Fast_Cursor_Down
GDK_ISO_Fast_Cursor_Left
GDK_ISO_Fast_Cursor_Right
GDK_ISO_Fast_Cursor_Up
GDK_ISO_First_Group
GDK_ISO_First_Group_Lock
GDK_ISO_Group_Latch
GDK_ISO_Group_Lock
GDK_ISO_Group_Shift
GDK_ISO_Last_Group
GDK_ISO_Last_Group_Lock
GDK_ISO_Left_Tab
GDK_ISO_Level2_Latch
GDK_ISO_Level3_Latch
GDK_ISO_Level3_Lock
GDK_ISO_Level3_Shift
GDK_ISO_Lock
GDK_ISO_Move_Line_Down
GDK_ISO_Move_Line_Up
GDK_ISO_Next_Group
GDK_ISO_Next_Group_Lock
GDK_ISO_Partial_Line_Down
GDK_ISO_Partial_Line_Up
GDK_ISO_Partial_Space_Left
GDK_ISO_Partial_Space_Right
GDK_ISO_Prev_Group_Lock
GDK_ISO_Release_Both_Margins
GDK_ISO_Release_Margin_Left
GDK_ISO_Set_Margin_Left
GDK_ISO_Set_Margin_Right
GDK_IS_PIXBUF_LOADER
GDK_IS_PIXBUF_LOADER_CLASS
GDK_Iabovedot
GDK_Iacute
GDK_Icircumflex
GDK_Idiaeresis
GDK_Igrave
GDK_Imacron
GDK_Insert
GDK_Iogonek
GDK_Itilde
GDK_J
GDK_Jcircumflex
GDK_K
GDK_KP_0
GDK_KP_1
GDK_KP_2
GDK_KP_3
GDK_KP_4
GDK_KP_5
GDK_KP_6
GDK_KP_7
GDK_KP_8
GDK_KP_9
GDK_KP_Add
GDK_KP_Begin
GDK_KP_Decimal
GDK_KP_Delete
GDK_KP_Divide
GDK_KP_Down
GDK_KP_End
GDK_KP_Enter
GDK_KP_Equal
GDK_KP_F1
GDK_KP_F2
GDK_KP_F3
GDK_KP_F4
GDK_KP_Home
GDK_KP_Insert
GDK_KP_Left
GDK_KP_Next
GDK_KP_Page_Down
GDK_KP_Right
GDK_KP_Separator
GDK_KP_Space
GDK_KP_Subtract
GDK_KP_Tab
GDK_KP_Up
GDK_Kana_Lock
GDK_Kana_Shift
GDK_Kanji
GDK_Katakana
GDK_Kcedilla
GDK_Korean_Won
GDK_L
GDK_L1
GDK_L10
GDK_L2
GDK_L4
GDK_L5
GDK_L6
GDK_L7
GDK_L8
GDK_L9
GDK_Lacute
GDK_Last_Virtual_Screen
GDK_Lcaron
GDK_Lcedilla
GDK_Left
GDK_Lstroke
GDK_M
GDK_Macedonia_DSE
GDK_Macedonia_GJE
GDK_Macedonia_KJE
GDK_Macedonia_dse
GDK_Macedonia_gje
GDK_Macedonia_kje
GDK_Mae_Koho
GDK_Massyo
GDK_Menu
GDK_Meta_L
GDK_Meta_R
GDK_Mode_switch
GDK_MouseKeys_Accel_Enable
GDK_MouseKeys_Enable
GDK_Muhenkan
GDK_Multi_key
GDK_MultipleCandidate
GDK_N
GDK_NONE
GDK_NOTE
GDK_Nacute
GDK_Ncaron
GDK_Ncedilla
GDK_Next
GDK_Next_Virtual_Screen
GDK_Ntilde
GDK_Num_Lock
GDK_O
GDK_Oacute
GDK_Ocircumflex
GDK_Odiaeresis
GDK_Odoubleacute
GDK_Ograve
GDK_Omacron
GDK_Ooblique
GDK_Otilde
GDK_Overlay1_Enable
GDK_Overlay2_Enable
GDK_P
GDK_PARENT_RELATIVE
GDK_PIXBUF_FEATURES_H
GDK_PIXBUF_H
GDK_PIXBUF_LOADER
GDK_PIXBUF_LOADER_CLASS
GDK_PIXBUF_LOADER_H
GDK_PIXBUF_MAJOR
GDK_PIXBUF_MICRO
GDK_PIXBUF_MINOR
GDK_PIXBUF_VERSION
GDK_PRIORITY_EVENTS
GDK_Page_Down
GDK_Page_Up
GDK_Pause
GDK_Pointer_Button1
GDK_Pointer_Button3
GDK_Pointer_Button4
GDK_Pointer_Button5
GDK_Pointer_Button_Dflt
GDK_Pointer_DblClick1
GDK_Pointer_DblClick2
GDK_Pointer_DblClick3
GDK_Pointer_DblClick4
GDK_Pointer_DblClick5
GDK_Pointer_DblClick_Dflt
GDK_Pointer_DfltBtnNext
GDK_Pointer_DfltBtnPrev
GDK_Pointer_Down
GDK_Pointer_DownLeft
GDK_Pointer_DownRight
GDK_Pointer_Drag1
GDK_Pointer_Drag2
GDK_Pointer_Drag3
GDK_Pointer_Drag4
GDK_Pointer_Drag5
GDK_Pointer_Drag_Dflt
GDK_Pointer_EnableKeys
GDK_Pointer_Left
GDK_Pointer_Right
GDK_Pointer_Up
GDK_Pointer_UpLeft
GDK_Pointer_UpRight
GDK_Prev_Virtual_Screen
GDK_PreviousCandidate
GDK_Print
GDK_Prior
GDK_Q
GDK_R
GDK_R1
GDK_R10
GDK_R11
GDK_R12
GDK_R13
GDK_R14
GDK_R15
GDK_R2
GDK_R3
GDK_R4
GDK_R5
GDK_R6
GDK_R7
GDK_R8
GDK_ROOT_PARENT
GDK_ROOT_WINDOW
GDK_Racute
GDK_Rcaron
GDK_Rcedilla
GDK_Redo
GDK_RepeatKeys_Enable
GDK_Return
GDK_Right
GDK_Romaji
GDK_S
GDK_Sacute
GDK_Scaron
GDK_Scedilla
GDK_Scircumflex
GDK_Scroll_Lock
GDK_Select
GDK_Serbian_DJE
GDK_Serbian_DZE
GDK_Serbian_JE
GDK_Serbian_LJE
GDK_Serbian_NJE
GDK_Serbian_TSHE
GDK_Serbian_dje
GDK_Serbian_dze
GDK_Serbian_je
GDK_Serbian_lje
GDK_Serbian_nje
GDK_Serbian_tshe
GDK_Shift_L
GDK_Shift_Lock
GDK_Shift_R
GDK_SingleCandidate
GDK_SlowKeys_Enable
GDK_StickyKeys_Enable
GDK_Super_L
GDK_Super_R
GDK_Sys_Req
GDK_T
GDK_THORN
GDK_THREADS_ENTER
GDK_THREADS_LEAVE
GDK_TYPE_PIXBUF_LOADER
GDK_Tab
GDK_Tcaron
GDK_Tcedilla
GDK_Terminate_Server
GDK_Thai_baht
GDK_Thai_bobaimai
GDK_Thai_chochan
GDK_Thai_chochang
GDK_Thai_choching
GDK_Thai_chochoe
GDK_Thai_dochada
GDK_Thai_dodek
GDK_Thai_fofa
GDK_Thai_fofan
GDK_Thai_hohip
GDK_Thai_honokhuk
GDK_Thai_khokhai
GDK_Thai_khokhon
GDK_Thai_khokhuat
GDK_Thai_khokhwai
GDK_Thai_khorakhang
GDK_Thai_kokai
GDK_Thai_lakkhangyao
GDK_Thai_lekchet
GDK_Thai_lekha
GDK_Thai_lekhok
GDK_Thai_lekkao
GDK_Thai_leknung
GDK_Thai_lekpaet
GDK_Thai_leksam
GDK_Thai_leksi
GDK_Thai_leksong
GDK_Thai_leksun
GDK_Thai_lochula
GDK_Thai_loling
GDK_Thai_lu
GDK_Thai_maichattawa
GDK_Thai_maiek
GDK_Thai_maihanakat
GDK_Thai_maihanakat_maitho
GDK_Thai_maitaikhu
GDK_Thai_maitho
GDK_Thai_maitri
GDK_Thai_maiyamok
GDK_Thai_moma
GDK_Thai_ngongu
GDK_Thai_nikhahit
GDK_Thai_nonen
GDK_Thai_nonu
GDK_Thai_oang
GDK_Thai_paiyannoi
GDK_Thai_phinthu
GDK_Thai_phophan
GDK_Thai_phophung
GDK_Thai_phosamphao
GDK_Thai_popla
GDK_Thai_rorua
GDK_Thai_ru
GDK_Thai_saraa
GDK_Thai_saraaa
GDK_Thai_saraae
GDK_Thai_saraaimaimalai
GDK_Thai_saraaimaimuan
GDK_Thai_saraam
GDK_Thai_sarae
GDK_Thai_sarai
GDK_Thai_saraii
GDK_Thai_sarao
GDK_Thai_sarau
GDK_Thai_saraue
GDK_Thai_sarauee
GDK_Thai_sarauu
GDK_Thai_sorusi
GDK_Thai_sosala
GDK_Thai_soso
GDK_Thai_sosua
GDK_Thai_thanthakhat
GDK_Thai_thonangmontho
GDK_Thai_thophuthao
GDK_Thai_thothahan
GDK_Thai_thothan
GDK_Thai_thothong
GDK_Thai_thothung
GDK_Thai_topatak
GDK_Thai_totao
GDK_Thai_wowaen
GDK_Thai_yoyak
GDK_Thai_yoying
GDK_Thorn
GDK_Touroku
GDK_Tslash
GDK_U
GDK_Uacute
GDK_Ubreve
GDK_Ucircumflex
GDK_Udiaeresis
GDK_Udoubleacute
GDK_Ugrave
GDK_Ukrainian_I
GDK_Ukrainian_IE
GDK_Ukrainian_YI
GDK_Ukrainian_i
GDK_Ukrainian_ie
GDK_Ukrainian_yi
GDK_Ukranian_I
GDK_Ukranian_JE
GDK_Ukranian_YI
GDK_Ukranian_i
GDK_Ukranian_je
GDK_Ukranian_yi
GDK_Umacron
GDK_Undo
GDK_Uogonek
GDK_Up
GDK_Uring
GDK_Utilde
GDK_V
GDK_VISUAL_XVISUAL
GDK_VoidSymbol
GDK_W
GDK_WINDOW_XDISPLAY
GDK_WINDOW_XWINDOW
GDK_X
GDK_Y
GDK_Yacute
GDK_Z
GDK_Zabovedot
GDK_Zacute
GDK_Zcaron
GDK_Zen_Koho
GDK_Zenkaku
GDK_a
GDK_aacute
GDK_abovedot
GDK_abreve
GDK_acircumflex
GDK_acute
GDK_adiaeresis
GDK_ae
GDK_agrave
GDK_amacron
GDK_ampersand
GDK_aogonek
GDK_apostrophe
GDK_approximate
GDK_aring
GDK_asciicircum
GDK_asciitilde
GDK_asterisk
GDK_at
GDK_atilde
GDK_b
GDK_backslash
GDK_ballotcross
GDK_bar
GDK_blank
GDK_botintegral
GDK_botleftparens
GDK_botleftsqbracket
GDK_botleftsummation
GDK_botrightparens
GDK_botrightsqbracket
GDK_botrightsummation
GDK_bott
GDK_botvertsummationconnector
GDK_braceleft
GDK_braceright
GDK_bracketleft
GDK_bracketright
GDK_breve
GDK_brokenbar
GDK_c
GDK_cabovedot
GDK_cacute
GDK_careof
GDK_caret
GDK_caron
GDK_ccaron
GDK_ccedilla
GDK_ccircumflex
GDK_cedilla
GDK_cent
GDK_checkerboard
GDK_checkmark
GDK_circle
GDK_club
GDK_colon
GDK_comma
GDK_copyright
GDK_cr
GDK_crossinglines
GDK_currency
GDK_cursor
GDK_d
GDK_dagger
GDK_dcaron
GDK_dead_abovedot
GDK_dead_abovering
GDK_dead_acute
GDK_dead_belowdot
GDK_dead_breve
GDK_dead_cedilla
GDK_dead_circumflex
GDK_dead_diaeresis
GDK_dead_doubleacute
GDK_dead_grave
GDK_dead_iota
GDK_dead_macron
GDK_dead_ogonek
GDK_dead_semivoiced_sound
GDK_dead_tilde
GDK_dead_voiced_sound
GDK_decimalpoint
GDK_degree
GDK_diaeresis
GDK_diamond
GDK_digitspace
GDK_division
GDK_dollar
GDK_doubbaselinedot
GDK_doubleacute
GDK_doubledagger
GDK_doublelowquotemark
GDK_downarrow
GDK_downcaret
GDK_downshoe
GDK_downstile
GDK_downtack
GDK_dstroke
GDK_e
GDK_eabovedot
GDK_eacute
GDK_ecaron
GDK_ecircumflex
GDK_ediaeresis
GDK_egrave
GDK_ellipsis
GDK_em3space
GDK_em4space
GDK_emacron
GDK_emdash
GDK_emfilledcircle
GDK_emfilledrect
GDK_emopencircle
GDK_emopenrectangle
GDK_emspace
GDK_endash
GDK_enfilledcircbullet
GDK_enfilledsqbullet
GDK_eng
GDK_enopencircbullet
GDK_enopensquarebullet
GDK_enspace
GDK_eogonek
GDK_equal
GDK_eth
GDK_exclam
GDK_exclamdown
GDK_f
GDK_femalesymbol
GDK_ff
GDK_figdash
GDK_filledlefttribullet
GDK_filledrectbullet
GDK_filledrighttribullet
GDK_filledtribulletdown
GDK_filledtribulletup
GDK_fiveeighths
GDK_fivesixths
GDK_fourfifths
GDK_function
GDK_g
GDK_gabovedot
GDK_gbreve
GDK_gcedilla
GDK_gcircumflex
GDK_grave
GDK_greater
GDK_greaterthanequal
GDK_guillemotleft
GDK_guillemotright
GDK_h
GDK_hairspace
GDK_hcircumflex
GDK_heart
GDK_hebrew_aleph
GDK_hebrew_ayin
GDK_hebrew_bet
GDK_hebrew_beth
GDK_hebrew_chet
GDK_hebrew_dalet
GDK_hebrew_daleth
GDK_hebrew_doublelowline
GDK_hebrew_finalkaph
GDK_hebrew_finalmem
GDK_hebrew_finalnun
GDK_hebrew_finalpe
GDK_hebrew_finalzade
GDK_hebrew_finalzadi
GDK_hebrew_gimel
GDK_hebrew_gimmel
GDK_hebrew_he
GDK_hebrew_het
GDK_hebrew_kaph
GDK_hebrew_kuf
GDK_hebrew_lamed
GDK_hebrew_mem
GDK_hebrew_nun
GDK_hebrew_pe
GDK_hebrew_qoph
GDK_hebrew_resh
GDK_hebrew_samech
GDK_hebrew_samekh
GDK_hebrew_shin
GDK_hebrew_taf
GDK_hebrew_taw
GDK_hebrew_tet
GDK_hebrew_teth
GDK_hebrew_waw
GDK_hebrew_yod
GDK_hebrew_zade
GDK_hebrew_zadi
GDK_hebrew_zain
GDK_hebrew_zayin
GDK_hexagram
GDK_horizconnector
GDK_horizlinescan1
GDK_horizlinescan3
GDK_horizlinescan5
GDK_horizlinescan7
GDK_horizlinescan9
GDK_hstroke
GDK_ht
GDK_hyphen
GDK_i
GDK_iacute
GDK_icircumflex
GDK_identical
GDK_idiaeresis
GDK_idotless
GDK_ifonlyif
GDK_igrave
GDK_imacron
GDK_implies
GDK_includedin
GDK_includes
GDK_infinity
GDK_integral
GDK_intersection
GDK_iogonek
GDK_itilde
GDK_j
GDK_jcircumflex
GDK_jot
GDK_k
GDK_kana_A
GDK_kana_CHI
GDK_kana_E
GDK_kana_FU
GDK_kana_HA
GDK_kana_HE
GDK_kana_HI
GDK_kana_HO
GDK_kana_HU
GDK_kana_I
GDK_kana_KA
GDK_kana_KE
GDK_kana_KI
GDK_kana_KO
GDK_kana_KU
GDK_kana_MA
GDK_kana_ME
GDK_kana_MI
GDK_kana_MO
GDK_kana_MU
GDK_kana_N
GDK_kana_NA
GDK_kana_NE
GDK_kana_NI
GDK_kana_NO
GDK_kana_NU
GDK_kana_O
GDK_kana_RA
GDK_kana_RE
GDK_kana_RI
GDK_kana_RO
GDK_kana_RU
GDK_kana_SA
GDK_kana_SE
GDK_kana_SHI
GDK_kana_SO
GDK_kana_SU
GDK_kana_TA
GDK_kana_TE
GDK_kana_TI
GDK_kana_TO
GDK_kana_TSU
GDK_kana_TU
GDK_kana_U
GDK_kana_WA
GDK_kana_WO
GDK_kana_YA
GDK_kana_YO
GDK_kana_YU
GDK_kana_a
GDK_kana_closingbracket
GDK_kana_comma
GDK_kana_conjunctive
GDK_kana_e
GDK_kana_fullstop
GDK_kana_i
GDK_kana_middledot
GDK_kana_o
GDK_kana_openingbracket
GDK_kana_switch
GDK_kana_tsu
GDK_kana_tu
GDK_kana_u
GDK_kana_ya
GDK_kana_yo
GDK_kana_yu
GDK_kappa
GDK_kcedilla
GDK_kra
GDK_l
GDK_lacute
GDK_latincross
GDK_lcaron
GDK_lcedilla
GDK_leftanglebracket
GDK_leftarrow
GDK_leftcaret
GDK_leftdoublequotemark
GDK_leftmiddlecurlybrace
GDK_leftopentriangle
GDK_leftpointer
GDK_leftradical
GDK_leftshoe
GDK_leftsinglequotemark
GDK_leftt
GDK_lefttack
GDK_less
GDK_lessthanequal
GDK_lf
GDK_logicaland
GDK_logicalor
GDK_lowleftcorner
GDK_lowrightcorner
GDK_lstroke
GDK_m
GDK_macron
GDK_malesymbol
GDK_maltesecross
GDK_marker
GDK_masculine
GDK_minus
GDK_minutes
GDK_mu
GDK_multiply
GDK_musicalflat
GDK_musicalsharp
GDK_n
GDK_nabla
GDK_nacute
GDK_ncaron
GDK_ncedilla
GDK_nl
GDK_nobreakspace
GDK_notequal
GDK_notsign
GDK_ntilde
GDK_numbersign
GDK_numerosign
GDK_o
GDK_oacute
GDK_ocircumflex
GDK_odiaeresis
GDK_odoubleacute
GDK_ogonek
GDK_ograve
GDK_omacron
GDK_oneeighth
GDK_onefifth
GDK_onehalf
GDK_onequarter
GDK_onesixth
GDK_onesuperior
GDK_onethird
GDK_openrectbullet
GDK_openstar
GDK_opentribulletdown
GDK_opentribulletup
GDK_ordfeminine
GDK_oslash
GDK_otilde
GDK_overbar
GDK_overline
GDK_p
GDK_paragraph
GDK_parenleft
GDK_parenright
GDK_partialderivative
GDK_percent
GDK_period
GDK_periodcentered
GDK_phonographcopyright
GDK_plus
GDK_plusminus
GDK_prescription
GDK_prolongedsound
GDK_punctspace
GDK_q
GDK_quad
GDK_question
GDK_questiondown
GDK_quotedbl
GDK_quoteleft
GDK_quoteright
GDK_r
GDK_racute
GDK_radical
GDK_rcaron
GDK_rcedilla
GDK_registered
GDK_rightanglebracket
GDK_rightarrow
GDK_rightcaret
GDK_rightdoublequotemark
GDK_rightmiddlecurlybrace
GDK_rightmiddlesummation
GDK_rightopentriangle
GDK_rightpointer
GDK_rightshoe
GDK_rightsinglequotemark
GDK_rightt
GDK_righttack
GDK_s
GDK_sacute
GDK_scaron
GDK_scedilla
GDK_scircumflex
GDK_script_switch
GDK_seconds
GDK_section
GDK_semicolon
GDK_semivoicedsound
GDK_seveneighths
GDK_signaturemark
GDK_signifblank
GDK_similarequal
GDK_singlelowquotemark
GDK_slash
GDK_soliddiamond
GDK_space
GDK_ssharp
GDK_sterling
GDK_t
GDK_tcaron
GDK_tcedilla
GDK_telephone
GDK_telephonerecorder
GDK_therefore
GDK_thinspace
GDK_thorn
GDK_threeeighths
GDK_threefifths
GDK_threequarters
GDK_threesuperior
GDK_topintegral
GDK_topleftparens
GDK_topleftradical
GDK_topleftsqbracket
GDK_topleftsummation
GDK_toprightparens
GDK_toprightsqbracket
GDK_toprightsummation
GDK_topt
GDK_topvertsummationconnector
GDK_trademark
GDK_trademarkincircle
GDK_tslash
GDK_twofifths
GDK_twosuperior
GDK_twothirds
GDK_u
GDK_uacute
GDK_ubreve
GDK_ucircumflex
GDK_udiaeresis
GDK_udoubleacute
GDK_ugrave
GDK_umacron
GDK_underbar
GDK_underscore
GDK_union
GDK_uogonek
GDK_uparrow
GDK_upcaret
GDK_upleftcorner
GDK_uprightcorner
GDK_upshoe
GDK_upstile
GDK_uptack
GDK_uring
GDK_utilde
GDK_v
GDK_variation
GDK_vertbar
GDK_vertconnector
GDK_voicedsound
GDK_vt
GDK_w
GDK_x
GDK_y
GDK_yacute
GDK_ydiaeresis
GDK_yen
GDK_z
GDK_zabovedot
GDK_zacute
GDK_zcaron
GData
GDataForeachFunc
GDate
GDateDMY
GDateDay
GDateMonth
GDateWeekday
GDateYear
GDebugKey
GDestroyNotify
GErrorFunc
GErrorType
GFreeFunc
GFunc
GHFunc
GHRFunc
GHashFunc
GHashTable
GHook
GHookCheckFunc
GHookCheckMarshaller
GHookCompareFunc
GHookFindFunc
GHookFlagMask
GHookFreeFunc
GHookFunc
GHookList
GHookMarshaller
GIF_STREAM_END
GIF_STREAM_ERR
GIF_STREAM_FINAL
GIF_STREAM_INIT
GIF_STREAM_OK
GINT16_FROM_BE
GINT16_FROM_LE
GINT32_FROM_BE
GINT32_FROM_LE
GINT64_FROM_BE
GINT64_FROM_LE
GINT_FROM_BE
GINT_FROM_LE
GIOChannel
GIOCondition
GIOError
GIOFunc
GIOFuncs
GLIB_CHECK_VERSION
GLONG_FROM_BE
GLONG_FROM_LE
GList
GLogFunc
GLogLevelFlags
GMainLoop
GMemChunk
GMutex
GNOMEUIINFO_END
GNOMEUIINFO_HELP
GNOMEUIINFO_ITEM
GNOMEUIINFO_ITEM_DATA
GNOMEUIINFO_ITEM_NONE
GNOMEUIINFO_ITEM_STOCK
GNOMEUIINFO_KEY_UIBDATA
GNOMEUIINFO_KEY_UIDATA
GNOMEUIINFO_MENU_ABOUT_ITEM
GNOMEUIINFO_MENU_CLEAR_ITEM
GNOMEUIINFO_MENU_CLOSE_ITEM
GNOMEUIINFO_MENU_CLOSE_WINDOW_ITEM
GNOMEUIINFO_MENU_COPY_ITEM
GNOMEUIINFO_MENU_CUT_ITEM
GNOMEUIINFO_MENU_EDIT_TREE
GNOMEUIINFO_MENU_END_GAME_ITEM
GNOMEUIINFO_MENU_EXIT_ITEM
GNOMEUIINFO_MENU_FILES_TREE
GNOMEUIINFO_MENU_FILE_TREE
GNOMEUIINFO_MENU_FIND_AGAIN_ITEM
GNOMEUIINFO_MENU_FIND_ITEM
GNOMEUIINFO_MENU_GAME_TREE
GNOMEUIINFO_MENU_HELP_TREE
GNOMEUIINFO_MENU_HINT_ITEM
GNOMEUIINFO_MENU_NEW_GAME_ITEM
GNOMEUIINFO_MENU_NEW_ITEM
GNOMEUIINFO_MENU_NEW_SUBTREE
GNOMEUIINFO_MENU_NEW_WINDOW_ITEM
GNOMEUIINFO_MENU_OPEN_ITEM
GNOMEUIINFO_MENU_PASTE_ITEM
GNOMEUIINFO_MENU_PAUSE_GAME_ITEM
GNOMEUIINFO_MENU_PREFERENCES_ITEM
GNOMEUIINFO_MENU_PRINT_ITEM
GNOMEUIINFO_MENU_PRINT_SETUP_ITEM
GNOMEUIINFO_MENU_PROPERTIES_ITEM
GNOMEUIINFO_MENU_REDO_ITEM
GNOMEUIINFO_MENU_REDO_MOVE_ITEM
GNOMEUIINFO_MENU_REPLACE_ITEM
GNOMEUIINFO_MENU_RESTART_GAME_ITEM
GNOMEUIINFO_MENU_REVERT_ITEM
GNOMEUIINFO_MENU_SAVE_AS_ITEM
GNOMEUIINFO_MENU_SAVE_ITEM
GNOMEUIINFO_MENU_SCORES_ITEM
GNOMEUIINFO_MENU_SELECT_ALL_ITEM
GNOMEUIINFO_MENU_SETTINGS_TREE
GNOMEUIINFO_MENU_UNDO_ITEM
GNOMEUIINFO_MENU_UNDO_MOVE_ITEM
GNOMEUIINFO_MENU_VIEW_TREE
GNOMEUIINFO_MENU_WINDOWS_TREE
GNOMEUIINFO_RADIOITEM
GNOMEUIINFO_RADIOITEM_DATA
GNOMEUIINFO_RADIOLIST
GNOMEUIINFO_SEPARATOR
GNOMEUIINFO_SUBTREE
GNOMEUIINFO_SUBTREE_HINT
GNOMEUIINFO_SUBTREE_STOCK
GNOMEUIINFO_TOGGLEITEM
GNOMEUIINFO_TOGGLEITEM_DATA
GNOME_ABOUT
GNOME_ABOUT_CLASS
GNOME_ANIMATOR
GNOME_ANIMATOR_CLASS
GNOME_APP
GNOME_APPBAR
GNOME_APPBAR_CLASS
GNOME_APPBAR_HAS_PROGRESS
GNOME_APPBAR_HAS_STATUS
GNOME_APPBAR_INTERACTIVE
GNOME_APP_CLASS
GNOME_APP_H
GNOME_APP_HELPER_H
GNOME_APP_MENUBAR_NAME
GNOME_APP_TOOLBAR_NAME
GNOME_APP_UTIL_H
GNOME_CALCULATOR
GNOME_CALCULATOR_CLASS
GNOME_CALCULATOR_H
GNOME_CANCEL
GNOME_CANVAS
GNOME_CANVAS_BPATH
GNOME_CANVAS_BPATH_CLASS
GNOME_CANVAS_BPATH_H
GNOME_CANVAS_CLASS
GNOME_CANVAS_COLOR
GNOME_CANVAS_COLOR_A
GNOME_CANVAS_ELLIPSE
GNOME_CANVAS_ELLIPSE_CLASS
GNOME_CANVAS_EPSILON
GNOME_CANVAS_GROUP
GNOME_CANVAS_GROUP_CLASS
GNOME_CANVAS_H
GNOME_CANVAS_HACKTEXT
GNOME_CANVAS_HACKTEXT_CLASS
GNOME_CANVAS_HACKTEXT_H
GNOME_CANVAS_IMAGE
GNOME_CANVAS_IMAGE_CLASS
GNOME_CANVAS_IMAGE_H
GNOME_CANVAS_ITEM
GNOME_CANVAS_ITEM_CLASS
GNOME_CANVAS_LINE
GNOME_CANVAS_LINE_CLASS
GNOME_CANVAS_LINE_H
GNOME_CANVAS_LOAD_H
GNOME_CANVAS_PIXBUF
GNOME_CANVAS_PIXBUF_CLASS
GNOME_CANVAS_PIXBUF_H
GNOME_CANVAS_POLYGON
GNOME_CANVAS_POLYGON_CLASS
GNOME_CANVAS_POLYGON_H
GNOME_CANVAS_RE
GNOME_CANVAS_RECT
GNOME_CANVAS_RECT_CLASS
GNOME_CANVAS_RECT_ELLIPSE_H
GNOME_CANVAS_RE_CLASS
GNOME_CANVAS_TEXT
GNOME_CANVAS_TEXT_CLASS
GNOME_CANVAS_TEXT_H
GNOME_CANVAS_UTIL_H
GNOME_CANVAS_WIDGET
GNOME_CANVAS_WIDGET_CLASS
GNOME_CANVAS_WIDGET_H
GNOME_CLIENT
GNOME_CLIENT_CLASS
GNOME_CLIENT_CONNECTED
GNOME_CLIENT_H
GNOME_COLOR_PICKER
GNOME_COLOR_PICKER_CLASS
GNOME_COLOR_PICKER_H
GNOME_COMPAT_H
GNOME_CONFIG_H
GNOME_DATE_EDIT
GNOME_DATE_EDIT_CLASS
GNOME_DENTRY_EDIT
GNOME_DENTRY_EDIT_CLASS
GNOME_DENTRY_EDIT_H
GNOME_DIALOG
GNOME_DIALOG_CLASS
GNOME_DIALOG_UTIL_H
GNOME_DOCK
GNOME_DOCK_BAND
GNOME_DOCK_BAND_CLASS
GNOME_DOCK_CLASS
GNOME_DOCK_ITEM
GNOME_DOCK_ITEM_BEH_NEVER_DETACH
GNOME_DOCK_ITEM_CLASS
GNOME_DOCK_ITEM_NOT_LOCKED
GNOME_DOCK_LAYOUT
GNOME_DOCK_LAYOUT_CLASS
GNOME_DRUID
GNOME_DRUID_CLASS
GNOME_DRUID_PAGE
GNOME_DRUID_PAGE_CLASS
GNOME_DRUID_PAGE_FINISH
GNOME_DRUID_PAGE_FINISH_CLASS
GNOME_DRUID_PAGE_STANDARD
GNOME_DRUID_PAGE_STANDARD_CLASS
GNOME_DRUID_PAGE_START
GNOME_DRUID_PAGE_START_CLASS
GNOME_ENTRY
GNOME_ENTRY_CLASS
GNOME_ENTRY_H
GNOME_EXEC_H
GNOME_FILE_ENTRY
GNOME_FILE_ENTRY_CLASS
GNOME_FILE_ENTRY_H
GNOME_FONT
GNOME_FONT_CLASS
GNOME_FONT_NUM_WEIGHTS
GNOME_FONT_PICKER
GNOME_FONT_PICKER_CLASS
GNOME_FONT_PICKER_H
GNOME_FONT_SELECTION
GNOME_FONT_SELECTION_CLASS
GNOME_FONT_SELECTION_DIALOG
GNOME_FONT_SELECTION_DIALOG_CLASS
GNOME_FONT_SELECTOR
GNOME_FONT_SELECTOR_CLASS
GNOME_GURU
GNOME_GURU_CLASS
GNOME_GURU_H
GNOME_GenericFactory
GNOME_GenericFactory_CannotActivate
GNOME_GenericFactory_CannotActivate__alloc
GNOME_GenericFactory_CannotActivate__free(gpointer mem, gpointer dat, CORBA_boolean free_strings) /* ORBit internal use */
GNOME_GenericFactory__free
GNOME_GenericFactory_create_object(GNOME_GenericFactory _obj, const CORBA_char * goad_id, const GNOME_stringlist * params, CORBA_Environment * ev)
GNOME_GenericFactory_supports(GNOME_GenericFactory _obj, const CORBA_char * obj_goad_id, CORBA_Environment * ev)
GNOME_HREF
GNOME_HREF_CLASS
GNOME_HREF_H
GNOME_ICE_H
GNOME_ICON_ENTRY
GNOME_ICON_ENTRY_CLASS
GNOME_ICON_ENTRY_H
GNOME_ICON_LIST
GNOME_ICON_LIST_CLASS
GNOME_ICON_LIST_IS_EDITABLE
GNOME_ICON_LIST_STATIC_TEXT
GNOME_ICON_SELECTION
GNOME_ICON_SELECTION_CLASS
GNOME_ICON_SEL_H
GNOME_ICON_TEXT_H
GNOME_ICON_TEXT_ITEM
GNOME_ICON_TEXT_ITEM_CLASS
GNOME_INIT_H
GNOME_IS_ABOUT
GNOME_IS_ABOUT_CLASS
GNOME_IS_ANIMATOR
GNOME_IS_ANIMATOR_CLASS
GNOME_IS_APP
GNOME_IS_APPBAR
GNOME_IS_APPBAR_CLASS
GNOME_IS_APP_CLASS
GNOME_IS_CALCULATOR
GNOME_IS_CALCULATOR_CLASS
GNOME_IS_CANVAS
GNOME_IS_CANVAS_BPATH
GNOME_IS_CANVAS_BPATH_CLASS
GNOME_IS_CANVAS_CLASS
GNOME_IS_CANVAS_ELLIPSE
GNOME_IS_CANVAS_ELLIPSE_CLASS
GNOME_IS_CANVAS_GROUP
GNOME_IS_CANVAS_GROUP_CLASS
GNOME_IS_CANVAS_HACKTEXT
GNOME_IS_CANVAS_HACKTEXT_CLASS
GNOME_IS_CANVAS_IMAGE
GNOME_IS_CANVAS_IMAGE_CLASS
GNOME_IS_CANVAS_ITEM
GNOME_IS_CANVAS_ITEM_CLASS
GNOME_IS_CANVAS_LINE
GNOME_IS_CANVAS_LINE_CLASS
GNOME_IS_CANVAS_PIXBUF
GNOME_IS_CANVAS_PIXBUF_CLASS
GNOME_IS_CANVAS_POLYGON
GNOME_IS_CANVAS_POLYGON_CLASS
GNOME_IS_CANVAS_RE
GNOME_IS_CANVAS_RECT
GNOME_IS_CANVAS_RECT_CLASS
GNOME_IS_CANVAS_RE_CLASS
GNOME_IS_CANVAS_TEXT
GNOME_IS_CANVAS_TEXT_CLASS
GNOME_IS_CANVAS_WIDGET
GNOME_IS_CANVAS_WIDGET_CLASS
GNOME_IS_CLIENT
GNOME_IS_CLIENT_CLASS
GNOME_IS_COLOR_PICKER
GNOME_IS_COLOR_PICKER_CLASS
GNOME_IS_DATE_EDIT
GNOME_IS_DATE_EDIT_CLASS
GNOME_IS_DENTRY_EDIT
GNOME_IS_DENTRY_EDIT_CLASS
GNOME_IS_DIALOG
GNOME_IS_DIALOG_CLASS
GNOME_IS_DOCK
GNOME_IS_DOCK_BAND
GNOME_IS_DOCK_BAND_CLASS
GNOME_IS_DOCK_CLASS
GNOME_IS_DOCK_ITEM
GNOME_IS_DOCK_ITEM_CLASS
GNOME_IS_DOCK_LAYOUT
GNOME_IS_DOCK_LAYOUT_CLASS
GNOME_IS_DRUID
GNOME_IS_DRUID_CLASS
GNOME_IS_DRUID_PAGE
GNOME_IS_DRUID_PAGE_CLASS
GNOME_IS_DRUID_PAGE_FINISH
GNOME_IS_DRUID_PAGE_FINISH_CLASS
GNOME_IS_DRUID_PAGE_STANDARD
GNOME_IS_DRUID_PAGE_STANDARD_CLASS
GNOME_IS_DRUID_PAGE_START
GNOME_IS_DRUID_PAGE_START_CLASS
GNOME_IS_ENTRY
GNOME_IS_ENTRY_CLASS
GNOME_IS_FILE_ENTRY
GNOME_IS_FILE_ENTRY_CLASS
GNOME_IS_FONT
GNOME_IS_FONT_CLASS
GNOME_IS_FONT_PICKER
GNOME_IS_FONT_PICKER_CLASS
GNOME_IS_FONT_SELECTION
GNOME_IS_FONT_SELECTION_CLASS
GNOME_IS_FONT_SELECTION_DIALOG
GNOME_IS_FONT_SELECTION_DIALOG_CLASS
GNOME_IS_FONT_SELECTOR
GNOME_IS_FONT_SELECTOR_CLASS
GNOME_IS_GURU
GNOME_IS_GURU_CLASS
GNOME_IS_HREF
GNOME_IS_HREF_CLASS
GNOME_IS_ICON_ENTRY
GNOME_IS_ICON_ENTRY_CLASS
GNOME_IS_ICON_LIST
GNOME_IS_ICON_LIST_CLASS
GNOME_IS_ICON_SELECTION
GNOME_IS_ICON_SELECTION_CLASS
GNOME_IS_ICON_TEXT_ITEM
GNOME_IS_ICON_TEXT_ITEM_CLASS
GNOME_IS_LESS
GNOME_IS_LESS_CLASS
GNOME_IS_MDI
GNOME_IS_MDI_CHILD
GNOME_IS_MDI_CHILD_CLASS
GNOME_IS_MDI_CLASS
GNOME_IS_MDI_GENERIC_CHILD
GNOME_IS_MDI_GENERIC_CHILD_CLASS
GNOME_IS_MDI_MDI_CHILD
GNOME_IS_MESSAGE_BOX
GNOME_IS_MESSAGE_BOX_CLASS
GNOME_IS_NUMBER_ENTRY
GNOME_IS_NUMBER_ENTRY_CLASS
GNOME_IS_PAPER_SELECTOR
GNOME_IS_PAPER_SELECTOR_CLASS
GNOME_IS_PIXMAP
GNOME_IS_PIXMAP_CLASS
GNOME_IS_PIXMAP_ENTRY
GNOME_IS_PIXMAP_ENTRY_CLASS
GNOME_IS_PRINTER
GNOME_IS_PRINTER_CLASS
GNOME_IS_PRINTER_DIALOG
GNOME_IS_PRINTER_DIALOG_CLASS
GNOME_IS_PRINTER_WIDGET
GNOME_IS_PRINTER_WIDGET_CLASS
GNOME_IS_PRINT_CONTEXT
GNOME_IS_PRINT_CONTEXT_CLASS
GNOME_IS_PRINT_COPIES
GNOME_IS_PRINT_DIALOG
GNOME_IS_PRINT_MASTER
GNOME_IS_PRINT_MASTER_PREVIEW
GNOME_IS_PRINT_META
GNOME_IS_PRINT_META_CLASS
GNOME_IS_PRINT_MULTIPAGE
GNOME_IS_PRINT_MULTIPAGE_CLASS
GNOME_IS_PRINT_PCLR
GNOME_IS_PRINT_PCLR_CLASS
GNOME_IS_PRINT_PIXBUF
GNOME_IS_PRINT_PIXBUF_CLASS
GNOME_IS_PRINT_PREVIEW
GNOME_IS_PRINT_PREVIEW_CLASS
GNOME_IS_PRINT_RGBP
GNOME_IS_PRINT_RGBP_CLASS
GNOME_IS_PROC_BAR
GNOME_IS_PROC_BAR_CLASS
GNOME_IS_PROPERTY_BOX
GNOME_IS_PROPERTY_BOX_CLASS
GNOME_IS_SCORES
GNOME_IS_SCORES_CLASS
GNOME_IS_SPELL
GNOME_IS_SPELL_CLASS
GNOME_IS_STOCK
GNOME_IS_STOCK_CLASS
GNOME_IS_STOCK_PIXMAP_WIDGET
GNOME_KEY_MOD_CLEAR
GNOME_KEY_MOD_CLOSE
GNOME_KEY_MOD_CLOSE_WINDOW
GNOME_KEY_MOD_COPY
GNOME_KEY_MOD_CUT
GNOME_KEY_MOD_EXIT
GNOME_KEY_MOD_FIND
GNOME_KEY_MOD_FIND_AGAIN
GNOME_KEY_MOD_NEW
GNOME_KEY_MOD_NEW_GAME
GNOME_KEY_MOD_NEW_WINDOW
GNOME_KEY_MOD_OPEN
GNOME_KEY_MOD_PASTE
GNOME_KEY_MOD_PAUSE_GAME
GNOME_KEY_MOD_PRINT
GNOME_KEY_MOD_PRINT_SETUP
GNOME_KEY_MOD_REDO
GNOME_KEY_MOD_REDO_MOVE
GNOME_KEY_MOD_REPLACE
GNOME_KEY_MOD_SAVE
GNOME_KEY_MOD_SAVE_AS
GNOME_KEY_MOD_SELECT_ALL
GNOME_KEY_MOD_UNDO
GNOME_KEY_MOD_UNDO_MOVE
GNOME_KEY_NAME_CLEAR
GNOME_KEY_NAME_CLOSE
GNOME_KEY_NAME_CLOSE_WINDOW
GNOME_KEY_NAME_COPY
GNOME_KEY_NAME_CUT
GNOME_KEY_NAME_EXIT
GNOME_KEY_NAME_FIND
GNOME_KEY_NAME_FIND_AGAIN
GNOME_KEY_NAME_NEW
GNOME_KEY_NAME_NEW_GAME
GNOME_KEY_NAME_NEW_WINDOW
GNOME_KEY_NAME_OPEN
GNOME_KEY_NAME_PASTE
GNOME_KEY_NAME_PAUSE_GAME
GNOME_KEY_NAME_PRINT
GNOME_KEY_NAME_PRINT_SETUP
GNOME_KEY_NAME_REDO
GNOME_KEY_NAME_REDO_MOVE
GNOME_KEY_NAME_REPLACE
GNOME_KEY_NAME_SAVE
GNOME_KEY_NAME_SAVE_AS
GNOME_KEY_NAME_SELECT_ALL
GNOME_KEY_NAME_UNDO
GNOME_KEY_NAME_UNDO_MOVE
GNOME_LESS
GNOME_LESS_CLASS
GNOME_LESS_H
GNOME_MDI
GNOME_MDI_CHILD
GNOME_MDI_CHILD_CLASS
GNOME_MDI_CLASS
GNOME_MDI_GENERIC_CHILD
GNOME_MDI_GENERIC_CHILD_CLASS
GNOME_MENU_EDIT_PATH
GNOME_MENU_EDIT_STRING
GNOME_MENU_FILES_PATH
GNOME_MENU_FILES_STRING
GNOME_MENU_FILE_PATH
GNOME_MENU_FILE_STRING
GNOME_MENU_NEW_PATH
GNOME_MENU_NEW_STRING
GNOME_MENU_SETTINGS_PATH
GNOME_MENU_SETTINGS_STRING
GNOME_MENU_VIEW_PATH
GNOME_MENU_VIEW_STRING
GNOME_MENU_WINDOWS_PATH
GNOME_MENU_WINDOWS_STRING
GNOME_MESSAGE_BOX
GNOME_MESSAGE_BOX_CLASS
GNOME_MESSAGE_BOX_ERROR
GNOME_MESSAGE_BOX_GENERIC
GNOME_MESSAGE_BOX_INFO
GNOME_MESSAGE_BOX_QUESTION
GNOME_MESSAGE_BOX_WARNING
GNOME_METADATA_H
GNOME_MIME_INFO_H
GNOME_NO
GNOME_NUMBER_ENTRY
GNOME_NUMBER_ENTRY_CLASS
GNOME_NUMBER_ENTRY_H
GNOME_OK
GNOME_PAD
GNOME_PAD_BIG
GNOME_PAD_SMALL
GNOME_PAPER_H
GNOME_PAPER_SELECTOR
GNOME_PAPER_SELECTOR_CLASS
GNOME_PAPER_SELECTOR_H
GNOME_PIXMAP
GNOME_PIXMAP_CLASS
GNOME_PIXMAP_ENTRY
GNOME_PIXMAP_ENTRY_CLASS
GNOME_PIXMAP_ENTRY_H
GNOME_PIXMAP_H
GNOME_POPUPMENU_H
GNOME_POPUP_HELP_H
GNOME_PREFERENCES_H
GNOME_PRINTER
GNOME_PRINTER_CLASS
GNOME_PRINTER_DIALOG
GNOME_PRINTER_DIALOG_CLASS
GNOME_PRINTER_WIDGET
GNOME_PRINTER_WIDGET_CLASS
GNOME_PRINT_CONTEXT
GNOME_PRINT_CONTEXT_CLASS
GNOME_PRINT_COPIES
GNOME_PRINT_COPIES_CLASS
GNOME_PRINT_DIALOG
GNOME_PRINT_DIALOG_CLASS
GNOME_PRINT_MASTER
GNOME_PRINT_MASTER_CLASS
GNOME_PRINT_MASTER_H
GNOME_PRINT_MASTER_PREVIEW
GNOME_PRINT_MASTER_PREVIEW_CLASS
GNOME_PRINT_MASTER_PREVIEW_H
GNOME_PRINT_META
GNOME_PRINT_META_CLASS
GNOME_PRINT_MULTIPAGE
GNOME_PRINT_MULTIPAGE_CLASS
GNOME_PRINT_PCLR
GNOME_PRINT_PCLR_CLASS
GNOME_PRINT_PIXBUF
GNOME_PRINT_PIXBUF_CLASS
GNOME_PRINT_PREVIEW
GNOME_PRINT_PREVIEW_CLASS
GNOME_PRINT_RGBP
GNOME_PRINT_RGBP_CLASS
GNOME_PROC_BAR
GNOME_PROC_BAR__CLASS
GNOME_PROPERTY_BOX
GNOME_PROPERTY_BOX_CLASS
GNOME_PROPERTY_BOX_DIRTY
GNOME_REGEX_H
GNOME_REMOTE_H
GNOME_SCORES
GNOME_SCORES_CLASS
GNOME_SCORES_H
GNOME_SPELL
GNOME_SPELL_CLASS
GNOME_STARTUP_H
GNOME_STOCK
GNOME_STOCK_BUTTON_APPLY
GNOME_STOCK_BUTTON_CANCEL
GNOME_STOCK_BUTTON_CLOSE
GNOME_STOCK_BUTTON_DOWN
GNOME_STOCK_BUTTON_FONT
GNOME_STOCK_BUTTON_HELP
GNOME_STOCK_BUTTON_NEXT
GNOME_STOCK_BUTTON_NO
GNOME_STOCK_BUTTON_OK
GNOME_STOCK_BUTTON_PREV
GNOME_STOCK_BUTTON_UP
GNOME_STOCK_BUTTON_YES
GNOME_STOCK_CLASS
GNOME_STOCK_MENU_ABOUT
GNOME_STOCK_MENU_ALIGN_CENTER
GNOME_STOCK_MENU_ALIGN_JUSTIFY
GNOME_STOCK_MENU_ALIGN_LEFT
GNOME_STOCK_MENU_ALIGN_RIGHT
GNOME_STOCK_MENU_ATTACH
GNOME_STOCK_MENU_BACK
GNOME_STOCK_MENU_BLANK
GNOME_STOCK_MENU_BOOK_BLUE
GNOME_STOCK_MENU_BOOK_GREEN
GNOME_STOCK_MENU_BOOK_OPEN
GNOME_STOCK_MENU_BOOK_RED
GNOME_STOCK_MENU_BOOK_YELLOW
GNOME_STOCK_MENU_BOTTOM
GNOME_STOCK_MENU_CDROM
GNOME_STOCK_MENU_CLOSE
GNOME_STOCK_MENU_CONVERT
GNOME_STOCK_MENU_COPY
GNOME_STOCK_MENU_CUT
GNOME_STOCK_MENU_DOWN
GNOME_STOCK_MENU_EXEC
GNOME_STOCK_MENU_EXIT
GNOME_STOCK_MENU_FIRST
GNOME_STOCK_MENU_FONT
GNOME_STOCK_MENU_FORWARD
GNOME_STOCK_MENU_HOME
GNOME_STOCK_MENU_INDEX
GNOME_STOCK_MENU_JUMP_TO
GNOME_STOCK_MENU_LAST
GNOME_STOCK_MENU_LINE_IN
GNOME_STOCK_MENU_MAIL
GNOME_STOCK_MENU_MAIL_FWD
GNOME_STOCK_MENU_MAIL_NEW
GNOME_STOCK_MENU_MAIL_RCV
GNOME_STOCK_MENU_MAIL_RPL
GNOME_STOCK_MENU_MAIL_SND
GNOME_STOCK_MENU_MIC
GNOME_STOCK_MENU_MIDI
GNOME_STOCK_MENU_NEW
GNOME_STOCK_MENU_OPEN
GNOME_STOCK_MENU_PASTE
GNOME_STOCK_MENU_PREF
GNOME_STOCK_MENU_PRINT
GNOME_STOCK_MENU_PROP
GNOME_STOCK_MENU_QUIT
GNOME_STOCK_MENU_REDO
GNOME_STOCK_MENU_REFRESH
GNOME_STOCK_MENU_REVERT
GNOME_STOCK_MENU_SAVE
GNOME_STOCK_MENU_SAVE_AS
GNOME_STOCK_MENU_SCORES
GNOME_STOCK_MENU_SEARCH
GNOME_STOCK_MENU_SPELLCHECK
GNOME_STOCK_MENU_SRCHRPL
GNOME_STOCK_MENU_STOP
GNOME_STOCK_MENU_TEXT_BOLD
GNOME_STOCK_MENU_TEXT_ITALIC
GNOME_STOCK_MENU_TEXT_STRIKEOUT
GNOME_STOCK_MENU_TEXT_UNDERLINE
GNOME_STOCK_MENU_TIMER
GNOME_STOCK_MENU_TIMER_STOP
GNOME_STOCK_MENU_TOP
GNOME_STOCK_MENU_TRASH
GNOME_STOCK_MENU_TRASH_FULL
GNOME_STOCK_MENU_UNDELETE
GNOME_STOCK_MENU_UNDO
GNOME_STOCK_MENU_UP
GNOME_STOCK_MENU_VOLUME
GNOME_STOCK_PIXMAP_ABOUT
GNOME_STOCK_PIXMAP_ADD
GNOME_STOCK_PIXMAP_ALIGN_CENTER
GNOME_STOCK_PIXMAP_ALIGN_JUSTIFY
GNOME_STOCK_PIXMAP_ALIGN_LEFT
GNOME_STOCK_PIXMAP_ALIGN_RIGHT
GNOME_STOCK_PIXMAP_ATTACH
GNOME_STOCK_PIXMAP_BACK
GNOME_STOCK_PIXMAP_BOOK_BLUE
GNOME_STOCK_PIXMAP_BOOK_GREEN
GNOME_STOCK_PIXMAP_BOOK_OPEN
GNOME_STOCK_PIXMAP_BOOK_RED
GNOME_STOCK_PIXMAP_BOOK_YELLOW
GNOME_STOCK_PIXMAP_BOTTOM
GNOME_STOCK_PIXMAP_CDROM
GNOME_STOCK_PIXMAP_CLEAR
GNOME_STOCK_PIXMAP_CLOSE
GNOME_STOCK_PIXMAP_COLORSELECTOR
GNOME_STOCK_PIXMAP_CONVERT
GNOME_STOCK_PIXMAP_COPY
GNOME_STOCK_PIXMAP_CUT
GNOME_STOCK_PIXMAP_DISABLED
GNOME_STOCK_PIXMAP_DOWN
GNOME_STOCK_PIXMAP_EXEC
GNOME_STOCK_PIXMAP_EXIT
GNOME_STOCK_PIXMAP_FIRST
GNOME_STOCK_PIXMAP_FOCUSED
GNOME_STOCK_PIXMAP_FONT
GNOME_STOCK_PIXMAP_FORWARD
GNOME_STOCK_PIXMAP_HELP
GNOME_STOCK_PIXMAP_HOME
GNOME_STOCK_PIXMAP_INDEX
GNOME_STOCK_PIXMAP_JUMP_TO
GNOME_STOCK_PIXMAP_LAST
GNOME_STOCK_PIXMAP_LINE_IN
GNOME_STOCK_PIXMAP_MAIL
GNOME_STOCK_PIXMAP_MAIL_FWD
GNOME_STOCK_PIXMAP_MAIL_NEW
GNOME_STOCK_PIXMAP_MAIL_RCV
GNOME_STOCK_PIXMAP_MAIL_RPL
GNOME_STOCK_PIXMAP_MAIL_SND
GNOME_STOCK_PIXMAP_MIC
GNOME_STOCK_PIXMAP_MIDI
GNOME_STOCK_PIXMAP_MULTIPLE
GNOME_STOCK_PIXMAP_NEW
GNOME_STOCK_PIXMAP_NOT
GNOME_STOCK_PIXMAP_OPEN
GNOME_STOCK_PIXMAP_PASTE
GNOME_STOCK_PIXMAP_PREFERENCES
GNOME_STOCK_PIXMAP_PRINT
GNOME_STOCK_PIXMAP_PROPERTIES
GNOME_STOCK_PIXMAP_QUIT
GNOME_STOCK_PIXMAP_REDO
GNOME_STOCK_PIXMAP_REFRESH
GNOME_STOCK_PIXMAP_REGULAR
GNOME_STOCK_PIXMAP_REMOVE
GNOME_STOCK_PIXMAP_REVERT
GNOME_STOCK_PIXMAP_SAVE
GNOME_STOCK_PIXMAP_SAVE_AS
GNOME_STOCK_PIXMAP_SCORES
GNOME_STOCK_PIXMAP_SEARCH
GNOME_STOCK_PIXMAP_SPELLCHECK
GNOME_STOCK_PIXMAP_SRCHRPL
GNOME_STOCK_PIXMAP_STOP
GNOME_STOCK_PIXMAP_TABLE_BORDERS
GNOME_STOCK_PIXMAP_TABLE_FILL
GNOME_STOCK_PIXMAP_TEXT_BOLD
GNOME_STOCK_PIXMAP_TEXT_BULLETED_LIST
GNOME_STOCK_PIXMAP_TEXT_INDENT
GNOME_STOCK_PIXMAP_TEXT_ITALIC
GNOME_STOCK_PIXMAP_TEXT_NUMBERED_LIST
GNOME_STOCK_PIXMAP_TEXT_STRIKEOUT
GNOME_STOCK_PIXMAP_TEXT_UNDERLINE
GNOME_STOCK_PIXMAP_TEXT_UNINDENT
GNOME_STOCK_PIXMAP_TIMER
GNOME_STOCK_PIXMAP_TIMER_STOP
GNOME_STOCK_PIXMAP_TOP
GNOME_STOCK_PIXMAP_TRASH
GNOME_STOCK_PIXMAP_TRASH_FULL
GNOME_STOCK_PIXMAP_UNDELETE
GNOME_STOCK_PIXMAP_UNDO
GNOME_STOCK_PIXMAP_UP
GNOME_STOCK_PIXMAP_VOLUME
GNOME_STOCK_PIXMAP_WIDGET
GNOME_STOCK_PIXMAP_WIDGET_CLASS
GNOME_TEXT_SCALE
GNOME_TYPES_H
GNOME_TYPE_ABOUT
GNOME_TYPE_ANIMATOR
GNOME_TYPE_APP
GNOME_TYPE_APPBAR
GNOME_TYPE_CALCULATOR
GNOME_TYPE_CANVAS
GNOME_TYPE_CANVAS_BPATH
GNOME_TYPE_CANVAS_ELLIPSE
GNOME_TYPE_CANVAS_GROUP
GNOME_TYPE_CANVAS_HACKTEXT
GNOME_TYPE_CANVAS_IMAGE
GNOME_TYPE_CANVAS_ITEM
GNOME_TYPE_CANVAS_LINE
GNOME_TYPE_CANVAS_PIXBUF
GNOME_TYPE_CANVAS_POLYGON
GNOME_TYPE_CANVAS_RE
GNOME_TYPE_CANVAS_RECT
GNOME_TYPE_CANVAS_TEXT
GNOME_TYPE_CANVAS_WIDGET
GNOME_TYPE_CLIENT
GNOME_TYPE_COLOR_PICKER
GNOME_TYPE_DATE_EDIT
GNOME_TYPE_DENTRY_EDIT
GNOME_TYPE_DIALOG
GNOME_TYPE_DOCK
GNOME_TYPE_DOCK_BAND
GNOME_TYPE_DOCK_ITEM
GNOME_TYPE_DOCK_LAYOUT
GNOME_TYPE_DRUID
GNOME_TYPE_DRUID_PAGE
GNOME_TYPE_DRUID_PAGE_FINISH
GNOME_TYPE_DRUID_PAGE_STANDARD
GNOME_TYPE_DRUID_PAGE_START
GNOME_TYPE_ENTRY
GNOME_TYPE_FILE_ENTRY
GNOME_TYPE_FONT
GNOME_TYPE_FONT_PICKER
GNOME_TYPE_FONT_SELECTION
GNOME_TYPE_FONT_SELECTION_DIALOG
GNOME_TYPE_FONT_SELECTOR
GNOME_TYPE_GURU
GNOME_TYPE_HREF
GNOME_TYPE_ICON_ENTRY
GNOME_TYPE_ICON_LIST
GNOME_TYPE_ICON_SELECTION
GNOME_TYPE_ICON_TEXT_ITEM
GNOME_TYPE_LESS
GNOME_TYPE_MDI
GNOME_TYPE_MDI_CHILD
GNOME_TYPE_MDI_GENERIC_CHILD
GNOME_TYPE_MESSAGE_BOX
GNOME_TYPE_NUMBER_ENTRY
GNOME_TYPE_NUM_BUILTINS
GNOME_TYPE_PAPER_SELECTOR
GNOME_TYPE_PIXMAP
GNOME_TYPE_PIXMAP_ENTRY
GNOME_TYPE_PRINTER
GNOME_TYPE_PRINTER_DIALOG
GNOME_TYPE_PRINTER_WIDGET
GNOME_TYPE_PRINT_CONTEXT
GNOME_TYPE_PRINT_META
GNOME_TYPE_PRINT_MULTIPAGE
GNOME_TYPE_PRINT_PCLR
GNOME_TYPE_PRINT_PIXBUF
GNOME_TYPE_PRINT_PREVIEW
GNOME_TYPE_PRINT_RGBP
GNOME_TYPE_PROC_BAR
GNOME_TYPE_PROPERTY_BOX
GNOME_TYPE_SCORES
GNOME_TYPE_SPELL
GNOME_TYPE_STOCK
GNOME_Table
GNOME_Table_OutOfRange
GNOME_Table_OutOfRange__alloc
GNOME_Table_OutOfRange__free(gpointer mem, gpointer dat, CORBA_boolean free_strings)/* ORBit internal use */
GNOME_Table_VALUE_FLOAT
GNOME_Table_VALUE_STRING
GNOME_Table_Value
GNOME_Table_Value__alloc(void)
GNOME_Table_Value__free(gpointer mem, gpointer dat, CORBA_boolean free_strings) /* ORBit internal use */
GNOME_Table__free
GNOME_Table_get(GNOME_Table _obj, const CORBA_long col,  const CORBA_long row, CORBA_Environment * ev)
GNOME_Table_set(GNOME_Table _obj, const CORBA_long col,  const CORBA_long row, const GNOME_Table_Value * val, CORBA_Environment * ev)
GNOME_UIDEFS_H
GNOME_URL_H
GNOME_Unknown
GNOME_Unknown__free
GNOME_Unknown_query_interface(GNOME_Unknown _obj,  const CORBA_char * repoid, CORBA_Environment * ev)
GNOME_Unknown_ref(GNOME_Unknown _obj, CORBA_Environment * ev)
GNOME_Unknown_unref(GNOME_Unknown _obj, CORBA_Environment * ev)
GNOME_WINDOW_ICON_H
GNOME_WINHINTS_H
GNOME_YES
GNOME_stringlist
GNOME_stringlist__alloc(void)
GNOME_stringlist__free(gpointer mem, gpointer dat,  CORBA_boolean free_strings) /* ORBit internal use */
GNORBA_H
GNode
GNodeForeachFunc
GNodeTraverseFunc
GPollFD
GPollFunc
GPrintFunc
GPrivate
GPtrArray
GQuark
GRelation
GSList
GScanner
GScannerConfig
GScannerMsgFunc
GSearchFunc
GSeekType
GSourceFunc
GSourceFuncs
GStaticPrivate
GString
GStringChunk
GTK_ACCEL_LABEL
GTK_ACCEL_LABEL_CLASS
GTK_ADJUSTMENT
GTK_ADJUSTMENT_CLASS
GTK_ALIGNMENT
GTK_ALIGNMENT_CLASS
GTK_ARROW
GTK_ARROW_CLASS
GTK_ASPECT_FRAME
GTK_ASPECT_FRAME_CLASS
GTK_BIN
GTK_BINARY_AGE
GTK_BIN_CLASS
GTK_BOX
GTK_BOX_CLASS
GTK_BUTTON
GTK_BUTTONBOX_DEFAULT
GTK_BUTTON_BOX
GTK_BUTTON_BOX_CLASS
GTK_BUTTON_CLASS
GTK_CALENDAR
GTK_CALENDAR_CLASS
GTK_CAULDRON_DIALOG
GTK_CAULDRON_ERROR
GTK_CAULDRON_GRAB
GTK_CAULDRON_IGNOREENTER
GTK_CAULDRON_IGNOREESCAPE
GTK_CAULDRON_PARENT
GTK_CAULDRON_POPUP
GTK_CAULDRON_SPACE1
GTK_CAULDRON_SPACE10
GTK_CAULDRON_SPACE11
GTK_CAULDRON_SPACE12
GTK_CAULDRON_SPACE13
GTK_CAULDRON_SPACE14
GTK_CAULDRON_SPACE15
GTK_CAULDRON_SPACE2
GTK_CAULDRON_SPACE3
GTK_CAULDRON_SPACE4
GTK_CAULDRON_SPACE5
GTK_CAULDRON_SPACE6
GTK_CAULDRON_SPACE7
GTK_CAULDRON_SPACE8
GTK_CAULDRON_SPACE9
GTK_CAULDRON_SPACE_MASK
GTK_CAULDRON_SPACE_SHIFT
GTK_CAULDRON_TOPLEVEL
GTK_CELL_PIXMAP
GTK_CELL_PIXTEXT
GTK_CELL_TEXT
GTK_CELL_WIDGET
GTK_CHECK_BUTTON
GTK_CHECK_BUTTON_CLASS
GTK_CHECK_CAST
GTK_CHECK_CLASS_CAST
GTK_CHECK_CLASS_TYPE
GTK_CHECK_MENU_ITEM
GTK_CHECK_MENU_ITEM_CLASS
GTK_CHECK_TYPE
GTK_CHECK_VERSION
GTK_CLIST
GTK_CLIST_ADD_MODE
GTK_CLIST_AUTO_RESIZE_BLOCKED
GTK_CLIST_AUTO_SORT
GTK_CLIST_CHILD_HAS_FOCUS
GTK_CLIST_CLASS
GTK_CLIST_DRAW_DRAG_LINE
GTK_CLIST_DRAW_DRAG_RECT
GTK_CLIST_FLAGS
GTK_CLIST_IN_DRAG
GTK_CLIST_REORDERABLE
GTK_CLIST_ROW
GTK_CLIST_ROW_HEIGHT_SET
GTK_CLIST_SET_FLAG
GTK_CLIST_SHOW_TITLES
GTK_CLIST_UNSET_FLAG
GTK_CLIST_USE_DRAG_ICONS
GTK_CLOCK
GTK_CLOCK_CLASS
GTK_COLOR_SELECTION
GTK_COLOR_SELECTION_CLASS
GTK_COLOR_SELECTION_DIALOG
GTK_COLOR_SELECTION_DIALOG_CLASS
GTK_COMBO
GTK_COMBO_CLASS
GTK_CONTAINER
GTK_CONTAINER_CLASS
GTK_CONTAINER_RESIZE_PENDING
GTK_CTREE
GTK_CTREE_CLASS
GTK_CTREE_FUNC
GTK_CTREE_NODE
GTK_CTREE_NODE_NEXT
GTK_CTREE_NODE_PREV
GTK_CTREE_ROW
GTK_CURVE
GTK_CURVE_CLASS
GTK_DATA
GTK_DATA_CLASS
GTK_DIAL
GTK_DIALOG
GTK_DIALOG_CLASS
GTK_DIAL_CLASS
GTK_DRAWING_AREA
GTK_DRAWING_AREA_CLASS
GTK_EDITABLE
GTK_EDITABLE_CLASS
GTK_ENTRY
GTK_ENTRY_CLASS
GTK_EVENT_BOX
GTK_EVENT_BOX_CLASS
GTK_FILE_SELECTION
GTK_FILE_SELECTION_CLASS
GTK_FIXED
GTK_FIXED_CLASS
GTK_FONT_SELECTION
GTK_FONT_SELECTION_CLASS
GTK_FONT_SELECTION_DIALOG
GTK_FONT_SELECTION_DIALOG_CLASS
GTK_FRAME
GTK_FRAME_CLASS
GTK_FUNDAMENTAL_TYPE
GTK_GAMMA_CURVE
GTK_GAMMA_CURVE_CLASS
GTK_HANDLE_BOX
GTK_HANDLE_BOX_CLASS
GTK_HAVE_CONTAINER_FOCUS_ADJUSTMENTS
GTK_HAVE_FEATURES_1_1_0
GTK_HAVE_FEATURES_1_1_10
GTK_HAVE_FEATURES_1_1_11
GTK_HAVE_FEATURES_1_1_12
GTK_HAVE_FEATURES_1_1_13
GTK_HAVE_FEATURES_1_1_14
GTK_HAVE_FEATURES_1_1_2
GTK_HAVE_FEATURES_1_1_4
GTK_HAVE_FEATURES_1_1_5
GTK_HAVE_FEATURES_1_1_6
GTK_HAVE_FEATURES_1_1_7
GTK_HAVE_FEATURES_1_1_8
GTK_HAVE_FEATURES_1_1_9
GTK_HAVE_SIGNAL_INIT
GTK_HBOX
GTK_HBOX_CLASS
GTK_HBUTTON_BOX
GTK_HBUTTON_BOX_CLASS
GTK_HPANED
GTK_HPANED_CLASS
GTK_HRULER
GTK_HRULER_CLASS
GTK_HSCALE
GTK_HSCALE_CLASS
GTK_HSCROLLBAR
GTK_HSCROLLBAR_CLASS
GTK_HSEPARATOR
GTK_HSEPARATOR_CLASS
GTK_IMAGE
GTK_IMAGE_CLASS
GTK_INPUT_DIALOG
GTK_INPUT_DIALOG_CLASS
GTK_INTERFACE_AGE
GTK_INVISIBLE
GTK_INVISIBLE_CLASS
GTK_IS_ACCEL_LABEL
GTK_IS_ACCEL_LABEL_CLASS
GTK_IS_ADJUSTMENT
GTK_IS_ADJUSTMENT_CLASS
GTK_IS_ALIGNMENT
GTK_IS_ALIGNMENT_CLASS
GTK_IS_ARROW
GTK_IS_ARROW_CLASS
GTK_IS_ASPECT_FRAME
GTK_IS_ASPECT_FRAME_CLASS
GTK_IS_BIN
GTK_IS_BIN_CLASS
GTK_IS_BOX
GTK_IS_BOX_CLASS
GTK_IS_BUTTON
GTK_IS_BUTTON_BOX
GTK_IS_BUTTON_BOX_CLASS
GTK_IS_BUTTON_CLASS
GTK_IS_CALENDAR
GTK_IS_CALENDAR_CLASS
GTK_IS_CHECK_BUTTON
GTK_IS_CHECK_BUTTON_CLASS
GTK_IS_CHECK_MENU_ITEM
GTK_IS_CHECK_MENU_ITEM_CLASS
GTK_IS_CLIST
GTK_IS_CLIST_CLASS
GTK_IS_CLOCK
GTK_IS_CLOCK_CLASS
GTK_IS_COLOR_SELECTION
GTK_IS_COLOR_SELECTION_CLASS
GTK_IS_COLOR_SELECTION_DIALOG
GTK_IS_COLOR_SELECTION_DIALOG_CLASS
GTK_IS_COMBO
GTK_IS_CONTAINER
GTK_IS_CONTAINER_CLASS
GTK_IS_CTREE
GTK_IS_CTREE_CLASS
GTK_IS_CURVE
GTK_IS_CURVE_CLASS
GTK_IS_DATA
GTK_IS_DATA_CLASS
GTK_IS_DIAL
GTK_IS_DIALOG
GTK_IS_DIALOG_CLASS
GTK_IS_DIAL_CLASS
GTK_IS_DRAWING_AREA
GTK_IS_DRAWING_AREA_CLASS
GTK_IS_EDITABLE
GTK_IS_EDITABLE_CLASS
GTK_IS_ENTRY
GTK_IS_ENTRY_CLASS
GTK_IS_EVENT_BOX
GTK_IS_EVENT_BOX_CLASS
GTK_IS_FILE_SELECTION
GTK_IS_FILE_SELECTION_CLASS
GTK_IS_FIXED
GTK_IS_FIXED_CLASS
GTK_IS_FONT_SELECTION
GTK_IS_FONT_SELECTION_CLASS
GTK_IS_FONT_SELECTION_DIALOG
GTK_IS_FONT_SELECTION_DIALOG_CLASS
GTK_IS_FRAME
GTK_IS_FRAME_CLASS
GTK_IS_GAMMA_CURVE
GTK_IS_HANDLE_BOX
GTK_IS_HANDLE_BOX_CLASS
GTK_IS_HBOX
GTK_IS_HBOX_CLASS
GTK_IS_HBUTTON_BOX
GTK_IS_HPANED
GTK_IS_HRULER
GTK_IS_HSCALE
GTK_IS_HSCALE_CLASS
GTK_IS_HSCROLLBAR
GTK_IS_HSCROLLBAR_CLASS
GTK_IS_HSEPARATOR
GTK_IS_HSEPARATOR_CLASS
GTK_IS_IMAGE
GTK_IS_IMAGE_CLASS
GTK_IS_INPUT_DIALOG
GTK_IS_INPUT_DIALOG_CLASS
GTK_IS_INVISIBLE
GTK_IS_INVISIBLE_CLASS
GTK_IS_ITEM
GTK_IS_ITEM_CLASS
GTK_IS_ITEM_FACTORY
GTK_IS_ITEM_FACTORY_CLASS
GTK_IS_LABEL
GTK_IS_LABEL_CLASS
GTK_IS_LAYOUT
GTK_IS_LAYOUT_CLASS
GTK_IS_LIST
GTK_IS_LIST_CLASS
GTK_IS_LIST_ITEM
GTK_IS_LIST_ITEM_CLASS
GTK_IS_MENU
GTK_IS_MENU_BAR
GTK_IS_MENU_BAR_CLASS
GTK_IS_MENU_CLASS
GTK_IS_MENU_ITEM
GTK_IS_MENU_ITEM_CLASS
GTK_IS_MENU_SHELL
GTK_IS_MENU_SHELL_CLASS
GTK_IS_MISC
GTK_IS_MISC_CLASS
GTK_IS_NOTEBOOK
GTK_IS_NOTEBOOK_CLASS
GTK_IS_OBJECT
GTK_IS_OBJECT_CLASS
GTK_IS_OPTION_MENU
GTK_IS_OPTION_MENU_CLASS
GTK_IS_PACKER
GTK_IS_PACKER_CLASS
GTK_IS_PANED
GTK_IS_PANED_CLASS
GTK_IS_PIXMAP
GTK_IS_PIXMAP_CLASS
GTK_IS_PIXMAP_MENU_ITEM
GTK_IS_PIXMAP_MENU_ITEM_CLASS
GTK_IS_PLUG
GTK_IS_PREVIEW
GTK_IS_PREVIEW_CLASS
GTK_IS_PROGRESS
GTK_IS_PROGRESS_BAR
GTK_IS_PROGRESS_BAR_CLASS
GTK_IS_PROGRESS_CLASS
GTK_IS_RADIO_BUTTON
GTK_IS_RADIO_BUTTON_CLASS
GTK_IS_RADIO_MENU_ITEM
GTK_IS_RADIO_MENU_ITEM_CLASS
GTK_IS_RANGE
GTK_IS_RANGE_CLASS
GTK_IS_RESIZE_CONTAINER
GTK_IS_ROOT_TREE
GTK_IS_RULER
GTK_IS_RULER_CLASS
GTK_IS_SCALE
GTK_IS_SCALE_CLASS
GTK_IS_SCROLLBAR
GTK_IS_SCROLLBAR_CLASS
GTK_IS_SCROLLED_WINDOW
GTK_IS_SCROLLED_WINDOW_CLASS
GTK_IS_SEPARATOR
GTK_IS_SEPARATOR_CLASS
GTK_IS_SOCKET
GTK_IS_SPIN_BUTTON
GTK_IS_SPIN_BUTTON_CLASS
GTK_IS_STATUSBAR
GTK_IS_TABLE
GTK_IS_TABLE_CLASS
GTK_IS_TEAROFF_MENU_ITEM
GTK_IS_TEAROFF_MENU_ITEM_CLASS
GTK_IS_TED
GTK_IS_TEXT
GTK_IS_TEXT_CLASS
GTK_IS_TIPS_QUERY
GTK_IS_TIPS_QUERY_CLASS
GTK_IS_TOGGLE_BUTTON
GTK_IS_TOGGLE_BUTTON_CLASS
GTK_IS_TOOLBAR
GTK_IS_TOOLBAR_CLASS
GTK_IS_TOOLTIPS
GTK_IS_TOOLTIPS_CLASS
GTK_IS_TREE
GTK_IS_TREE_CLASS
GTK_IS_TREE_ITEM
GTK_IS_TREE_ITEM_CLASS
GTK_IS_VBOX
GTK_IS_VBOX_CLASS
GTK_IS_VBUTTON_BOX
GTK_IS_VIEWPORT
GTK_IS_VIEWPORT_CLASS
GTK_IS_VPANED
GTK_IS_VRULER
GTK_IS_VSCALE
GTK_IS_VSCALE_CLASS
GTK_IS_VSCROLLBAR
GTK_IS_VSCROLLBAR_CLASS
GTK_IS_VSEPARATOR
GTK_IS_VSEPARATOR_CLASS
GTK_IS_WIDGET
GTK_IS_WIDGET_CLASS
GTK_IS_WINDOW
GTK_IS_WINDOW_CLASS
GTK_IS_XMHTML
GTK_ITEM
GTK_ITEM_CLASS
GTK_ITEM_FACTORY
GTK_ITEM_FACTORY_CLASS
GTK_LABEL
GTK_LABEL_CLASS
GTK_LAYOUT
GTK_LAYOUT_CLASS
GTK_LIST
GTK_LIST_CLASS
GTK_LIST_ITEM
GTK_LIST_ITEM_CLASS
GTK_MAJOR_VERSION
GTK_MENU
GTK_MENU_BAR
GTK_MENU_BAR_CLASS
GTK_MENU_CLASS
GTK_MENU_ITEM
GTK_MENU_ITEM_CLASS
GTK_MENU_SHELL
GTK_MENU_SHELL_CLASS
GTK_MICRO_VERSION
GTK_MINOR_VERSION
GTK_MISC
GTK_MISC_CLASS
GTK_NOTE
GTK_NOTEBOOK
GTK_NOTEBOOK_CLASS
GTK_NOTEBOOK_PAGE
GTK_NUM_FONT_FILTERS
GTK_NUM_FONT_PROPERTIES
GTK_NUM_STYLE_PROPERTIES
GTK_OBJECT
GTK_OBJECT_CLASS
GTK_OBJECT_CONNECTED
GTK_OBJECT_CONSTRUCTED
GTK_OBJECT_DESTROYED
GTK_OBJECT_FLAGS
GTK_OBJECT_FLOATING
GTK_OBJECT_NSIGNALS
GTK_OBJECT_SET_FLAGS
GTK_OBJECT_SIGNALS
GTK_OBJECT_TYPE
GTK_OBJECT_UNSET_FLAGS
GTK_OPTION_MENU
GTK_OPTION_MENU_CLASS
GTK_PACKER
GTK_PACKER_CLASS
GTK_PANED
GTK_PANED_CLASS
GTK_PIXMAP
GTK_PIXMAP_CLASS
GTK_PIXMAP_MENU_ITEM
GTK_PIXMAP_MENU_ITEM_CLASS
GTK_PLUG
GTK_PLUG_CLASS
GTK_PREVIEW
GTK_PREVIEW_CLASS
GTK_PRIORITY_DEFAULT
GTK_PRIORITY_HIGH
GTK_PRIORITY_REDRAW
GTK_PRIORITY_RESIZE
GTK_PRIVATE_FLAGS
GTK_PRIVATE_SET_FLAG
GTK_PRIVATE_UNSET_FLAG
GTK_PROGRESS
GTK_PROGRESS_BAR
GTK_PROGRESS_BAR_CLASS
GTK_PROGRESS_CLASS
GTK_RADIO_BUTTON
GTK_RADIO_BUTTON_CLASS
GTK_RADIO_MENU_ITEM
GTK_RADIO_MENU_ITEM_CLASS
GTK_RANGE
GTK_RANGE_CLASS
GTK_RETLOC_BOOL
GTK_RETLOC_BOXED
GTK_RETLOC_CHAR
GTK_RETLOC_DOUBLE
GTK_RETLOC_ENUM
GTK_RETLOC_FLAGS
GTK_RETLOC_FLOAT
GTK_RETLOC_INT
GTK_RETLOC_LONG
GTK_RETLOC_OBJECT
GTK_RETLOC_POINTER
GTK_RETLOC_STRING
GTK_RETLOC_UCHAR
GTK_RETLOC_UINT
GTK_RETLOC_ULONG
GTK_RULER
GTK_RULER_CLASS
GTK_SCALE
GTK_SCALE_CLASS
GTK_SCROLLBAR
GTK_SCROLLBAR_CLASS
GTK_SCROLLED_WINDOW
GTK_SCROLLED_WINDOW_CLASS
GTK_SEPARATOR
GTK_SEPARATOR_CLASS
GTK_SIGNAL_FUNC
GTK_SIGNAL_OFFSET
GTK_SOCKET
GTK_SOCKET_CLASS
GTK_SPIN_BUTTON
GTK_SPIN_BUTTON_CLASS
GTK_STATUSBAR
GTK_STATUSBAR_CLASS
GTK_STRUCT_OFFSET
GTK_STYLE_ATTACHED
GTK_STYLE_NUM_STYLECOLORS
GTK_TABLE
GTK_TABLE_CLASS
GTK_TEAROFF_MENU_ITEM
GTK_TEAROFF_MENU_ITEM_CLASS
GTK_TED
GTK_TED_CLASS
GTK_TEXT
GTK_TEXT_CLASS
GTK_TEXT_INDEX
GTK_TIPS_QUERY
GTK_TIPS_QUERY_CLASS
GTK_TOGGLE_BUTTON
GTK_TOGGLE_BUTTON_CLASS
GTK_TOOLBAR
GTK_TOOLBAR_CLASS
GTK_TOOLTIPS
GTK_TOOLTIPS_CLASS
GTK_TREE
GTK_TREE_CLASS
GTK_TREE_ITEM
GTK_TREE_ITEM_CLASS
GTK_TREE_ITEM_SUBTREE
GTK_TREE_ROOT_TREE
GTK_TREE_SELECTION
GTK_TYPE_ACCEL_LABEL
GTK_TYPE_ADJUSTMENT
GTK_TYPE_ALIGNMENT
GTK_TYPE_ARROW
GTK_TYPE_ASPECT_FRAME
GTK_TYPE_BIN
GTK_TYPE_BOX
GTK_TYPE_BUTTON
GTK_TYPE_BUTTON_BOX
GTK_TYPE_CALENDAR
GTK_TYPE_CHECK_BUTTON
GTK_TYPE_CHECK_MENU_ITEM
GTK_TYPE_CLIST
GTK_TYPE_CLOCK
GTK_TYPE_COLOR_SELECTION
GTK_TYPE_COLOR_SELECTION_DIALOG
GTK_TYPE_CONTAINER
GTK_TYPE_CTREE
GTK_TYPE_CURVE
GTK_TYPE_DATA
GTK_TYPE_DIAL
GTK_TYPE_DIALOG
GTK_TYPE_DRAWING_AREA
GTK_TYPE_EDITABLE
GTK_TYPE_ENTRY
GTK_TYPE_EVENT_BOX
GTK_TYPE_FILE_SELECTION
GTK_TYPE_FIXED
GTK_TYPE_FLAT_FIRST
GTK_TYPE_FLAT_LAST
GTK_TYPE_FONT_SELECTION
GTK_TYPE_FONT_SELECTION_DIALOG
GTK_TYPE_FRAME
GTK_TYPE_FUNDAMENTAL_LAST
GTK_TYPE_FUNDAMENTAL_MAX
GTK_TYPE_HANDLE_BOX
GTK_TYPE_HBOX
GTK_TYPE_HSCALE
GTK_TYPE_HSCROLLBAR
GTK_TYPE_HSEPARATOR
GTK_TYPE_IDENTIFIER
GTK_TYPE_IMAGE
GTK_TYPE_INPUT_DIALOG
GTK_TYPE_INVISIBLE
GTK_TYPE_ITEM
GTK_TYPE_ITEM_FACTORY
GTK_TYPE_LABEL
GTK_TYPE_LAYOUT
GTK_TYPE_LIST
GTK_TYPE_LIST_ITEM
GTK_TYPE_MAKE
GTK_TYPE_MENU
GTK_TYPE_MENU_BAR
GTK_TYPE_MENU_ITEM
GTK_TYPE_MENU_SHELL
GTK_TYPE_MISC
GTK_TYPE_NOTEBOOK
GTK_TYPE_NUM_BUILTINS
GTK_TYPE_OPTION_MENU
GTK_TYPE_PACKER
GTK_TYPE_PANED
GTK_TYPE_PIXMAP
GTK_TYPE_PIXMAP_MENU_ITEM
GTK_TYPE_PREVIEW
GTK_TYPE_PROGRESS
GTK_TYPE_PROGRESS_BAR
GTK_TYPE_RADIO_BUTTON
GTK_TYPE_RADIO_MENU_ITEM
GTK_TYPE_RANGE
GTK_TYPE_RULER
GTK_TYPE_SCALE
GTK_TYPE_SCROLLBAR
GTK_TYPE_SCROLLED_WINDOW
GTK_TYPE_SEPARATOR
GTK_TYPE_SEQNO
GTK_TYPE_SPIN_BUTTON
GTK_TYPE_STRUCTURED_FIRST
GTK_TYPE_STRUCTURED_LAST
GTK_TYPE_TABLE
GTK_TYPE_TEAROFF_MENU_ITEM
GTK_TYPE_TEXT
GTK_TYPE_TIPS_QUERY
GTK_TYPE_TOGGLE_BUTTON
GTK_TYPE_TOOLBAR
GTK_TYPE_TOOLTIPS
GTK_TYPE_TREE
GTK_TYPE_TREE_ITEM
GTK_TYPE_VBOX
GTK_TYPE_VIEWPORT
GTK_TYPE_VSCALE
GTK_TYPE_VSCROLLBAR
GTK_TYPE_VSEPARATOR
GTK_TYPE_WIDGET
GTK_TYPE_WINDOW
GTK_VALUE_ARGS
GTK_VALUE_BOOL
GTK_VALUE_BOXED
GTK_VALUE_CALLBACK
GTK_VALUE_CHAR
GTK_VALUE_C_CALLBACK
GTK_VALUE_DOUBLE
GTK_VALUE_ENUM
GTK_VALUE_FLAGS
GTK_VALUE_FLOAT
GTK_VALUE_FOREIGN
GTK_VALUE_INT
GTK_VALUE_LONG
GTK_VALUE_OBJECT
GTK_VALUE_POINTER
GTK_VALUE_SIGNAL
GTK_VALUE_STRING
GTK_VALUE_UCHAR
GTK_VALUE_UINT
GTK_VALUE_ULONG
GTK_VBOX
GTK_VBOX_CLASS
GTK_VBUTTON_BOX
GTK_VBUTTON_BOX_CLASS
GTK_VIEWPORT
GTK_VIEWPORT_CLASS
GTK_VPANED
GTK_VPANED_CLASS
GTK_VRULER
GTK_VRULER_CLASS
GTK_VSCALE
GTK_VSCALE_CLASS
GTK_VSCROLLBAR
GTK_VSCROLLBAR_CLASS
GTK_VSEPARATOR
GTK_VSEPARATOR_CLASS
GTK_WIDGET
GTK_WIDGET_APP_PAINTABLE
GTK_WIDGET_CAN_DEFAULT
GTK_WIDGET_CAN_FOCUS
GTK_WIDGET_CLASS
GTK_WIDGET_COMPOSITE_CHILD
GTK_WIDGET_DRAWABLE
GTK_WIDGET_FLAGS
GTK_WIDGET_FULLDRAW_PENDING
GTK_WIDGET_HAS_DEFAULT
GTK_WIDGET_HAS_FOCUS
GTK_WIDGET_HAS_GRAB
GTK_WIDGET_HAS_SHAPE_MASK
GTK_WIDGET_IN_REPARENT
GTK_WIDGET_IS_OFFSCREEN
GTK_WIDGET_IS_SENSITIVE
GTK_WIDGET_LEAVE_PENDING
GTK_WIDGET_MAPPED
GTK_WIDGET_NO_WINDOW
GTK_WIDGET_PARENT_SENSITIVE
GTK_WIDGET_RC_STYLE
GTK_WIDGET_REALIZED
GTK_WIDGET_RECEIVES_DEFAULT
GTK_WIDGET_REDRAW_PENDING
GTK_WIDGET_RESIZE_NEEDED
GTK_WIDGET_SAVED_STATE
GTK_WIDGET_SENSITIVE
GTK_WIDGET_SET_FLAGS
GTK_WIDGET_STATE
GTK_WIDGET_TOPLEVEL
GTK_WIDGET_TYPE
GTK_WIDGET_UNSET_FLAGS
GTK_WIDGET_USER_STYLE
GTK_WIDGET_VISIBLE
GTK_WINDOW
GTK_WINDOW_CLASS
GTK_XMHTML
GTK_XMHTML_CLASS
GTK_XMHTML_LIBRARY
GTK_XMHTML_P_H
GThreadFunctions
GTime
GTimeVal
GTimer
GTokenType
GTokenValue
GTraverseFlags
GTraverseFunc
GTraverseType
GTree
GTuples
GUINT16_FROM_BE
GUINT16_FROM_LE
GUINT16_SWAP_BE_PDP
GUINT16_SWAP_LE_BE
GUINT16_SWAP_LE_BE_CONSTANT
GUINT16_SWAP_LE_BE_X86
GUINT16_SWAP_LE_PDP
GUINT32_FROM_BE
GUINT32_FROM_LE
GUINT32_SWAP_BE_PDP
GUINT32_SWAP_LE_BE
GUINT32_SWAP_LE_BE_CONSTANT
GUINT32_SWAP_LE_BE_X86
GUINT32_SWAP_LE_PDP
GUINT64_FROM_BE
GUINT64_FROM_LE
GUINT64_SWAP_LE_BE
GUINT64_SWAP_LE_BE_CONSTANT
GUINT64_SWAP_LE_BE_X86
GUINT_FROM_BE
GUINT_FROM_LE
GULONG_FROM_BE
GULONG_FROM_LE
GUTILS_C_VAR
GVoidFunc
GWarningFunc
G_ALLOCATOR_LIST
G_ALLOCATOR_NODE
G_ALLOCATOR_SLIST
G_ALLOC_AND_FREE
G_ALLOC_ONLY
G_BIG_ENDIAN
G_BREAKPOINT
G_CAN_INLINE
G_CSET_A_2_Z
G_CSET_LATINC
G_CSET_LATINS
G_CSET_a_2_z
G_DATE_BAD_DAY
G_DATE_BAD_JULIAN
G_DATE_BAD_YEAR
G_DIR_SEPARATOR
G_DIR_SEPARATOR_S
G_GNUC_CONST
G_GNUC_FORMAT
G_GNUC_FUNCTION
G_GNUC_NORETURN
G_GNUC_PRETTY_FUNCTION
G_GNUC_PRINTF
G_GNUC_SCANF
G_GNUC_UNUSED
G_HOOK_ACTIVE
G_HOOK_DEFERRED_DESTROY
G_HOOK_FLAG_USER_SHIFT
G_HOOK_IN_CALL
G_HOOK_IS_UNLINKED
G_HOOK_IS_VALID
G_INLINE_FUNC
G_LITTLE_ENDIAN
G_LOCK
G_LOCK_DEFINE
G_LOCK_DEFINE_STATIC
G_LOCK_EXTERN
G_LOCK_NAME
G_LOG_DOMAIN
G_LOG_FATAL_MASK
G_LOG_LEVEL_USER_SHIFT
G_NATIVE_ATEXIT
G_NODE_IS_LEAF
G_NODE_IS_ROOT
G_PDP_ENDIAN
G_PRIORITY_DEFAULT
G_PRIORITY_DEFAULT_IDLE
G_PRIORITY_HIGH
G_PRIORITY_HIGH_IDLE
G_PRIORITY_LOW
G_SEARCHPATH_SEPARATOR
G_SEARCHPATH_SEPARATOR_S
G_STATIC_PRIVATE_INIT
G_STMT_END
G_STMT_START
G_STRUCT_MEMBER
G_STRUCT_MEMBER_P
G_STRUCT_OFFSET
G_STR_DELIMITERS
G_THREAD_CF
G_THREAD_UF
G_TRYLOCK
G_UNLOCK
G_Ucs4
G_VA_COPY
G_WIN32_MSG_HANDLE
GdkAtom
GdkAxisUse
GdkBitmap
GdkByteOrder
GdkCapStyle
GdkClientFilter
GdkColor
GdkColorContext
GdkColorContextDither
GdkColorContextMode
GdkColorContextPrivate
GdkColorInfo
GdkColorInfoFlags
GdkColormap
GdkColormapPrivate
GdkColorspace
GdkCrossingMode
GdkCursor
GdkCursorPrivate
GdkCursorType
GdkDebugFlag
GdkDestroyNotify
GdkDeviceInfo
GdkDeviceKey
GdkDndCursorInfo
GdkDndGlobals
GdkDragAction
GdkDragContext
GdkDragProtocol
GdkDrawable
GdkEvent
GdkEventAny
GdkEventButton
GdkEventClient
GdkEventConfigure
GdkEventCrossing
GdkEventDND
GdkEventExpose
GdkEventFilter
GdkEventFocus
GdkEventFunc
GdkEventKey
GdkEventMask
GdkEventMotion
GdkEventNoExpose
GdkEventProperty
GdkEventProximity
GdkEventSelection
GdkEventType
GdkEventVisibility
GdkExtensionMode
GdkFill
GdkFillRule
GdkFilterFunc
GdkFilterReturn
GdkFont
GdkFontPrivate
GdkFontType
GdkFunction
GdkGC
GdkGCPrivate
GdkGCValues
GdkGCValuesMask
GdkGeometry
GdkIC
GdkICAttr
GdkICAttributesType
GdkICPrivate
GdkIMStyle
GdkImage
GdkImagePrivate
GdkImageType
GdkInputCondition
GdkInputFunction
GdkInputMode
GdkInputSource
GdkInterpType
GdkJoinStyle
GdkLineStyle
GdkModifierType
GdkNotifyType
GdkOverlapType
GdkPixbuf
GdkPixbufAlphaMode
GdkPixbufAnimation
GdkPixbufDestroyNotify
GdkPixbufFrame
GdkPixbufFrameAction
GdkPixbufLastUnref
GdkPixbufLoader
GdkPixbufLoaderClass
GdkPixmap
GdkPixmapPrivate
GdkPoint
GdkPropMode
GdkPropertyState
GdkRectangle
GdkRegion
GdkRegionPrivate
GdkRgbCmap
GdkRgbDither
GdkSegment
GdkSelection
GdkSelectionType
GdkStatus
GdkSubwindowMode
GdkTarget
GdkTimeCoord
GdkVisibilityState
GdkVisual
GdkVisualPrivate
GdkVisualType
GdkWChar
GdkWMDecoration
GdkWMFunction
GdkWindow
GdkWindowAttr
GdkWindowAttributesType
GdkWindowClass
GdkWindowHints
GdkWindowPrivate
GdkWindowType
GdkXEvent
GnomeAbout
GnomeAboutClass
GnomeAnimator
GnomeAnimatorClass
GnomeAnimatorFrame
GnomeAnimatorLoopType
GnomeAnimatorPrivate
GnomeAnimatorStatus
GnomeApp
GnomeAppBar
GnomeAppBarClass
GnomeAppBarMsg
GnomeAppClass
GnomeAppProgressCancelFunc
GnomeAppProgressFunc
GnomeAppProgressKey
GnomeCalculator
GnomeCalculatorClass
GnomeCalculatorMode
GnomeCanvas
GnomeCanvasBpath
GnomeCanvasBpathClass
GnomeCanvasBpathDef
GnomeCanvasBpathPriv
GnomeCanvasBpathWind
GnomeCanvasBuf
GnomeCanvasClass
GnomeCanvasEllipse
GnomeCanvasEllipseClass
GnomeCanvasGroup
GnomeCanvasGroupClass
GnomeCanvasHacktext
GnomeCanvasHacktextClass
GnomeCanvasHacktextPriv
GnomeCanvasHacktextWind
GnomeCanvasImage
GnomeCanvasImageClass
GnomeCanvasItem
GnomeCanvasItemClass
GnomeCanvasLine
GnomeCanvasLineClass
GnomeCanvasPixbuf
GnomeCanvasPixbufClass
GnomeCanvasPoints
GnomeCanvasPolygon
GnomeCanvasPolygonClass
GnomeCanvasRE
GnomeCanvasREClass
GnomeCanvasRect
GnomeCanvasRectClass
GnomeCanvasText
GnomeCanvasTextClass
GnomeCanvasTextSuckChar
GnomeCanvasTextSuckFont
GnomeCanvasWidget
GnomeCanvasWidgetClass
GnomeClient
GnomeClientClass
GnomeClientFlags
GnomeClientState
GnomeColorPicker
GnomeColorPickerClass
GnomeDEntryEdit
GnomeDEntryEditClass
GnomeDateEdit
GnomeDateEditClass
GnomeDateEditFlags
GnomeDesktopEntry
GnomeDesktopEntryI18N
GnomeDialog
GnomeDialogClass
GnomeDialogType
GnomeDisplayFont
GnomeDock
GnomeDockBand
GnomeDockBandChild
GnomeDockBandClass
GnomeDockClass
GnomeDockItem
GnomeDockItemBehavior
GnomeDockItemClass
GnomeDockLayout
GnomeDockLayoutClass
GnomeDockLayoutItem
GnomeDockPlacement
GnomeDruid
GnomeDruidClass
GnomeDruidPage
GnomeDruidPageClass
GnomeDruidPageFinish
GnomeDruidPageFinishClass
GnomeDruidPageStandard
GnomeDruidPageStandardClass
GnomeDruidPageStart
GnomeDruidPageStartClass
GnomeEntry
GnomeEntryClass
GnomeFileEntry
GnomeFileEntryClass
GnomeFont
GnomeFontClass
GnomeFontKernPair
GnomeFontLigList
GnomeFontMap
GnomeFontPicker
GnomeFontPickerClass
GnomeFontPickerMode
GnomeFontSelection
GnomeFontSelectionClass
GnomeFontSelectionDialog
GnomeFontSelectionDialogClass
GnomeFontSelector
GnomeFontSelectorClass
GnomeFontUnsized
GnomeFontWeight
GnomeGuru
GnomeGuruClass
GnomeHRef
GnomeHRefClass
GnomeHelpMenuEntry
GnomeHistoryEntry
GnomeIconEntry
GnomeIconEntryClass
GnomeIconList
GnomeIconListClass
GnomeIconListMode
GnomeIconSelection
GnomeIconSelectionClass
GnomeIconTextInfo
GnomeIconTextInfoRow
GnomeIconTextItem
GnomeIconTextItemClass
GnomeInteractFunction
GnomeInteractStyle
GnomeLess
GnomeLessClass
GnomeMDI
GnomeMDIChild
GnomeMDIChildClass
GnomeMDIChildConfigFunc
GnomeMDIChildCreator
GnomeMDIChildLabelFunc
GnomeMDIChildMenuCreator
GnomeMDIChildViewCreator
GnomeMDIClass
GnomeMDIGenericChild
GnomeMDIGenericChildClass
GnomeMDIMode
GnomeMagicEntry
GnomeMagicType
GnomeMessageBox
GnomeMessageBoxButton
GnomeMessageBoxClass
GnomeMetadataError_t
GnomeNumberEntry
GnomeNumberEntryClass
GnomePaper
GnomePaperSelector
GnomePaperSelectorClass
GnomePixmap
GnomePixmapClass
GnomePixmapEntry
GnomePixmapEntryClass
GnomePlugin
GnomePluginObject
GnomePreferences
GnomePreferencesType
GnomePrintButtons
GnomePrintContext
GnomePrintContextClass
GnomePrintContextType
GnomePrintCopies
GnomePrintCopiesClass
GnomePrintDialog
GnomePrintDialogClass
GnomePrintFlags
GnomePrintMaster
GnomePrintMasterClass
GnomePrintMasterPreview
GnomePrintMasterPreviewClass
GnomePrintMeta
GnomePrintMetaClass
GnomePrintMetaPrivate
GnomePrintMultipage
GnomePrintMultipageClass
GnomePrintMultipageType
GnomePrintPCLR
GnomePrintPCLRClass
GnomePrintPCLRPrivate
GnomePrintPixbuf
GnomePrintPixbufClass
GnomePrintPixbufPrivate
GnomePrintPreview
GnomePrintPreviewClass
GnomePrintPreviewPrivate
GnomePrintRGBP
GnomePrintRGBPClass
GnomePrintRGBPPrivate
GnomePrintRangeFlags
GnomePrintRangeType
GnomePrinter
GnomePrinterClass
GnomePrinterDialog
GnomePrinterDialogClass
GnomePrinterProfile
GnomePrinterProfileList
GnomePrinterStatus
GnomePrinterWidget
GnomePrinterWidgetClass
GnomeProcBar
GnomeProcBarClass
GnomePropertyAction
GnomePropertyBox
GnomePropertyBoxClass
GnomePropertyDescriptor
GnomePropertyObject
GnomeRegexCache
GnomeReplyCallback
GnomeRestartStyle
GnomeSaveStyle
GnomeScores
GnomeScoresClass
GnomeSpell
GnomeSpellClass
GnomeSpellInfo
GnomeStock
GnomeStockClass
GnomeStockPixmapEntry
GnomeStockPixmapEntryAny
GnomeStockPixmapEntryData
GnomeStockPixmapEntryFile
GnomeStockPixmapEntryGPixmap
GnomeStockPixmapEntryImlib
GnomeStockPixmapEntryImlibScaled
GnomeStockPixmapEntryPath
GnomeStockPixmapEntryWidget
GnomeStockPixmapType
GnomeStockPixmapWidget
GnomeStockPixmapWidgetClass
GnomeStringCallback
GnomeTextAlign
GnomeTextAttr
GnomeTextAttrEl
GnomeTextBreak
GnomeTextBreakFlags
GnomeTextFontFamilyHandle
GnomeTextFontHandle
GnomeTextFontListHandle
GnomeTextGlyph
GnomeTextGlyphAttr
GnomeTextGlyphAttrEl
GnomeTextGlyphAttrState
GnomeTextLayout
GnomeTextLine
GnomeTrigger
GnomeTriggerActionFunction
GnomeTriggerType
GnomeUIBuilderData
GnomeUIInfo
GnomeUIInfoConfigurableTypes
GnomeUIInfoType
GnomeUIPixmapType
GnomeUISignalConnectFunc
GnomeUnit
GnomeWinAppState
GnomeWinHints
GnomeWinLayer
GnomeWinState
GnorbaInitFlags
GoadActivationFlags
GoadServer
GoadServerList
GoadServerType
GtkAccelEntry
GtkAccelFlags
GtkAccelGroup
GtkAccelLabel
GtkAccelLabelClass
GtkAdjustment
GtkAdjustmentClass
GtkAlignment
GtkAlignmentClass
GtkAllocation
GtkAnchorType
GtkArg
GtkArgFlags
GtkArgGetFunc
GtkArgInfo
GtkArgSetFunc
GtkArrow
GtkArrowClass
GtkArrowType
GtkAspectFrame
GtkAspectFrameClass
GtkAttachOptions
GtkBin
GtkBinClass
GtkBindingArg
GtkBindingEntry
GtkBindingSet
GtkBindingSignal
GtkBox
GtkBoxChild
GtkBoxClass
GtkButton
GtkButtonAction
GtkButtonBox
GtkButtonBoxClass
GtkButtonBoxStyle
GtkButtonClass
GtkCList
GtkCListCellInfo
GtkCListClass
GtkCListColumn
GtkCListCompareFunc
GtkCListDestInfo
GtkCListDragPos
GtkCListRow
GtkCTree
GtkCTreeClass
GtkCTreeCompareDragFunc
GtkCTreeExpanderStyle
GtkCTreeExpansionType
GtkCTreeFunc
GtkCTreeGNodeFunc
GtkCTreeLineStyle
GtkCTreeNode
GtkCTreePos
GtkCTreeRow
GtkCalendar
GtkCalendarClass
GtkCalendarDisplayOptions
GtkCallback
GtkCallbackMarshal
GtkCauldronCustomCallback
GtkCauldronNextArgCallback
GtkCell
GtkCellPixText
GtkCellPixmap
GtkCellText
GtkCellType
GtkCellWidget
GtkCheckButton
GtkCheckButtonClass
GtkCheckMenuItem
GtkCheckMenuItemClass
GtkClassInitFunc
GtkClock
GtkClockClass
GtkClockType
GtkColorSelection
GtkColorSelectionClass
GtkColorSelectionDialog
GtkColorSelectionDialogClass
GtkCombo
GtkComboClass
GtkContainer
GtkContainerClass
GtkCornerType
GtkCurve
GtkCurveClass
GtkCurveType
GtkData
GtkDataClass
GtkDebugFlag
GtkDestDefaults
GtkDestroyNotify
GtkDial
GtkDialClass
GtkDialog
GtkDialogButton
GtkDialogClass
GtkDirectionType
GtkDitherInfo
GtkDrawingArea
GtkDrawingAreaClass
GtkEditable
GtkEditableClass
GtkEmissionHook
GtkEntry
GtkEntryClass
GtkEnumValue
GtkEventBox
GtkEventBoxClass
GtkFileSelection
GtkFileSelectionClass
GtkFixed
GtkFixedChild
GtkFixedClass
GtkFlagValue
GtkFontFilter
GtkFontFilterType
GtkFontMetricType
GtkFontSelection
GtkFontSelectionClass
GtkFontSelectionDialog
GtkFontSelectionDialogClass
GtkFontType
GtkFrame
GtkFrameClass
GtkFunction
GtkFundamentalType
GtkGammaCurve
GtkGammaCurveClass
GtkHBox
GtkHBoxClass
GtkHButtonBox
GtkHButtonBoxClass
GtkHPaned
GtkHPanedClass
GtkHRuler
GtkHRulerClass
GtkHScale
GtkHScaleClass
GtkHScrollbar
GtkHScrollbarClass
GtkHSeparator
GtkHSeparatorClass
GtkHandleBox
GtkHandleBoxClass
GtkImage
GtkImageClass
GtkImageLoader
GtkInputDialog
GtkInputDialogClass
GtkInvisible
GtkInvisibleClass
GtkItem
GtkItemClass
GtkItemFactory
GtkItemFactoryCallback
GtkItemFactoryCallback1
GtkItemFactoryCallback2
GtkItemFactoryClass
GtkItemFactoryEntry
GtkItemFactoryItem
GtkJustification
GtkKeySnoopFunc
GtkLabel
GtkLabelClass
GtkLabelWord
GtkLayout
GtkLayoutClass
GtkList
GtkListClass
GtkListItem
GtkListItemClass
GtkMatchType
GtkMenu
GtkMenuBar
GtkMenuBarClass
GtkMenuCallback
GtkMenuClass
GtkMenuDetachFunc
GtkMenuDirectionType
GtkMenuEntry
GtkMenuFactory
GtkMenuFactoryType
GtkMenuItem
GtkMenuItemClass
GtkMenuPath
GtkMenuPositionFunc
GtkMenuShell
GtkMenuShellClass
GtkMetricType
GtkMisc
GtkMiscClass
GtkModuleInitFunc
GtkNotebook
GtkNotebookClass
GtkNotebookPage
GtkObject
GtkObjectClass
GtkObjectFlags
GtkObjectInitFunc
GtkOptionMenu
GtkOptionMenuClass
GtkOrientation
GtkPackType
GtkPacker
GtkPackerChild
GtkPackerClass
GtkPackerOptions
GtkPaned
GtkPanedClass
GtkPathPriorityType
GtkPathType
GtkPatternSpec
GtkPixmap
GtkPixmapClass
GtkPixmapMenuItem
GtkPixmapMenuItemClass
GtkPlug
GtkPlugClass
GtkPolicyType
GtkPositionType
GtkPreview
GtkPreviewClass
GtkPreviewInfo
GtkPreviewType
GtkPrintFunc
GtkPrivateFlags
GtkProgress
GtkProgressBar
GtkProgressBarClass
GtkProgressBarOrientation
GtkProgressBarStyle
GtkProgressClass
GtkPropertyMark
GtkRadioButton
GtkRadioButtonClass
GtkRadioMenuItem
GtkRadioMenuItemClass
GtkRange
GtkRangeClass
GtkRcFlags
GtkRcStyle
GtkRcTokenType
GtkReliefStyle
GtkRequisition
GtkResizeMode
GtkRuler
GtkRulerClass
GtkRulerMetric
GtkScale
GtkScaleClass
GtkScrollType
GtkScrollbar
GtkScrollbarClass
GtkScrolledWindow
GtkScrolledWindowClass
GtkSelectioData
GtkSelectionData
GtkSelectionMode
GtkSeparator
GtkSeparatorClass
GtkShadowType
GtkSideType
GtkSignalDestroy
GtkSignalFunc
GtkSignalMarshal
GtkSignalMarshaller
GtkSignalQuery
GtkSignalRunType
GtkSocket
GtkSocketClass
GtkSortType
GtkSpinButton
GtkSpinButtonClass
GtkSpinButtonUpdatePolicy
GtkSpinType
GtkStateType
GtkStatusbar
GtkStatusbarClass
GtkStatusbarMsg
GtkStyle
GtkStyleClass
GtkSubmenuDirection
GtkSubmenuPlacement
GtkTable
GtkTableChild
GtkTableClass
GtkTableRowCol
GtkTargetEntry
GtkTargetFlags
GtkTargetList
GtkTargetPair
GtkTearoffMenuItem
GtkTearoffMenuItemClass
GtkTed
GtkTedClass
GtkText
GtkTextClass
GtkTextFont
GtkTextFunction
GtkThemeEngine
GtkTipsQuery
GtkTipsQueryClass
GtkToggleButton
GtkToggleButtonClass
GtkToolbar
GtkToolbarChild
GtkToolbarChildType
GtkToolbarClass
GtkToolbarSpaceStyle
GtkToolbarStyle
GtkTooltips
GtkTooltipsClass
GtkTooltipsData
GtkTranslateFunc
GtkTree
GtkTreeClass
GtkTreeItem
GtkTreeItemClass
GtkTreeViewMode
GtkTroughType
GtkType
GtkTypeClass
GtkTypeInfo
GtkTypeObject
GtkTypeQuery
GtkUpdateType
GtkVBox
GtkVBoxClass
GtkVButtonBox
GtkVButtonBoxClass
GtkVPaned
GtkVPanedClass
GtkVRuler
GtkVRulerClass
GtkVScale
GtkVScaleClass
GtkVScrollbar
GtkVScrollbarClass
GtkVSeparator
GtkVSeparatorClass
GtkViewport
GtkViewportClass
GtkVisibility
GtkWidget
GtkWidgetAuxInfo
GtkWidgetClass
GtkWidgetFlags
GtkWidgetShapeInfo
GtkWindow
GtkWindowClass
GtkWindowPosition
GtkWindowType
GtkXmHTML
GtkXmHTMLClass
HTEvent
HTML_COMMENT_NODE
HTML_ENTITY_REF_NODE
HTML_TEXT_NODE
HUGE
HeadAll
HeadBase
HeadClear
HeadDocType
HeadIsIndex
HeadLink
HeadMeta
HeadScript
HeadStyle
HeadTitle
IMAGE_DISCARD
IMAGE_GET
IMAGE_STORE
IMG_DELAYED_CREATION
IMG_FRAMEREFRESH
IMG_HASDIMENSIONS
IMG_HASSTATE
IMG_INFOFREED
IMG_ISANIM
IMG_ISBACKGROUND
IMG_ISCOPY
IMG_ISINTERNAL
IMG_ORPHANED
IMG_PROGRESSIVE
IS_BASECHAR
IS_BLANK
IS_CHAR
IS_COMBINING
IS_CONTAINER
IS_DIGIT
IS_EXTENDER
IS_IDEOGRAPHIC
IS_LETTER
IS_MARKUP
IS_MISC
IS_PUBIDCHAR
ImageBackground
ImageBuffer
ImageClipmask
ImageCreateGC
ImageDelayedCreation
ImageFSDither
ImageFrameRefresh
ImageFrameSelect
ImageGifDecodeProc
ImageGifzCmd
ImageHasDimensions
ImageHasState
ImageInfoClipmask
ImageInfoDelayed
ImageInfoDelayedCreation
ImageInfoFreeLater
ImageInfoFreeNow
ImageInfoFreed
ImageInfoProgressive
ImageInfoRGBSingle
ImageInfoScale
ImageInfoShared
ImageIsAnim
ImageIsBackground
ImageIsCopy
ImageIsInternal
ImageIsOrphaned
ImageIsProgressive
ImageMaxColors
ImageQuantize
ImageScreenGamma
ImageWorkSpace
Imagemap
LIBGNOMEUI_H
LIBGNOME_H
LINE_DASHED
LINE_DOUBLE
LINE_SINGLE
LINE_SOLID
LINE_STRIKE
LINE_UNDER
L_
L_INCR
L_SET
L_XTND
LastFrame
MAX
MAXFLOAT
MAXPATHLEN
MB_CUR_MAX
MEM_LIST
MIN
MINIPARSE
MOVETO_ENDTAG
MOVETO_STARTTAG
M_1_PI
M_1_PIl
M_2_PI
M_2_PIl
M_2_SQRTPI
M_2_SQRTPIl
M_CHECK_ACTION
M_E
M_El
M_GRAIN
M_KEEP
M_LN10
M_LN10l
M_LN2
M_LN2l
M_LOG10E
M_LOG10El
M_LOG2E
M_LOG2El
M_MMAP_MAX
M_MMAP_THRESHOLD
M_MXFAST
M_NLBLKS
M_PI
M_PI_2
M_PI_2l
M_PI_4
M_PI_4l
M_PIl
M_SQRT1_2
M_SQRT1_2l
M_SQRT2
M_SQRT2l
M_TOP_PAD
M_TRIM_THRESHOLD
Marker
Max
Min
NAME_MAX
NESTED_ELEMENT
NEXTCHARVAL
NO_DEBUG_MEMORY
NO_LINE
NSIG
NULL
N_
OPTIONAL_CLOSURE
ORBIT_DECL_CORBA_sequence_CORBA_string
ORBIT_DECL_GNOME_GenericFactory
ORBIT_DECL_GNOME_Table
ORBIT_DECL_GNOME_Unknown
ORBIT_IDL_SERIAL
ORBIT_IMPL_CORBA_sequence_CORBA_string_0
ORBIT_IMPL_CORBA_sequence_CORBA_string_1
ORBIT_IMPL_CORBA_sequence_CORBA_string_10
ORBIT_IMPL_CORBA_sequence_CORBA_string_11
ORBIT_IMPL_CORBA_sequence_CORBA_string_12
ORBIT_IMPL_CORBA_sequence_CORBA_string_2
ORBIT_IMPL_CORBA_sequence_CORBA_string_3
ORBIT_IMPL_CORBA_sequence_CORBA_string_4
ORBIT_IMPL_CORBA_sequence_CORBA_string_5
ORBIT_IMPL_CORBA_sequence_CORBA_string_6
ORBIT_IMPL_CORBA_sequence_CORBA_string_7
ORBIT_IMPL_CORBA_sequence_CORBA_string_8
ORBIT_IMPL_CORBA_sequence_CORBA_string_9
OVERFLOW
ObjectType
PATH_SEP
PATH_SEP_STR
PATH_UTIL_H
PLCPtr
PLOSS
POA_GNOME_GenericFactory
POA_GNOME_GenericFactory__epv
POA_GNOME_GenericFactory__fini(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_GenericFactory__init(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_GenericFactory__vepv
POA_GNOME_Table
POA_GNOME_Table__epv
POA_GNOME_Table__fini(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_Table__init(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_Table__vepv
POA_GNOME_Unknown
POA_GNOME_Unknown__epv
POA_GNOME_Unknown__fini(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_Unknown__init(PortableServer_Servant servant,  CORBA_Environment * ev)
POA_GNOME_Unknown__vepv
PTHREAD_CANCELED
PTHREAD_CANCEL_ASYNCHRONOUS
PTHREAD_CANCEL_DEFERRED
PTHREAD_CANCEL_DISABLE
PTHREAD_CANCEL_ENABLE
PTHREAD_COND_INITIALIZER
PTHREAD_CREATE_DETACHED
PTHREAD_CREATE_JOINABLE
PTHREAD_EXPLICIT_SCHED
PTHREAD_INHERIT_SCHED
PTHREAD_MUTEX_INITIALIZER
PTHREAD_ONCE_INIT
PTHREAD_PROCESS_PRIVATE
PTHREAD_PROCESS_SHARED
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
PTHREAD_RWLOCK_INITIALIZER
PTHREAD_SCOPE_PROCESS
PTHREAD_SCOPE_SYSTEM
P_tmpdir
Paper
Parser
Parser
ParserAutoCorrectCallback
ParserDocumentCallback
ParserWriteHTMLOutputToFile(XmHTMLObject *objects,  String prefix, Boolean notext)
ParserWriteOutputToFile(XmHTMLObject *objects,  String prefix, Boolean notext)
RAND_MAX
RANGE
R_OK
ResetRawImage
RewindImageBuffer
SEEK_CUR
SEEK_END
SEEK_SET
SING
SKIPCHARVAL
SKIP_EOL
STDERR_FILENO
STDIN_FILENO
STDOUT_FILENO
STREAM_ABORT
STREAM_END
STREAM_OK
STREAM_RESIZE
STREAM_SUSPEND
SV_INTERRUPT
SV_ONSTACK
SV_RESETHAND
S_BLKSIZE
S_IEXEC
S_IFBLK
S_IFCHR
S_IFDIR
S_IFIFO
S_IFLNK
S_IFMT
S_IFREG
S_IFSOCK
S_IREAD
S_IRGRP
S_IROTH
S_IRUSR
S_IRWXG
S_IRWXO
S_IRWXU
S_ISBLK
S_ISCHR
S_ISDIR
S_ISFIFO
S_ISGID
S_ISLNK
S_ISREG
S_ISSOCK
S_ISUID
S_ISVTX
S_IWGRP
S_IWOTH
S_IWRITE
S_IWUSR
S_IXGRP
S_IXOTH
S_IXUSR
String
TALIGNMENT_BEGINNING
TALIGNMENT_CENTER
TALIGNMENT_END
TAppContext
TAppContext
TAtom
TButtonPressedEvent
TButtonReleasedEvent
TC_CORBA_sequence_CORBA_string
TC_GNOME_GenericFactory
TC_GNOME_GenericFactory_CannotActivate
TC_GNOME_Table
TC_GNOME_Table_OutOfRange
TC_GNOME_Table_Value
TC_GNOME_Unknown
TC_GNOME_stringlist
TC_IMPL_TC_CORBA_sequence_CORBA_string_0
TC_IMPL_TC_CORBA_sequence_CORBA_string_1
TC_IMPL_TC_CORBA_sequence_CORBA_string_10
TC_IMPL_TC_CORBA_sequence_CORBA_string_11
TC_IMPL_TC_CORBA_sequence_CORBA_string_12
TC_IMPL_TC_CORBA_sequence_CORBA_string_2
TC_IMPL_TC_CORBA_sequence_CORBA_string_3
TC_IMPL_TC_CORBA_sequence_CORBA_string_4
TC_IMPL_TC_CORBA_sequence_CORBA_string_5
TC_IMPL_TC_CORBA_sequence_CORBA_string_6
TC_IMPL_TC_CORBA_sequence_CORBA_string_7
TC_IMPL_TC_CORBA_sequence_CORBA_string_8
TC_IMPL_TC_CORBA_sequence_CORBA_string_9
TC_IMPL_TC_GNOME_GenericFactory_0
TC_IMPL_TC_GNOME_GenericFactory_1
TC_IMPL_TC_GNOME_GenericFactory_10
TC_IMPL_TC_GNOME_GenericFactory_11
TC_IMPL_TC_GNOME_GenericFactory_12
TC_IMPL_TC_GNOME_GenericFactory_2
TC_IMPL_TC_GNOME_GenericFactory_3
TC_IMPL_TC_GNOME_GenericFactory_4
TC_IMPL_TC_GNOME_GenericFactory_5
TC_IMPL_TC_GNOME_GenericFactory_6
TC_IMPL_TC_GNOME_GenericFactory_7
TC_IMPL_TC_GNOME_GenericFactory_8
TC_IMPL_TC_GNOME_GenericFactory_9
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_0
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_1
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_10
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_11
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_12
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_2
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_3
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_4
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_5
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_6
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_7
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_8
TC_IMPL_TC_GNOME_GenericFactory_CannotActivate_9
TC_IMPL_TC_GNOME_Table_0
TC_IMPL_TC_GNOME_Table_1
TC_IMPL_TC_GNOME_Table_2
TC_IMPL_TC_GNOME_Table_3
TC_IMPL_TC_GNOME_Table_4
TC_IMPL_TC_GNOME_Table_OutOfRange_0
TC_IMPL_TC_GNOME_Table_OutOfRange_1
TC_IMPL_TC_GNOME_Table_OutOfRange_2
TC_IMPL_TC_GNOME_Table_OutOfRange_3
TC_IMPL_TC_GNOME_Table_OutOfRange_4
TC_IMPL_TC_GNOME_Table_Value_0
TC_IMPL_TC_GNOME_Table_Value_1
TC_IMPL_TC_GNOME_Table_Value_2
TC_IMPL_TC_GNOME_Table_Value_3
TC_IMPL_TC_GNOME_Table_Value_4
TC_IMPL_TC_GNOME_Unknown_0
TC_IMPL_TC_GNOME_Unknown_1
TC_IMPL_TC_GNOME_Unknown_10
TC_IMPL_TC_GNOME_Unknown_11
TC_IMPL_TC_GNOME_Unknown_12
TC_IMPL_TC_GNOME_Unknown_2
TC_IMPL_TC_GNOME_Unknown_3
TC_IMPL_TC_GNOME_Unknown_4
TC_IMPL_TC_GNOME_Unknown_5
TC_IMPL_TC_GNOME_Unknown_6
TC_IMPL_TC_GNOME_Unknown_7
TC_IMPL_TC_GNOME_Unknown_8
TC_IMPL_TC_GNOME_Unknown_9
TC_IMPL_TC_GNOME_stringlist_0
TC_IMPL_TC_GNOME_stringlist_1
TC_IMPL_TC_GNOME_stringlist_10
TC_IMPL_TC_GNOME_stringlist_11
TC_IMPL_TC_GNOME_stringlist_12
TC_IMPL_TC_GNOME_stringlist_2
TC_IMPL_TC_GNOME_stringlist_3
TC_IMPL_TC_GNOME_stringlist_4
TC_IMPL_TC_GNOME_stringlist_5
TC_IMPL_TC_GNOME_stringlist_6
TC_IMPL_TC_GNOME_stringlist_7
TC_IMPL_TC_GNOME_stringlist_8
TC_IMPL_TC_GNOME_stringlist_9
TCallbackList
TCallbackList
TCapButt
TColor
TColor
TColormap
TColormap
TCursor
TDrawable
TEMP_FAILURE_RETRY
TEXT_ANCHOR
TEXT_ANCHOR_INTERN
TEXT_BREAK
TEXT_FORM
TEXT_IMAGE
TEXT_SPACE_LEAD
TEXT_SPACE_NONE
TEXT_SPACE_TRAIL
TEvent
TFontStruct
TFontStruct
TGC
TGC
TIdleKeep
TIdleRemove
TImage
TIntervalId
TJoinBevel
TJoinRound
TLOSS
TLSBFirst
TLineDoubleDash
TLineSolid
TMSBFirst
TNone
TNullTimeout
TPROTO
TPixmap
TPixmap
TPoint
TPoint
TPointer
TPointer
TRUE
TSTRING_DIRECTION_L_TO_R
TSTRING_DIRECTION_R_TO_L
TVisual
TVisual
TVisualInfo
TWidget
TWidgetList
TWidgetList
TWindow
TWindow
TXImage
TableCell
TableFraming
TableProperties
TableRow
TableRuling
Table_H
ToAsciiLower(int val)
ToAsciiUpper(int val)
ToRomanLower(int val)
ToRomanUpper(int val)
Toolkit_Alloc_Color
Toolkit_Call_Callback
Toolkit_Clear_Area
Toolkit_Copy_Area
Toolkit_Create_Image
Toolkit_Create_Pixmap
Toolkit_CurrentTime
Toolkit_Default_Root_Window
Toolkit_Define_Cursor
Toolkit_Display
Toolkit_Draw_Arc
Toolkit_Draw_Line
Toolkit_Draw_Lines
Toolkit_Draw_Rectangle
Toolkit_Draw_Shadows(XmHTMLWidget w, TGC top_shadow, TGC bottom_shadow,  gint xs, gint ys, gint xe, gint ye, gint xxx, gint shadow_type)
Toolkit_Draw_String
Toolkit_Fill_Arc
Toolkit_Fill_Rectangle
Toolkit_Flush
Toolkit_Free_Cursor
Toolkit_Free_Font
Toolkit_Free_Pixmap
Toolkit_GC_Free
Toolkit_Get_Image_Data
Toolkit_Get_Visual
Toolkit_HTML_Widget
Toolkit_Image_Bits_Per_Pixel
Toolkit_Image_Bytes_Per_Line
Toolkit_Image_Destroy
Toolkit_Is_Realized
Toolkit_Parse_Color
Toolkit_Pointer_Ungrab
Toolkit_Screen_Height
Toolkit_Screen_Width
Toolkit_Set_Font
Toolkit_Set_Foreground
Toolkit_Set_Image_Data
Toolkit_Set_Line_Attributes
Toolkit_StyleColor_Background
Toolkit_StyleColor_Foreground
Toolkit_StyleColor_Highlight
Toolkit_StyleGC_BottomShadow
Toolkit_StyleGC_Highlight
Toolkit_StyleGC_TopShadow
Toolkit_Text_Width
Toolkit_Timeout_Remove
Toolkit_Undefine_Cursor
Toolkit_Widget_Colormap
Toolkit_Widget_Destroy
Toolkit_Widget_Dim
Toolkit_Widget_Force_Repaint
Toolkit_Widget_Is_Realized
Toolkit_Widget_Name
Toolkit_Widget_Parent
Toolkit_Widget_Repaint
Toolkit_Widget_Window
True
UNDERFLOW
URLType
USE_NEW_GNOME_STOCK
Unit
VERSION
WAIT_ANY
WAIT_MYPGRP
WCOREDUMP
WCOREFLAG
WEXITSTATUS
WIFEXITED
WIFSIGNALED
WIFSTOPPED
WITH_GTK
WSTOPSIG
WTERMSIG
W_EXITCODE
W_OK
W_STOPCODE
Widget
XA_WIN_APP_STATE
XA_WIN_CLIENT_LIST
XA_WIN_CLIENT_MOVING
XA_WIN_EXPANDED_SIZE
XA_WIN_HINTS
XA_WIN_ICONS
XA_WIN_LAYER
XA_WIN_PROTOCOLS
XA_WIN_STATE
XA_WIN_SUPPORTING_WM_CHECK
XA_WIN_WORKAREA
XA_WIN_WORKSPACE
XA_WIN_WORKSPACE_COUNT
XA_WIN_WORKSPACE_NAMES
XCC
XCC
XCCAddPalette
XCCCreate
XCCDither
XCCFree
XCCFreeDither
XCCGetDepth
XCCGetIndexFromPalette
XCCGetParentVisual
XCCGetPixels
XCCGetPixelsIncremental
XCCInitDither
XFUNCPROTOEND
XML_DEFAULT_VERSION
XML_EXTERNAL_GENERAL_PARSED_ENTITY
XML_EXTERNAL_GENERAL_UNPARSED_ENTITY
XML_EXTERNAL_PARAMETER_ENTITY
XML_INTERNAL_GENERAL_ENTITY
XML_INTERNAL_PARAMETER_ENTITY
XML_INTERNAL_PREDEFINED_ENTITY
XML_MAX_NAMELEN
XML_MIN_ATTRIBUTE_TABLE
XML_MIN_ELEMENT_TABLE
XML_MIN_ENTITIES_TABLE
XML_MIN_ID_TABLE
XML_MIN_NOTATION_TABLE
XML_MIN_REF_TABLE
XML_SUBSTITUTE_BOTH
XML_SUBSTITUTE_NONE
XML_SUBSTITUTE_PEREF
XML_SUBSTITUTE_REF
XPATH_BOOLEAN
XPATH_NODESET
XPATH_NUMBER
XPATH_STRING
XPATH_UNDEFINED
XPATH_USERS
X_OK
X_TLOSS
XmAnyCallbackStruct
XmHTML
XmHTMLAllocColor(TWidget w, String color, Pixel def_pixel)
XmHTMLAnchor
XmHTMLAnchorCallbackStruct
XmHTMLAnchorGetId(TWidget w, String anchor)
XmHTMLAnchorProc
XmHTMLAnchorPtr
XmHTMLAnchorScrollToId(TWidget w, int anchor_id)
XmHTMLAnchorScrollToName(TWidget w, String anchor)
XmHTMLDirection
XmHTMLDitherType
XmHTMLDocumentCallbackStruct
XmHTMLDocumentPtr
XmHTMLEndDataProc
XmHTMLEventCallbackStruct
XmHTMLEventProc
XmHTMLFontCacheInfo
XmHTMLForm
XmHTMLFormCallbackStruct
XmHTMLFormData
XmHTMLFormDataPtr
XmHTMLFormDataRec
XmHTMLFormPtr
XmHTMLFrameCallbackStruct
XmHTMLFrameGetChild(TWidget w, String name)
XmHTMLFramePtr
XmHTMLFrameWidget
XmHTMLFreeColor(TWidget w, Pixel pixel)
XmHTMLFreeFontCacheInfo(XmHTMLFontCacheInfo *info)
XmHTMLGIFStream
XmHTMLGIFtoGZF(String infile, unsigned char *buf, int size, String outfile)
XmHTMLGetDataProc
XmHTMLGetFontCacheInfo(TWidget w)
XmHTMLGetHeadAttributes(TWidget w, XmHTMLHeadAttributes *head,  unsigned char mask_bits)
XmHTMLGetTitle(TWidget w)
XmHTMLGetURLType(String href)
XmHTMLGetVersion(void)
XmHTMLHeadAttributes
XmHTMLImage
XmHTMLImageAddImageMap(TWidget w, String image_map)
XmHTMLImageDefaultProc(TWidget w, String file, unsigned char *buf, int size)
XmHTMLImageFreeAllImages(TWidget w)
XmHTMLImageFreeImageInfo(TWidget w, XmImageInfo *info)
XmHTMLImageGZFSupported(void)
XmHTMLImageGetImageInfoSize(XmImageInfo *info)
XmHTMLImageGetType(String file, unsigned char *buf, int size)
XmHTMLImageJPEGSupported(void)
XmHTMLImageMap
XmHTMLImagePNGSupported(void)
XmHTMLImageProgressiveContinue(TWidget w)
XmHTMLImageProgressiveKill(TWidget w)
XmHTMLImageProgressiveSuspend(TWidget w)
XmHTMLImageReplace(TWidget w, XmImageInfo *image, XmImageInfo *new_image)
XmHTMLImageUpdate(TWidget w, XmImageInfo *image)
XmHTMLImagemapCallbackStruct
XmHTMLImagemapPtr
XmHTMLIndex
XmHTMLInfoPtr
XmHTMLInfoStructure
XmHTMLLinkCallbackStruct
XmHTMLLinkDataPtr
XmHTMLLinkDataRec
XmHTMLLinkPtr
XmHTMLMetaDataPtr
XmHTMLMetaDataRec
XmHTMLObject
XmHTMLObject
XmHTMLObjectTable
XmHTMLObjectTableElement
XmHTMLPLCStream
XmHTMLPaperSize
XmHTMLPart
XmHTMLPosition
XmHTMLREVISION
XmHTMLRawImageData
XmHTMLRec
XmHTMLRedisplay(TWidget w)
XmHTMLSelection
XmHTMLTEXT_ADDFOOTER
XmHTMLTEXT_ADDHEADER
XmHTMLTEXT_MIMIC_FONTS
XmHTMLTEXT_PSFONT_CENTURY
XmHTMLTEXT_PSFONT_HELVETICA
XmHTMLTEXT_PSFONT_LUCIDA
XmHTMLTEXT_PSFONT_ROMAN
XmHTMLTable
XmHTMLTextFindString(TWidget w, String to_find,  XmHTMLDirection dir, XmHTMLPosition curr_pos)
XmHTMLTextGetFormatted(TWidget w, unsigned char papertype,  XmHTMLPaperSize *paperdef, unsigned char type, unsigned char PSoptions)
XmHTMLTextGetSource(TWidget w)
XmHTMLTextGetString(TWidget w)
XmHTMLTextScrollToLine(TWidget w, int line)
XmHTMLTextSet
XmHTMLTextSetString(TWidget w, String text)
XmHTMLTextSetStringWithLength(TWidget w, String text, size_t len)
XmHTMLUPDATE_LEVEL
XmHTMLVERSION
XmHTMLVERSION_STRING
XmHTMLVersion
XmHTMLWidget
XmHTMLWord
XmHTMLXYToInfo(TWidget w, int x, int y)
XmHTMLfont
XmIMAGE_ALLOW_SCALE
XmIMAGE_CLIPMASK
XmIMAGE_DEFERRED_FREE
XmIMAGE_DELAYED
XmIMAGE_DELAYED_CREATION
XmIMAGE_FRAME_IGNORE
XmIMAGE_IMMEDIATE_FREE
XmIMAGE_PROGRESSIVE
XmIMAGE_RGB_SINGLE
XmIMAGE_SHARED_DATA
XmImage
XmImageConfig
XmImageCreate(TWidget w, String file, Dimension width,  Dimension height, XmImageConfig *config)
XmImageCreateFromInfo(TWidget w, XmImageInfo *info,  Dimension width, Dimension height, XmImageConfig *config)
XmImageDestroy(XmImage *image)
XmImageDrawImage(XmImage *image, TDrawable dest,  int src_x, int src_y, int dest_x, int dest_y)
XmImageExport(XmImageInfo *info, String file, Dimension width,  Dimension height, unsigned char type)
XmImageFrame
XmImageGifProc
XmImageInfo
XmImageInfoStruct
XmImageProc
XmImageSetBackgroundImage(XmImage *src, TDrawable dest, int src_x,  int src_y, int width, int height, int dest_x, int dest_y)
XmImageStatus
XmIsHTML
XmSHADOW_IN
XmSHADOW_OUT
XtCallCallbackList
a64l (const char *s)
abort (void)
abs (int x) 
access (const char *name, int type)
acct (const char *name)
alarm (unsigned int seconds)
asctime (const struct tm *tp)
asctime_r (const struct tm *restrict tp, char *restrict buf)
asprintf (char **restrict ptr, const char *restrict fmt, ...)
atexit (void (*func) (void))
atof (const char *nptr)
atoi (const char *nptr)
atol (const char *nptr)
atoll (const char *nptr)
attribute(void *ctx, const xmlChar *fullname, const xmlChar *value)
attributeDecl(void *ctx, const xmlChar *elem, const xmlChar *name,  int type, int def, const xmlChar *defaultValue, xmlEnumerationPtr tree)
attributeDeclSAXFunc
attributeSAXFunc
basename (const char *filename)
bcmp (const void* s1, const void* s2, size_t n)
bcopy (const void* src, void* dest, size_t n)
bindtextdomain
brk (void* addr)
bsd_signal (int sig, sighandler_t handler))
bsearch (const void* key, const void* base, size_t nmemb, size_t size, compar_fn_t compar)
bzero (void* s, size_t n)
calloc (size_t nmemb, size_t size)
canonicalize_file_name (const char *name)
cdataBlock(void *ctx, const xmlChar *value, int len)
cdataBlockSAXFunc
cfree (void* ptr)
cfree (void* ptr)
characters (void *ctx, const xmlChar *ch, int len)
charactersSAXFunc
chdir (const char *path)
checkNamespace(void *ctx, xmlChar *nameSpace)
chmod (const char *file,mode_t mode)
chown (const char *file, uid_t owner, gid_t group)
chroot (const char *path)
clearenv (void)
clearerr (FILE *stream)
clearerr_unlocked (FILE *stream)
clock_t clock (void)
clock_t
close
close (int fd)
closedir
comment (void *ctx, const xmlChar *value)
commentSAXFunc
comparison_fn_t
componentType
confstr (int name, char *buf, size_t len)
crypt (const char *key, const char *salt)
ctermid (char *s)
ctime (const time_t *timer)
ctime_r (const time_t *restrict timer, char *restrict buf))
cuserid (char *s)
cuserid (char *s)
daemon (int nochdir, int noclose)
dcgettext
dev_t
dgettext
difftime (time_t time1, time_t time0)
dirent
div (int numer, int denom)
div_t
dprintf (int fd, const char * fmt, ...)
drand48 (void)
drand48_data
drand48_r (struct drand48_data *buffer, double *result)
dup (int fd)
dup2 (int fd, int fd2)
dysize (int year)
ecvt (double value, int ndigit, int *decpt, int *sign)
ecvt_r (double value, int ndigit, int *decpt, int *sign, char *buf, size_t len)
elementDecl (void *ctx, const xmlChar *name, int type, xmlElementContentPtr content)
elementDeclSAXFunc
encrypt (char *block, int edflag)
endDocument(void *ctx)
endDocumentSAXFunc
endElement(void *ctx, const xmlChar *name)
endElementSAXFunc
endusershell (void) /* Discard cached info. */
entityDecl(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content)
entityDeclSAXFunc
erand48 (unsigned short int xsubi[3])
erand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, double *result)
errorSAXFunc
error_t
euidaccess (const char *name, int type)
ex_GNOME_GenericFactory_CannotActivate
ex_GNOME_Table_OutOfRange
execl (const char *path, const char *arg, ...)
execle (const char *path, const char *arg, ...)
execlp (const char *file, const char *arg, ...)
execv (const char *path, char *const argv[])
execve (const char *path, char *const argv[], char *const envp[])
execvp (const char *file, char *const argv[])
exit (int status)
extern
fatalErrorSAXFunc
fchdir (int fd)
fchmod (int fd, mode_t mode)
fchown (int fd, uid_t owner, gid_t group)
fclose (FILE *stream)
fcloseall (void)
fcvt (double value, int ndigit, int *restrict decpt, int *restrict sign)
fcvt_r (double value, int ndigit, int *restrict decpt, int *restrict sign, char *restrict buf, size_t len)
fdatasync (int fildes)
fdopen
fdopen (int fd, const char *modes)
feof (FILE *stream)
feof_unlocked (FILE *stream)
ferror (FILE *stream)
ferror_unlocked (FILE *stream)
fexecve (int fd, char *const argv[], char *const envp[])
fflush (FILE *stream)
fflush_unlocked (FILE *stream)
ffs (int i)
ffsl (long int l)
ffsll (long long int ll)
fgetc (FILE *stream)
fgetc_unlocked (FILE *stream)
fgetpos (FILE *stream, fpos_t *pos)
fgetpos
fgetpos64 (FILE *stream, fpos64_t *pos)
fgets (char *restrict s, int n, FILE *stream)
fgets_unlocked (char *s, int n, FILE *stream)
fileno (FILE *stream)
fileno_unlocked (FILE *stream)
flockfile (FILE *stream)
fopen (const char *filename, const char *modes)
fopen
fopen64 (const char *filename, const char *modes)
fopencookie (void *magic_cookie, const char *modes, IO_cookie_io_functions_t io_funcs)
fork (void)
fpathconf (int fd, int name)
fpclassify
fpos64_t
fpos_t
fpos_t
fprintf (FILE *stream, const char *format, ...)
fputc (int c, FILE *stream)
fputc_unlocked (int c, FILE *stream)
fputs (const char *s, FILE *stream)
fputs_unlocked (const char *s, FILE *stream)
fread (void *ptr, size_t size, size_t n, FILE *stream)
fread_unlocked (void *ptr, size_t size, size_t n, FILE *stream)
free (void* ptr)
freopen (const char *filename, const char *modes, FILE *stream)
freopen64 (const char *filename, const char *modes, FILE *stream)
fscanf (FILE *stream, const char *format, ...)
fseek (FILE *stream, long int offset, int whence)
fseeko (FILE *stream, off_t offset, int whence)
fseeko64 (FILE *stream, off64_t offset, int whence)
fsetpos (FILE *stream, const fpos_t *pos)
fsetpos64 (FILE *stream, const fpos64_t *pos)
fstat (int fd, struct stat *buf)
fstat64 (int fd, struct stat64 *buf)
fsync (int fd)
ftell (FILE *stream)
ftello (FILE *stream)
ftello64 (FILE *stream)
ftpDataCallback
ftpListCallback
ftruncate
ftruncate (int fd, off_t length)
ftruncate64 (int fd, off64_t length)
ftrylockfile (FILE *stream)
funlockfile (FILE *stream)
fwrite (const void *ptr, size_t size, size_t n, FILE *s)
fwrite_unlocked (const void *ptr, size_t size, size_t n, FILE *stream)
g_allocator_free(GAllocator *allocator)
g_allocator_new(const gchar *name, guint n_preallocs)
g_array_append_val
g_array_append_vals(GArray *array, gconstpointer data, guint len)
g_array_free(GArray *array, gboolean free_segment)
g_array_index
g_array_insert_val
g_array_insert_vals(GArray *array, guint index, gconstpointer data, guint len)
g_array_new(gboolean zero_terminated, gboolean clear, guint element_size)
g_array_prepend_val
g_array_prepend_vals(GArray *array, gconstpointer data, guint len)
g_array_remove_index(GArray *array, guint index)
g_array_remove_index_fast(GArray *array, guint index)
g_array_set_size(GArray *array, guint length)
g_assert
g_assert_not_reached
g_atexit(GVoidFunc func)
g_basename(const gchar *file_name)
g_bit_nth_lsf(guint32 mask, gint nth_bit)
g_bit_nth_msf(guint32 mask, gint nth_bit)
g_bit_storage(guint number)
g_blow_chunks(void)
g_byte_array_append(GByteArray *array, const guint8 *data, guint len)
g_byte_array_free(GByteArray *array, gboolean free_segment)
g_byte_array_new(void)
g_byte_array_prepend(GByteArray *array, const guint8 *data, guint len)
g_byte_array_remove_index(GByteArray *array, guint index)
g_byte_array_remove_index_fast(GByteArray *array, guint index)
g_byte_array_set_size(GByteArray *array, guint length)
g_cache_destroy(GCache *cache)
g_cache_insert(GCache *cache, gpointer key)
g_cache_key_foreach(GCache *cache, GHFunc func, gpointer user_data)
g_cache_new(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GCompareFunc key_compare_func)
g_cache_remove(GCache *cache, gpointer value)
g_cache_value_foreach(GCache *cache, GHFunc func, gpointer user_data)
g_chunk_free
g_chunk_new
g_chunk_new0
g_completion_add_items(GCompletion* cmp, GList* items)
g_completion_clear_items(GCompletion* cmp)
g_completion_complete(GCompletion* cmp, gchar* prefix, gchar** new_prefix)
g_completion_free(GCompletion* cmp)
g_completion_new(GCompletionFunc func)
g_completion_remove_items(GCompletion* cmp, GList* items)
g_concat_dir_and_file(const char *dir, const char *file)
g_cond_broadcast
g_cond_free
g_cond_new
g_cond_signal
g_cond_timed_wait
g_cond_wait
g_copy_strings
g_copy_vector(char ** vec)
g_datalist_clear(GData **datalist)
g_datalist_foreach(GData **datalist, GDataForeachFunc func, gpointer user_data)
g_datalist_get_data
g_datalist_id_get_data(GData **datalist, GQuark key_id)
g_datalist_id_remove_data
g_datalist_id_remove_no_notify(GData **datalist, GQuark key_id)
g_datalist_id_set_data
g_datalist_id_set_data_full(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
g_datalist_init(GData **datalist)
g_datalist_remove_data
g_datalist_remove_no_notify
g_datalist_set_data
g_datalist_set_data_full
g_dataset_destroy(gconstpointer dataset_location)
g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data)
g_dataset_get_data
g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id)
g_dataset_id_remove_data
g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id)
g_dataset_id_set_data
g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
g_dataset_remove_data
g_dataset_remove_no_notify
g_dataset_set_data
g_dataset_set_data_full
g_date_add_days(GDate *date, guint n_days)
g_date_add_months(GDate *date, guint n_months)
g_date_add_years(GDate *date, guint n_years)
g_date_clear(GDate *date, guint n_dates)
g_date_compare(GDate *lhs, GDate *rhs)
g_date_day(GDate *date)
g_date_day_of_year(GDate *date)
g_date_days_in_month(GDateMonth month, GDateYear year)
g_date_free(GDate *date)
g_date_is_first_of_month(GDate *date)
g_date_is_last_of_month(GDate *date)
g_date_is_leap_year(GDateYear year)
g_date_julian(GDate *date)
g_date_monday_week_of_year(GDate *date)
g_date_monday_weeks_in_year(GDateYear year)
g_date_month(GDate *date)
g_date_new(void)
g_date_new_dmy(GDateDay day, GDateMonth month, GDateYear year)
g_date_new_julian(guint32 julian_day)
g_date_set_day(GDate *date, GDateDay day)
g_date_set_dmy(GDate *date, GDateDay day, GDateMonth month, GDateYear y)
g_date_set_julian(GDate *date, guint32 julian_date)
g_date_set_month(GDate *date, GDateMonth month)
g_date_set_parse(GDate *date, const gchar *str)
g_date_set_time(GDate *date, GTime time)
g_date_set_year(GDate *date, GDateYear year)
g_date_strftime(gchar *s, gsize slen, const gchar *format, GDate *date)
g_date_subtract_days(GDate *date, guint n_days)
g_date_subtract_months(GDate *date, guint n_months)
g_date_subtract_years(GDate *date, guint n_years)
g_date_sunday_week_of_year(GDate *date)
g_date_sunday_weeks_in_year(GDateYear year)
g_date_to_struct_tm(GDate *date, struct tm *tm)
g_date_valid(GDate *date)
g_date_valid_day(GDateDay day)
g_date_valid_dmy(GDateDay day, GDateMonth month, GDateYear year)
g_date_valid_julian(guint32 julian_date)
g_date_valid_month(GDateMonth month)
g_date_valid_weekday(GDateWeekday weekday)
g_date_valid_year(GDateYear year)
g_date_weekday(GDate *date)
g_date_year(GDate *date)
g_direct_equal(gconstpointer v, gconstpointer v2)
g_direct_hash(gconstpointer v)
g_dirname(const gchar *file_name)
g_error
g_extension_pointer(const char * path)
g_file_exists(const char *filename)
g_file_test(const char *filename, int test)
g_filename_index
g_filename_pointer
g_flatten_vector
g_free
g_free(gpointer mem)
g_get_current_dir(void)
g_get_current_time(GTimeVal *result)
g_get_home_dir(void)
g_get_prgname(void)
g_get_real_name(void)
g_get_tmp_dir(void)
g_get_user_name(void)
g_getenv(const gchar *variable)
g_hash_table_destroy(GHashTable *hash_table)
g_hash_table_foreach(GHashTable *hash_table, GHFunc func, gpointer user_data)
g_hash_table_foreach_remove(GHashTable *hash_table, GHRFunc func, gpointer user_data)
g_hash_table_freeze(GHashTable *hash_table)
g_hash_table_insert(GHashTable *hash_table, gpointer key, gpointer value)
g_hash_table_lookup(GHashTable *hash_table, gconstpointer key)
g_hash_table_lookup_extended(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
g_hash_table_new(GHashFunc hash_func, GCompareFunc key_compare_func)
g_hash_table_remove(GHashTable *hash_table, gconstpointer key)
g_hash_table_size(GHashTable *hash_table)
g_hash_table_thaw(GHashTable *hash_table)
g_hook_alloc(GHookList *hook_list)
g_hook_append
g_hook_compare_ids(GHook *new_hook, GHook *sibling)
g_hook_destroy(GHookList *hook_list, guint hook_id)
g_hook_destroy_link(GHookList *hook_list, GHook *hook)
g_hook_find(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data)
g_hook_find_data(GHookList *hook_list, gboolean need_valids, gpointer data)
g_hook_find_func(GHookList *hook_list, gboolean need_valids, gpointer func)
g_hook_find_func_data(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data)
g_hook_first_valid(GHookList *hook_list, gboolean may_be_in_call)
g_hook_free(GHookList *hook_list, GHook *hook)
g_hook_get(GHookList *hook_list, guint hook_id)
g_hook_insert_before(GHookList *hook_list, GHook *sibling, GHook *hook)
g_hook_insert_sorted(GHookList *hook_list, GHook *hook, GHookCompareFunc func)
g_hook_list_clear(GHookList *hook_list)
g_hook_list_init(GHookList *hook_list, guint hook_size)
g_hook_list_invoke(GHookList *hook_list, gboolean may_recurse)
g_hook_list_invoke_check(GHookList *hook_list, gboolean may_recurse)
g_hook_list_marshal(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer data)
g_hook_list_marshal_check(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer data)
g_hook_next_valid(GHookList *hook_list, GHook *hook, gboolean may_be_in_call)
g_hook_prepend(GHookList *hook_list, GHook *hook)
g_hook_ref(GHookList *hook_list, GHook *hook)
g_hook_unref(GHookList *hook_list, GHook *hook)
g_htonl
g_htons
g_idle_add(GSourceFunc function, gpointer data)
g_idle_add_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify destroy)
g_idle_remove_by_data(gpointer data)
g_int_equal(gconstpointer v, gconstpointer v2)
g_int_hash(gconstpointer v)
g_io_add_watch(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data)
g_io_add_watch_full(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify)
g_io_channel_close(GIOChannel *channel)
g_io_channel_init(GIOChannel *channel)
g_io_channel_read(GIOChannel *channel, gchar *buf, guint count, guint *bytes_read)
g_io_channel_ref(GIOChannel *channel)
g_io_channel_seek(GIOChannel *channel, gint offset, GSeekType type)
g_io_channel_unix_get_fd(GIOChannel *channel)
g_io_channel_unix_new(int fd)
g_io_channel_unref(GIOChannel *channel)
g_io_channel_win32_get_fd(GIOChannel *channel)
g_io_channel_win32_new_messages(guint hwnd)
g_io_channel_win32_new_pipe(int fd)
g_io_channel_win32_new_pipe_with_wakeups(int fd, guint peer, int peer_fd)
g_io_channel_win32_new_stream_socket(int socket)
g_io_channel_win32_pipe_readable(int fd, guint offset)
g_io_channel_win32_pipe_request_wakeups(GIOChannel *channel, guint peer, int peer_fd)
g_io_channel_write(GIOChannel *channel, gchar *buf, guint count, guint *bytes_written)
g_is_image_filename(const char * path)
g_list_alloc(void)
g_list_append(GList *list, gpointer data)
g_list_concat(GList *list1, GList *list2)
g_list_copy(GList *list)
g_list_find(GList *list, gpointer data)
g_list_find_custom(GList *list, gpointer data, GCompareFunc func)
g_list_first(GList *list)
g_list_foreach(GList *list, GFunc func, gpointer user_data)
g_list_free(GList *list)
g_list_free_1(GList *list)
g_list_index(GList *list, gpointer data)
g_list_insert(GList *list, gpointer data, gint position)
g_list_insert_sorted(GList *list, gpointer data, GCompareFunc func)
g_list_last(GList *list)
g_list_length(GList *list)
g_list_next
g_list_nth(GList *list, guint n)
g_list_nth_data(GList *list, guint n)
g_list_pop_allocator(void)
g_list_position(GList *list, GList *llink)
g_list_prepend(GList *list, gpointer data)
g_list_previous
g_list_push_allocator(GAllocator *allocator)
g_list_remove(GList *list, gpointer data)
g_list_remove_link(GList *list, GList *llink)
g_list_reverse(GList *list)
g_list_sort(GList *list, GCompareFunc compare_func)
g_log_default_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
g_log_remove_handler(const gchar *log_domain, guint handler_id)
g_log_set_always_fatal(GLogLevelFlags fatal_mask)
g_log_set_fatal_mask(const gchar *log_domain, GLogLevelFlags fatal_mask)
g_log_set_handler(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data)
g_logv(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args)
g_main_add_poll(GPollFD *fd, gint priority)
g_main_destroy(GMainLoop *loop)
g_main_is_running(GMainLoop *loop)
g_main_iteration(gboolean may_block)
g_main_new(gboolean is_running)
g_main_pending(void)
g_main_poll_win32_msg_add(gint priority, GPollFD *fd, guint hwnd)
g_main_quit(GMainLoop *loop)
g_main_remove_poll(GPollFD *fd)
g_main_run(GMainLoop *loop)
g_main_set_poll_func(GPollFunc func)
g_malloc
g_malloc(gulong size)
g_malloc0
g_malloc0(gulong size)
g_mem_check(gpointer mem)
g_mem_chunk_alloc(GMemChunk *mem_chunk)
g_mem_chunk_alloc0(GMemChunk *mem_chunk)
g_mem_chunk_clean(GMemChunk *mem_chunk)
g_mem_chunk_create
g_mem_chunk_destroy(GMemChunk *mem_chunk)
g_mem_chunk_free(GMemChunk *mem_chunk, gpointer mem)
g_mem_chunk_info(void)
g_mem_chunk_new(gchar *name, gint atom_size, gulong area_size, gint type)
g_mem_chunk_print(GMemChunk *mem_chunk)
g_mem_chunk_reset(GMemChunk *mem_chunk)
g_mem_profile(void)
g_memdup(gconstpointer mem, guint byte_size)
g_message
g_mutex_free
g_mutex_lock
g_mutex_new
g_mutex_trylock
g_mutex_unlock
g_new
g_new0
g_node_append
g_node_append_data
g_node_child_index(GNode *node, gpointer data)
g_node_child_position(GNode *node, GNode *child)
g_node_children_foreach(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data)
g_node_depth(GNode *node)
g_node_destroy(GNode *root)
g_node_find(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data)
g_node_find_child(GNode *node, GTraverseFlags flags, gpointer data)
g_node_first_child
g_node_first_sibling(GNode *node)
g_node_get_root(GNode *node)
g_node_insert(GNode *parent, gint position, GNode *node)
g_node_insert_before(GNode *parent, GNode *sibling, GNode *node)
g_node_insert_data
g_node_insert_data_before
g_node_is_ancestor(GNode *node, GNode *descendant)
g_node_last_child(GNode *node)
g_node_last_sibling(GNode *node)
g_node_max_height(GNode *root)
g_node_n_children(GNode *node)
g_node_n_nodes(GNode *root, GTraverseFlags flags)
g_node_new(gpointer data)
g_node_next_sibling
g_node_nth_child(GNode *node, guint n)
g_node_pop_allocator(void)
g_node_prepend(GNode *parent, GNode *node)
g_node_prepend_data
g_node_prev_sibling
g_node_push_allocator(GAllocator *allocator)
g_node_reverse_children(GNode *node)
g_node_traverse(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data)
g_node_unlink(GNode *node)
g_ntohl
g_ntohs
g_on_error_query(const gchar *prg_name)
g_on_error_stack_trace(const gchar *prg_name)
g_parse_debug_string(const gchar *string, GDebugKey *keys, guint nkeys)
g_path_is_absolute(const gchar *file_name)
g_path_skip_root(gchar *file_name)
g_printf_string_upper_bound(const gchar* format, va_list args)
g_private_get
g_private_new
g_private_set
g_ptr_array_add(GPtrArray *array, gpointer data)
g_ptr_array_free(GPtrArray *array, gboolean free_seg)
g_ptr_array_index
g_ptr_array_new(void)
g_ptr_array_remove(GPtrArray *array, gpointer data)
g_ptr_array_remove_fast(GPtrArray *array, gpointer data)
g_ptr_array_remove_index(GPtrArray *array, guint index)
g_ptr_array_remove_index_fast(GPtrArray *array, guint index)
g_ptr_array_set_size(GPtrArray *array, gint length)
g_quark_from_static_string(const gchar *string)
g_quark_from_string(const gchar *string)
g_quark_to_string(GQuark quark)
g_quark_try_string(const gchar *string)
g_realloc
g_realloc(gpointer mem, gulong size)
g_relation_count(GRelation *relation, gconstpointer key, gint field)
g_relation_delete(GRelation *relation, gconstpointer key, gint field)
g_relation_destroy(GRelation *relation)
g_relation_exists(GRelation *relation, ...)
g_relation_index(GRelation *relation, gint field, GHashFunc hash_func, GCompareFunc key_compare_func)
g_relation_insert(GRelation *relation, ...)
g_relation_new(gint fields)
g_relation_print(GRelation *relation)
g_relation_select(GRelation *relation, gconstpointer key, gint field)
g_renew
g_return_if_fail
g_return_val_if_fail
g_scanner_add_symbol
g_scanner_cur_line(GScanner *scanner)
g_scanner_cur_position(GScanner *scanner)
g_scanner_cur_token(GScanner *scanner)
g_scanner_cur_value(GScanner *scanner)
g_scanner_destroy(GScanner *scanner)
g_scanner_eof(GScanner *scanner)
g_scanner_foreach_symbol
g_scanner_freeze_symbol_table(GScanner *scanner)
g_scanner_get_next_token(GScanner *scanner)
g_scanner_input_file(GScanner *scanner, gint input_fd)
g_scanner_input_text(GScanner *scanner, const gchar *text, guint text_len)
g_scanner_lookup_symbol(GScanner *scanner, const gchar *symbol)
g_scanner_new(GScannerConfig *config_templ)
g_scanner_peek_next_token(GScanner *scanner)
g_scanner_remove_symbol
g_scanner_scope_add_symbol(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value)
g_scanner_scope_foreach_symbol(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data)
g_scanner_scope_lookup_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
g_scanner_scope_remove_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
g_scanner_set_scope(GScanner *scanner, guint scope_id)
g_scanner_stat_mode(const gchar *filename)
g_scanner_sync_file_offset(GScanner *scanner)
g_scanner_thaw_symbol_table(GScanner *scanner)
g_scanner_unexp_token(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error)
g_set_error_handler(GErrorFunc func)
g_set_message_handler(GPrintFunc func)
g_set_prgname(const gchar *prgname)
g_set_print_handler(GPrintFunc func)
g_set_printerr_handler(GPrintFunc func)
g_set_warning_handler(GWarningFunc func)
g_slist_alloc(void)
g_slist_append(GSList *list, gpointer data)
g_slist_concat(GSList *list1, GSList *list2)
g_slist_copy(GSList *list)
g_slist_find(GSList *list, gpointer data)
g_slist_find_custom(GSList *list, gpointer data, GCompareFunc func)
g_slist_foreach(GSList *list, GFunc func, gpointer user_data)
g_slist_free(GSList *list)
g_slist_free_1(GSList *list)
g_slist_index(GSList *list, gpointer data)
g_slist_insert(GSList *list, gpointer data, gint position)
g_slist_insert_sorted(GSList *list, gpointer data, GCompareFunc func)
g_slist_last(GSList *list)
g_slist_length(GSList *list)
g_slist_next
g_slist_nth(GSList *list, guint n)
g_slist_nth_data(GSList *list, guint n)
g_slist_pop_allocator(void)
g_slist_position(GSList *list, GSList *llink)
g_slist_prepend(GSList *list, gpointer data)
g_slist_push_allocator(GAllocator *allocator)
g_slist_remove(GSList *list, gpointer data)
g_slist_remove_link(GSList *list, GSList *llink)
g_slist_reverse(GSList *list)
g_slist_sort(GSList *list, GCompareFunc compare_func)
g_source_add(gint priority, gboolean can_recurse, GSourceFuncs *funcs, gpointer source_data, gpointer user_data, GDestroyNotify notify)
g_source_remove(guint tag)
g_source_remove_by_funcs_user_data(GSourceFuncs *funcs, gpointer user_data)
g_source_remove_by_source_data(gpointer source_data)
g_source_remove_by_user_data(gpointer user_data)
g_spaced_primes_closest(guint num)
g_static_mutex_get_mutex_impl(GMutex **mutex)
g_static_mutex_lock
g_static_mutex_trylock
g_static_mutex_unlock
g_static_private_get(GStaticPrivate *private_key)
g_static_private_set(GStaticPrivate *private_key, gpointer data, GDestroyNotify notify)
g_str_equal(gconstpointer v, gconstpointer v2)
g_str_hash(gconstpointer v)
g_strcasecmp(const gchar *s1, const gchar *s2)
g_strchomp(gchar *string)
g_strchug(gchar *string)
g_strconcat(const gchar *string1, ...) /* NULL terminated */
g_strdelimit(gchar *string, const gchar *delimiters, gchar new_delimiter)
g_strdown(gchar *string)
g_strdup(const gchar *str)
g_strdup_vprintf(const gchar *format, va_list args)
g_strerror(gint errnum)
g_strescape(gchar *string)
g_strfreev(gchar **str_array)
g_string
g_string_append(GString *string, const gchar *val)
g_string_append_c(GString *string, gchar c)
g_string_assign(GString *lval, const gchar *rval)
g_string_chunk_free(GStringChunk *chunk)
g_string_chunk_insert(GStringChunk *chunk, const gchar *string)
g_string_chunk_insert_const(GStringChunk *chunk, const gchar *string)
g_string_chunk_new(gint size)
g_string_down(GString *string)
g_string_erase(GString *string, gint pos, gint len)
g_string_free(GString *string, gint free_segment)
g_string_insert(GString *string, gint pos, const gchar *val)
g_string_insert_c(GString *string, gint pos, gchar c)
g_string_new(const gchar *init)
g_string_prepend(GString *string, const gchar *val)
g_string_prepend_c(GString *string, gchar c)
g_string_sized_new(guint dfl_size)
g_string_truncate(GString *string, gint len)
g_string_up(GString *string)
g_strjoin(const gchar *separator, ...) /* NULL terminated */
g_strjoinv(const gchar *separator, gchar **str_array)
g_strncasecmp(const gchar *s1, const gchar *s2, guint n)
g_strndup(const gchar *str, guint n)
g_strnfill(guint length, gchar fill_char)
g_strreverse(gchar *string)
g_strsignal(gint signum)
g_strsplit(const gchar *string, const gchar *delimiter, gint max_tokens)
g_strstrip
g_strtod(const gchar *nptr, gchar **endptr)
g_strup(gchar *string)
g_thread_init(GThreadFunctions *vtable)
g_thread_supported
g_timeout_add(guint interval, GSourceFunc function, gpointer data)
g_timeout_add_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
g_timer_destroy(GTimer *timer)
g_timer_elapsed(GTimer *timer, gulong *microseconds)
g_timer_new(void)
g_timer_reset(GTimer *timer)
g_timer_start(GTimer *timer)
g_timer_stop(GTimer *timer)
g_tree_destroy(GTree *tree)
g_tree_height(GTree *tree)
g_tree_insert(GTree *tree, gpointer key, gpointer value)
g_tree_lookup(GTree *tree, gpointer key)
g_tree_new(GCompareFunc key_compare_func)
g_tree_nnodes(GTree *tree)
g_tree_remove(GTree *tree, gpointer key)
g_tree_search(GTree *tree, GSearchFunc search_func, gpointer data)
g_tree_traverse(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer data)
g_tuples_destroy(GTuples *tuples)
g_tuples_index(GTuples *tuples, gint index, gint field)
g_unix_error_string(int error_num)
g_vsnprintf(gchar *string, gulong n, gchar const *format, va_list args)
g_warning
gboolean
gchar
gconstpointer
gcvt (double value, int ndigit, char *bufs)
gdk_add_client_message_filter(GdkAtom message_type, GdkFilterFunc func, gpointer data)
gdk_atom_intern(const gchar *atom_name, gint only_if_exists)
gdk_atom_name(GdkAtom atom)
gdk_beep(void)
gdk_bitmap_create_from_data(GdkWindow *window, const gchar *data, gint width, gint height)
gdk_bitmap_ref(GdkBitmap *pixmap)
gdk_bitmap_unref(GdkBitmap *pixmap)
gdk_char_height(GdkFont *font, gchar character)
gdk_char_measure(GdkFont *font, gchar character)
gdk_char_width(GdkFont *font, gchar character)
gdk_char_width_wc(GdkFont *font, GdkWChar character)
gdk_color_alloc(GdkColormap *colormap, GdkColor *color)
gdk_color_black(GdkColormap *colormap, GdkColor *color)
gdk_color_change(GdkColormap *colormap, GdkColor *color)
gdk_color_context_add_palette(GdkColorContext *cc, GdkColor *palette, gint num_palette)
gdk_color_context_free(GdkColorContext *cc)
gdk_color_context_free_dither(GdkColorContext *cc)
gdk_color_context_get_index_from_palette(GdkColorContext *cc, gint *red, gint *green, gint *blue, gint *failed)
gdk_color_context_get_pixel(GdkColorContext *cc, gushort red, gushort green, gushort blue, gint *failed)
gdk_color_context_get_pixel_from_palette(GdkColorContext *cc, gushort *red, gushort *green, gushort *blue, gint *failed)
gdk_color_context_get_pixels(GdkColorContext *cc, gushort *reds, gushort *greens, gushort *blues, gint ncolors, gulong *colors, gint *nallocated)
gdk_color_context_get_pixels_incremental(GdkColorContext *cc, gushort *reds, gushort *greens, gushort *blues, gint ncolors, gint *used, gulong *colors, gint *nallocated)
gdk_color_context_init_dither(GdkColorContext *cc)
gdk_color_context_new(GdkVisual *visual, GdkColormap *colormap)
gdk_color_context_new_mono(GdkVisual *visual, GdkColormap *colormap)
gdk_color_context_query_color(GdkColorContext *cc, GdkColor *color)
gdk_color_context_query_colors(GdkColorContext *cc, GdkColor *colors, gint num_colors)
gdk_color_copy(const GdkColor *color)
gdk_color_equal(const GdkColor *colora, const GdkColor *colorb)
gdk_color_free(GdkColor *color)
gdk_color_hash(const GdkColor *colora, const GdkColor *colorb)
gdk_color_parse(const gchar *spec, GdkColor *color)
gdk_color_white(GdkColormap *colormap, GdkColor *color)
gdk_colormap_alloc_color(GdkColormap *colormap, GdkColor *color, gboolean writeable, gboolean best_match)
gdk_colormap_alloc_colors(GdkColormap *colormap, GdkColor *colors, gint ncolors, gboolean writeable, gboolean best_match, gboolean *success)
gdk_colormap_change(GdkColormap *colormap, gint ncolors)
gdk_colormap_free_colors(GdkColormap *colormap, GdkColor *colors, gint ncolors)
gdk_colormap_get_system(void)
gdk_colormap_get_system_size(void)
gdk_colormap_get_visual(GdkColormap *colormap)
gdk_colormap_lookup(Colormap xcolormap)
gdk_colormap_new(GdkVisual *visual, gboolean allocate)
gdk_colormap_ref(GdkColormap *cmap)
gdk_colormap_unref(GdkColormap *cmap)
gdk_colors_alloc(GdkColormap *colormap, gboolean contiguous, gulong *planes, gint nplanes, gulong *pixels, gint npixels)
gdk_colors_free(GdkColormap *colormap, gulong *pixels, gint npixels, gulong planes)
gdk_colors_store(GdkColormap *colormap, GdkColor *colors, gint ncolors)
gdk_cursor_destroy(GdkCursor *cursor)
gdk_cursor_new(GdkCursorType cursor_type)
gdk_cursor_new_from_pixmap(GdkPixmap *source, GdkPixmap *mask, GdkColor *fg, GdkColor *bg, gint x, gint y)
gdk_dnd_display_drag_cursor(gint x, gint y, gboolean drag_ok, gboolean change_made)
gdk_dnd_init(void)
gdk_drag_abort(GdkDragContext *context, guint32 time)
gdk_drag_begin(GdkWindow *window, GList *targets)
gdk_drag_context_new(void)
gdk_drag_context_ref(GdkDragContext *context)
gdk_drag_context_unref(GdkDragContext *context)
gdk_drag_drop(GdkDragContext *context, guint32 time)
gdk_drag_find_window(GdkDragContext *context, GdkWindow *drag_window, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol)
gdk_drag_get_protocol(guint32 xid, GdkDragProtocol *protocol)
gdk_drag_get_selection(GdkDragContext *context)
gdk_drag_motion(GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time)
gdk_drag_status(GdkDragContext *context, GdkDragAction action, guint32 time)
gdk_draw_arc(GdkDrawable *drawable, GdkGC *gc, gint filled, gint x, gint y, gint width, gint height, gint angle1, gint angle2)
gdk_draw_gray_image(GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, guchar *buf, gint rowstride)
gdk_draw_image(GdkDrawable *drawable, GdkGC *gc, GdkImage *image, gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height)
gdk_draw_indexed_image(GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, guchar *buf, gint rowstride, GdkRgbCmap *cmap)
gdk_draw_line(GdkDrawable *drawable, GdkGC *gc, gint x1, gint y1, gint x2, gint y2)
gdk_draw_lines(GdkDrawable *drawable, GdkGC *gc, GdkPoint *points, gint npoints)
gdk_draw_pixmap(GdkDrawable *drawable, GdkGC *gc, GdkDrawable *src, gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height)
gdk_draw_point(GdkDrawable *drawable, GdkGC *gc, gint x, gint y)
gdk_draw_points(GdkDrawable *drawable, GdkGC *gc, GdkPoint *points, gint npoints)
gdk_draw_polygon(GdkDrawable *drawable, GdkGC *gc, gint filled, GdkPoint *points, gint npoints)
gdk_draw_rectangle(GdkDrawable *drawable, GdkGC *gc, gint filled, gint x, gint y, gint width, gint height)
gdk_draw_rgb_32_image(GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, guchar *buf, gint rowstride)
gdk_draw_rgb_image(GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, guchar *rgb_buf, gint rowstride)
gdk_draw_rgb_image_dithalign(GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, guchar *rgb_buf, gint rowstride, gint xdith, gint ydith)
gdk_draw_segments(GdkDrawable *drawable, GdkGC *gc, GdkSegment *segs, gint nsegs)
gdk_draw_string(GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const gchar *string)
gdk_draw_text(GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const gchar *text, gint text_length)
gdk_draw_text_wc(GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const GdkWChar *text, gint text_length)
gdk_drawable_set_data(GdkDrawable *drawable, const gchar *key, gpointer data, GDestroyNotify destroy_func)
gdk_drop_finish(GdkDragContext *context, gboolean success, guint32 time)
gdk_drop_reply(GdkDragContext *context, gboolean ok, guint32 time)
gdk_error_trap_pop(void)
gdk_error_trap_push(void)
gdk_event_copy(GdkEvent *event)
gdk_event_free(GdkEvent *event)
gdk_event_get(void)
gdk_event_get_graphics_expose(GdkWindow *window)
gdk_event_get_time(GdkEvent *event)
gdk_event_handler_set(GdkEventFunc func, gpointer data, GDestroyNotify notify)
gdk_event_peek(void)
gdk_event_put(GdkEvent *event)
gdk_event_send_client_message(GdkEvent *event, guint32 xid)
gdk_event_send_clientmessage_toall(GdkEvent *event)
gdk_events_init(void)
gdk_events_pending(void)
gdk_exit(gint error_code)
gdk_flush(void)
gdk_font_equal(const GdkFont *fonta, const GdkFont *fontb)
gdk_font_id(const GdkFont *font)
gdk_font_load(const gchar *font_name)
gdk_font_lookup
gdk_font_ref(GdkFont *font)
gdk_font_unref(GdkFont *font)
gdk_fontset_load(const gchar *fontset_name)
gdk_free_compound_text(guchar *ctext)
gdk_free_text_list(gchar **list)
gdk_gc_copy(GdkGC *dst_gc, GdkGC *src_gc)
gdk_gc_destroy(GdkGC *gc)
gdk_gc_get_values(GdkGC *gc, GdkGCValues *values)
gdk_gc_new(GdkWindow *window)
gdk_gc_new_with_values(GdkWindow *window, GdkGCValues *values, GdkGCValuesMask values_mask)
gdk_gc_ref(GdkGC *gc)
gdk_gc_set_background(GdkGC *gc, GdkColor *color)
gdk_gc_set_clip_mask(GdkGC *gc, GdkBitmap *mask)
gdk_gc_set_clip_origin(GdkGC *gc, gint x, gint y)
gdk_gc_set_clip_rectangle(GdkGC *gc, GdkRectangle *rectangle)
gdk_gc_set_clip_region(GdkGC *gc, GdkRegion *region)
gdk_gc_set_dashes(GdkGC *gc, gint dash_offset, gint8 dash_list[], gint n)
gdk_gc_set_exposures(GdkGC *gc, gboolean exposures)
gdk_gc_set_fill(GdkGC *gc, GdkFill fill)
gdk_gc_set_font(GdkGC *gc, GdkFont *font)
gdk_gc_set_foreground(GdkGC *gc, GdkColor *color)
gdk_gc_set_function(GdkGC *gc, GdkFunction function)
gdk_gc_set_line_attributes(GdkGC *gc, gint line_width, GdkLineStyle line_style, GdkCapStyle cap_style, GdkJoinStyle join_style)
gdk_gc_set_stipple(GdkGC *gc, GdkPixmap *stipple)
gdk_gc_set_subwindow(GdkGC *gc, GdkSubwindowMode mode)
gdk_gc_set_tile(GdkGC *gc, GdkPixmap *tile)
gdk_gc_set_ts_origin(GdkGC *gc, gint x, gint y)
gdk_gc_unref(GdkGC *gc)
gdk_get_client_window(Display *dpy, Window win)
gdk_get_display(void)
gdk_get_show_events(void)
gdk_get_use_xshm(void)
gdk_ic_attr_destroy(GdkICAttr *attr)
gdk_ic_attr_new(void)
gdk_ic_cleanup(void)
gdk_ic_destroy(GdkIC *ic)
gdk_ic_get_attr(GdkIC *ic, GdkICAttr *attr, GdkICAttributesType mask)
gdk_ic_get_events(GdkIC *ic)
gdk_ic_get_style(GdkIC *ic)
gdk_ic_new(GdkICAttr *attr, GdkICAttributesType mask)
gdk_ic_set_attr(GdkIC *ic, GdkICAttr *attr, GdkICAttributesType mask)
gdk_im_begin(GdkIC *ic, GdkWindow *window)
gdk_im_close(void)
gdk_im_decide_style(GdkIMStyle supported_style)
gdk_im_end(void)
gdk_im_open(void)
gdk_im_ready(void)
gdk_im_set_best_style(GdkIMStyle best_allowed_style)
gdk_image_destroy(GdkImage *image)
gdk_image_exit(void)
gdk_image_get(GdkWindow *window, gint x, gint y, gint width, gint height)
gdk_image_get_pixel(GdkImage *image, gint x, gint y)
gdk_image_init(void)
gdk_image_new(GdkImageType type, GdkVisual *visual, gint width, gint height)
gdk_image_new_bitmap(GdkVisual *visual, gpointer data, gint width, gint height)
gdk_image_put_pixel(GdkImage *image, gint x, gint y, guint32 pixel)
gdk_init(gint *argc, gchar ***argv)
gdk_init_check(gint *argc, gchar ***argv)
gdk_input_add(gint source, GdkInputCondition condition, GdkInputFunction function, gpointer data)
gdk_input_add_full(gint source, GdkInputCondition condition, GdkInputFunction function, gpointer data, GdkDestroyNotify destroy)
gdk_input_exit(void)
gdk_input_init(void)
gdk_input_list_devices(void)
gdk_input_motion_events(GdkWindow *window, guint32 deviceid, guint32 start, guint32 stop, gint *nevents_return)
gdk_input_remove(gint tag)
gdk_input_set_axes(guint32 deviceid, GdkAxisUse *axes)
gdk_input_set_extension_events(GdkWindow *window, gint mask, GdkExtensionMode mode)
gdk_input_set_key(guint32 deviceid, guint index, guint keyval, GdkModifierType modifiers)
gdk_input_set_mode(guint32 deviceid, GdkInputMode mode)
gdk_input_set_source(guint32 deviceid, GdkInputSource source)
gdk_input_window_get_pointer(GdkWindow *window, guint32 deviceid, gdouble *x, gdouble *y, gdouble *pressure, gdouble *xtilt, gdouble *ytilt, GdkModifierType *mask)
gdk_iswalnum
gdk_iswspace
gdk_key_repeat_disable(void)
gdk_key_repeat_restore(void)
gdk_keyboard_grab(GdkWindow *window, gboolean owner_events, guint32 time)
gdk_keyboard_ungrab(guint32 time)
gdk_keyval_from_name(const gchar *keyval_name)
gdk_keyval_is_lower(guint keyval)
gdk_keyval_is_upper(guint keyval)
gdk_keyval_name(guint keyval)
gdk_keyval_to_lower(guint keyval)
gdk_keyval_to_upper(guint keyval)
gdk_list_visuals(void)
gdk_mbstowcs(GdkWChar *dest, const gchar *src, gint dest_max)
gdk_pixbuf_add_alpha(const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b)
gdk_pixbuf_animation_get_frames(GdkPixbufAnimation *animation)
gdk_pixbuf_animation_get_height(GdkPixbufAnimation *animation)
gdk_pixbuf_animation_get_num_frames(GdkPixbufAnimation *animation)
gdk_pixbuf_animation_get_width(GdkPixbufAnimation *animation)
gdk_pixbuf_animation_new_from_file(const char *filename)
gdk_pixbuf_animation_ref(GdkPixbufAnimation *animation)
gdk_pixbuf_animation_unref(GdkPixbufAnimation *animation)
gdk_pixbuf_composite(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha)
gdk_pixbuf_composite_color(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2)
gdk_pixbuf_composite_color_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2)
gdk_pixbuf_copy(const GdkPixbuf *pixbuf)
gdk_pixbuf_copy_area(const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y)
gdk_pixbuf_finalize(GdkPixbuf *pixbuf)
gdk_pixbuf_frame_get_action(GdkPixbufFrame *frame)
gdk_pixbuf_frame_get_delay_time(GdkPixbufFrame *frame)
gdk_pixbuf_frame_get_pixbuf(GdkPixbufFrame *frame)
gdk_pixbuf_frame_get_x_offset(GdkPixbufFrame *frame)
gdk_pixbuf_frame_get_y_offset(GdkPixbufFrame *frame)
gdk_pixbuf_get_bits_per_sample(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_colorspace(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_from_drawable(GdkPixbuf *dest, GdkDrawable *src, GdkColormap *cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height)
gdk_pixbuf_get_has_alpha(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_height(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_n_channels(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_pixels(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_rowstride(const GdkPixbuf *pixbuf)
gdk_pixbuf_get_width(const GdkPixbuf *pixbuf)
gdk_pixbuf_loader_close(GdkPixbufLoader *loader)
gdk_pixbuf_loader_get_animation(GdkPixbufLoader *loader)
gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader *loader)
gdk_pixbuf_loader_get_type(void)
gdk_pixbuf_loader_new(void)
gdk_pixbuf_loader_write(GdkPixbufLoader *loader, const guchar *buf, size_t count)
gdk_pixbuf_new(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
gdk_pixbuf_new_from_data(const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data)
gdk_pixbuf_new_from_file(const char *filename)
gdk_pixbuf_new_from_xpm_data(const char **data)
gdk_pixbuf_postinit(gpointer app, gpointer modinfo)
gdk_pixbuf_preinit(gpointer app, gpointer modinfo)
gdk_pixbuf_ref(GdkPixbuf *pixbuf)
gdk_pixbuf_render_pixmap_and_mask(GdkPixbuf *pixbuf, GdkPixmap **pixmap_return, GdkBitmap **mask_return, int alpha_threshold)
gdk_pixbuf_render_threshold_alpha(GdkPixbuf *pixbuf, GdkBitmap *bitmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_threshold)
gdk_pixbuf_render_to_drawable(GdkPixbuf *pixbuf, GdkDrawable *drawable, GdkGC *gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, GdkRgbDither dither, int x_dither, int y_dither)
gdk_pixbuf_render_to_drawable_alpha(GdkPixbuf *pixbuf, GdkDrawable *drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, GdkPixbufAlphaMode alpha_mode, int alpha_threshold, GdkRgbDither dither, int x_dither, int y_dither)
gdk_pixbuf_scale(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type)
gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type)
gdk_pixbuf_set_last_unref_handler(GdkPixbuf *pixbuf, GdkPixbufLastUnref last_unref_fn, gpointer last_unref_fn_data)
gdk_pixbuf_unref(GdkPixbuf *pixbuf)
gdk_pixmap_colormap_create_from_xpm(GdkWindow *window, GdkColormap *colormap, GdkBitmap **mask, GdkColor *transparent_color, const gchar *filename)
gdk_pixmap_colormap_create_from_xpm_d(GdkWindow *window, GdkColormap *colormap, GdkBitmap **mask, GdkColor *transparent_color, gchar **data)
gdk_pixmap_create_from_data(GdkWindow *window, const gchar *data, gint width, gint height, gint depth, GdkColor *fg, GdkColor *bg)
gdk_pixmap_create_from_xpm(GdkWindow *window, GdkBitmap **mask, GdkColor *transparent_color, const gchar *filename)
gdk_pixmap_create_from_xpm_d(GdkWindow *window, GdkBitmap **mask, GdkColor *transparent_color, gchar **data)
gdk_pixmap_foreign_new(guint32 anid)
gdk_pixmap_lookup
gdk_pixmap_new(GdkWindow *window, gint width, gint height, gint depth)
gdk_pixmap_ref(GdkPixmap *pixmap)
gdk_pixmap_unref(GdkPixmap *pixmap)
gdk_pointer_grab(GdkWindow *window, gint owner_events, GdkEventMask event_mask, GdkWindow *confine_to, GdkCursor *cursor, guint32 time)
gdk_pointer_is_grabbed(void)
gdk_pointer_ungrab(guint32 time)
gdk_property_change(GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, guchar *data, gint nelements)
gdk_property_delete(GdkWindow *window, GdkAtom property)
gdk_property_get(GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data)
gdk_query_depths(gint **depths, gint *count)
gdk_query_visual_types(GdkVisualType **visual_types, gint *count)
gdk_rectangle_intersect(GdkRectangle *src1, GdkRectangle *src2, GdkRectangle *dest)
gdk_rectangle_union(GdkRectangle *src1, GdkRectangle *src2, GdkRectangle *dest)
gdk_region_destroy(GdkRegion *region)
gdk_region_empty(GdkRegion *region)
gdk_region_equal(GdkRegion *region1, GdkRegion *region2)
gdk_region_get_clipbox(GdkRegion *region, GdkRectangle *rectangle)
gdk_region_new(void)
gdk_region_offset(GdkRegion *region, gint dx, gint dy)
gdk_region_point_in(GdkRegion *region, int x, int y)
gdk_region_polygon(GdkPoint *points, gint npoints, GdkFillRule fill_rule)
gdk_region_rect_in(GdkRegion *region, GdkRectangle *rect)
gdk_region_shrink(GdkRegion *region, gint dx, gint dy)
gdk_region_union_with_rect(GdkRegion *region, GdkRectangle *rect)
gdk_regions_intersect(GdkRegion *source1, GdkRegion *source2)
gdk_regions_subtract(GdkRegion *source1, GdkRegion *source2)
gdk_regions_union(GdkRegion *source1, GdkRegion *source2)
gdk_regions_xor(GdkRegion *source1, GdkRegion *source2)
gdk_rgb_cmap_free(GdkRgbCmap *cmap)
gdk_rgb_cmap_new(guint32 *colors, gint n_colors)
gdk_rgb_ditherable(void)
gdk_rgb_gc_set_background(GdkGC *gc, guint32 rgb)
gdk_rgb_gc_set_foreground(GdkGC *gc, guint32 rgb)
gdk_rgb_get_cmap(void)
gdk_rgb_get_visual(void)
gdk_rgb_init(void)
gdk_rgb_set_install(gboolean install)
gdk_rgb_set_min_colors(gint min_colors)
gdk_rgb_set_verbose(gboolean verbose)
gdk_rgb_xpixel_from_rgb(guint32 rgb)
gdk_screen_height(void)
gdk_screen_height_mm(void)
gdk_screen_width(void)
gdk_screen_width_mm(void)
gdk_selection_convert(GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time)
gdk_selection_owner_get(GdkAtom selection)
gdk_selection_owner_set(GdkWindow *owner, GdkAtom selection, guint32 time, gint send_event)
gdk_selection_property_get(GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format)
gdk_selection_send_notify(guint32 requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time)
gdk_send_xevent(Window window, gboolean propagate, glong event_mask, XEvent *event_send)
gdk_set_locale(void)
gdk_set_show_events(gboolean show_events)
gdk_set_sm_client_id(const gchar *sm_client_id)
gdk_set_use_xshm(gboolean use_xshm)
gdk_string_extents(GdkFont *font, const gchar *string, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent)
gdk_string_height(GdkFont *font, const gchar *string)
gdk_string_measure(GdkFont *font, const gchar *string)
gdk_string_to_compound_text(const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length)
gdk_string_width(GdkFont *font, const gchar *string)
gdk_text_extents(GdkFont *font, const gchar *text, gint text_length, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent)
gdk_text_extents_wc(GdkFont *font, const GdkWChar *text, gint text_length, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent)
gdk_text_height(GdkFont *font, const gchar *text, gint text_length)
gdk_text_measure(GdkFont *font, const gchar *text, gint text_length)
gdk_text_property_to_text_list(GdkAtom encoding, gint format, guchar *text, gint length, gchar ***list)
gdk_text_width(GdkFont *font, const gchar *text, gint text_length)
gdk_text_width_wc(GdkFont *font, const GdkWChar *text, gint text_length)
gdk_threads_enter(void)
gdk_threads_leave(void)
gdk_time_get(void)
gdk_timer_disable(void)
gdk_timer_enable(void)
gdk_timer_get(void)
gdk_timer_set(guint32 milliseconds)
gdk_visual_get_best(void)
gdk_visual_get_best_depth(void)
gdk_visual_get_best_type(void)
gdk_visual_get_best_with_both(gint depth, GdkVisualType visual_type)
gdk_visual_get_best_with_depth(gint depth)
gdk_visual_get_best_with_type(GdkVisualType visual_type)
gdk_visual_get_system(void)
gdk_visual_init(void)
gdk_visual_lookup(Visual *xvisual)
gdk_visual_ref(GdkVisual *visual)
gdk_visual_unref(GdkVisual *visual)
gdk_wcstombs(const GdkWChar *src)
gdk_window_add_colormap_windows(GdkWindow *window)
gdk_window_add_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
gdk_window_at_pointer(gint *win_x, gint *win_y)
gdk_window_clear(GdkWindow *window)
gdk_window_clear_area(GdkWindow *window, gint x, gint y, gint width, gint height)
gdk_window_clear_area_e(GdkWindow *window, gint x, gint y, gint width, gint height)
gdk_window_copy_area(GdkWindow *window, GdkGC *gc, gint x, gint y, GdkWindow *source_window, gint source_x, gint source_y, gint width, gint height)
gdk_window_destroy(GdkWindow *window)
gdk_window_destroy_notify(GdkWindow *window)
gdk_window_foreign_new(guint32 anid)
gdk_window_get_children(GdkWindow *window)
gdk_window_get_colormap(GdkWindow *window)
gdk_window_get_deskrelative_origin(GdkWindow *window, gint *x, gint *y)
gdk_window_get_events(GdkWindow *window)
gdk_window_get_geometry(GdkWindow *window, gint *x, gint *y, gint *width, gint *height, gint *depth)
gdk_window_get_origin(GdkWindow *window, gint *x, gint *y)
gdk_window_get_parent(GdkWindow *window)
gdk_window_get_pointer(GdkWindow *window, gint *x, gint *y, GdkModifierType *mask)
gdk_window_get_position(GdkWindow *window, gint *x, gint *y)
gdk_window_get_root_origin(GdkWindow *window, gint *x, gint *y)
gdk_window_get_size(GdkWindow *window, gint *width, gint *height)
gdk_window_get_toplevel(GdkWindow *window)
gdk_window_get_toplevels(void)
gdk_window_get_type(GdkWindow *window)
gdk_window_get_user_data(GdkWindow *window, gpointer *data)
gdk_window_get_visual(GdkWindow *window)
gdk_window_hide(GdkWindow *window)
gdk_window_init(void)
gdk_window_is_viewable(GdkWindow *window)
gdk_window_is_visible(GdkWindow *window)
gdk_window_lookup
gdk_window_lower(GdkWindow *window)
gdk_window_merge_child_shapes(GdkWindow *window)
gdk_window_move(GdkWindow *window, gint x, gint y)
gdk_window_move_resize(GdkWindow *window, gint x, gint y, gint width, gint height)
gdk_window_new(GdkWindow *parent, GdkWindowAttr *attributes, gint attributes_mask)
gdk_window_raise(GdkWindow *window)
gdk_window_ref(GdkWindow *window)
gdk_window_register_dnd(GdkWindow *window)
gdk_window_remove_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
gdk_window_reparent(GdkWindow *window, GdkWindow *new_parent, gint x, gint y)
gdk_window_resize(GdkWindow *window, gint width, gint height)
gdk_window_set_back_pixmap(GdkWindow *window, GdkPixmap *pixmap, gboolean parent_relative)
gdk_window_set_background(GdkWindow *window, GdkColor *color)
gdk_window_set_child_shapes(GdkWindow *window)
gdk_window_set_colormap(GdkWindow *window, GdkColormap *colormap)
gdk_window_set_cursor(GdkWindow *window, GdkCursor *cursor)
gdk_window_set_decorations(GdkWindow *window, GdkWMDecoration decorations)
gdk_window_set_events(GdkWindow *window, GdkEventMask event_mask)
gdk_window_set_functions(GdkWindow *window, GdkWMFunction functions)
gdk_window_set_geometry_hints(GdkWindow *window, GdkGeometry *geometry, GdkWindowHints flags)
gdk_window_set_group(GdkWindow *window, GdkWindow *leader)
gdk_window_set_hints(GdkWindow *window, gint x, gint y, gint min_width, gint min_height, gint max_width, gint max_height, gint flags)
gdk_window_set_icon(GdkWindow *window, GdkWindow *icon_window, GdkPixmap *pixmap, GdkBitmap *mask)
gdk_window_set_icon_name(GdkWindow *window, const gchar *name)
gdk_window_set_override_redirect(GdkWindow *window, gboolean override_redirect)
gdk_window_set_role(GdkWindow *window, const gchar *role)
gdk_window_set_static_gravities(GdkWindow *window, gboolean use_static)
gdk_window_set_title(GdkWindow *window, const gchar *title)
gdk_window_set_transient_for(GdkWindow *window, GdkWindow *leader)
gdk_window_set_user_data(GdkWindow *window, gpointer user_data)
gdk_window_shape_combine_mask(GdkWindow *window, GdkBitmap *shape_mask, gint offset_x, gint offset_y)
gdk_window_show(GdkWindow *window)
gdk_window_unref(GdkWindow *window)
gdk_window_withdraw(GdkWindow *window)
gdk_window_xid_at(Window base, gint bx, gint by, gint x, gint y, GList *excludes, gboolean excl_child)
gdk_window_xid_at_coords(gint x, gint y, GList *excludes, gboolean excl_child)
gdk_xid_table_insert(XID *xid, gpointer data)
gdk_xid_table_lookup(XID xid)
gdk_xid_table_remove(XID xid)
gdkx_colormap_get(Colormap xcolormap)
gdkx_visual_get(VisualID xvisualid)
gdouble
getColumnNumber(void *ctx)
getEntity(void *ctx, const xmlChar *name)
getEntitySAXFunc
getLineNumber(void *ctx)
getNamespace(void *ctx)
getParameterEntity(void *ctx, const xmlChar *name)
getParameterEntitySAXFunc
getPublicId(void *ctx)
getSystemId(void *ctx)
get_current_dir_name (void)
getc (FILE *stream)
getc_unlocked (FILE *stream)
getchar (void)
getchar_unlocked (void)
getcwd (char *buf, size_t size)
getdate (const char *string)
getdate_r (const char *string, struct tm *resbufp)
getdelim (char **lineptr, size_t *n, int delimiter, FILE *stream)
getdomainname (char *name, size_t len)
getdtablesize (void)
getegid (void)
getenv (const char *name)
geteuid (void)
getgid (void)
getgroups (int size, gid_t list[])
gethostid (void)
gethostname (char *name, size_t len)
getline (char **lineptr, size_t *n, FILE *stream)
getlogin (void)
getlogin_r (char *name, size_t name_len)
getpagesize (void)
getpass (const char *prompt)
getpgid (pid_t pid)
getpgrp (void)
getpid (void)
getppid (void)
getpt (void)
gets (char *s)
getsid (pid_t pid)
getsubopt (char **optionp, const char **tokens, char **valuep))
gettext
getuid (void)
getumask (void)
getusershell (void)
getw (FILE *stream)
getwd (char *buf)
gfloat
gid_t
gint
glib_dummy_decl(void)
globalNamespace(void *ctx, const xmlChar *href, const xmlChar *prefix)
glong
gmtime (const time_t *timer)
gmtime_r (const time_t *timer, struct tm *tp)
gnome_CORBA_ORB(void)
gnome_CORBA_init(const char *app_id, const char *app_version, int *argc, char **argv, GnorbaInitFlags gnorba_flags, CORBA_Environment *ev)
gnome_CORBA_init_with_popt_table(const char *app_id, const char *app_version, int *argc, char **argv, const struct poptOption *options, int popt_flags, poptContext *return_ctx, GnorbaInitFlags gnorba_flags, CORBA_Environment *ev)
gnome_about_construct(GnomeAbout *about, const gchar *title, const gchar *version, const gchar *copyright, const gchar **authors, const gchar *comments, const gchar *logo)
gnome_about_get_type(void)
gnome_about_new(const gchar *title, const gchar *version, const gchar *copyright, const gchar **authors, const gchar *comments, const gchar *logo)
gnome_accelerators_sync(void)
gnome_animator_advance(GnomeAnimator *animator, gint num)
gnome_animator_append_frame_from_file(GnomeAnimator *animator, const gchar *name, gint x_offset, gint y_offset, guint32 interval)
gnome_animator_append_frame_from_file_at_size(GnomeAnimator *animator, const gchar *name, gint x_offset, gint y_offset, guint32 interval, guint width, guint height)
gnome_animator_append_frame_from_gnome_pixmap(GnomeAnimator *animator, GnomePixmap *pixmap, gint x_offset, gint y_offset, guint32 interval)
gnome_animator_append_frame_from_imlib(GnomeAnimator *animator, GdkImlibImage *image, gint x_offset, gint y_offset, guint32 interval)
gnome_animator_append_frame_from_imlib_at_size(GnomeAnimator *animator, GdkImlibImage *image, gint x_offset, gint y_offset, guint32 interval, guint width, guint height)
gnome_animator_append_frames_from_file(GnomeAnimator *animator, const gchar *name, gint x_offset, gint y_offset, guint32 interval, gint x_unit)
gnome_animator_append_frames_from_file_at_size(GnomeAnimator *animator, const gchar *name, gint x_offset, gint y_offset, guint32 interval, gint x_unit, guint width, guint height)
gnome_animator_append_frames_from_imlib(GnomeAnimator *animator, GdkImlibImage *image, gint x_offset, gint y_offset, guint32 interval, gint x_unit)
gnome_animator_append_frames_from_imlib_at_size(GnomeAnimator *animator, GdkImlibImage *image, gint x_offset, gint y_offset, guint32 interval, gint x_unit, guint width, guint height)
gnome_animator_get_current_frame_number(GnomeAnimator *animator)
gnome_animator_get_loop_type(GnomeAnimator *animator)
gnome_animator_get_playback_direction(GnomeAnimator *animator)
gnome_animator_get_playback_speed(GnomeAnimator *animator)
gnome_animator_get_status(GnomeAnimator *animator)
gnome_animator_get_type(void)
gnome_animator_goto_frame(GnomeAnimator *animator, guint frame_number)
gnome_animator_new_with_size(guint width, guint height)
gnome_animator_set_loop_type(GnomeAnimator *animator, GnomeAnimatorLoopType loop_type)
gnome_animator_set_playback_direction(GnomeAnimator *animator, gint playback_direction)
gnome_animator_set_playback_speed(GnomeAnimator *animator, gdouble speed)
gnome_animator_start(GnomeAnimator *animator)
gnome_animator_stop(GnomeAnimator *animator)
gnome_app_add_dock_item(GnomeApp *app, GnomeDockItem *item, GnomeDockPlacement placement, gint band_num, gint band_position, gint offset)
gnome_app_add_docked(GnomeApp *app, GtkWidget *widget, const gchar *name, GnomeDockItemBehavior behavior, GnomeDockPlacement placement, gint band_num, gint band_position, gint offset)
gnome_app_add_toolbar(GnomeApp *app, GtkToolbar *toolbar, const gchar *name, GnomeDockItemBehavior behavior, GnomeDockPlacement placement, gint band_num, gint band_position, gint offset)
gnome_app_construct(GnomeApp *app, const gchar *appname, const gchar *title)
gnome_app_create_menus(GnomeApp *app, GnomeUIInfo *uiinfo)
gnome_app_create_menus_custom(GnomeApp *app, GnomeUIInfo *uiinfo, GnomeUIBuilderData *uibdata)
gnome_app_create_menus_interp(GnomeApp *app, GnomeUIInfo *uiinfo, GtkCallbackMarshal relay_func, gpointer data, GtkDestroyNotify destroy_func)
gnome_app_create_menus_with_data(GnomeApp *app, GnomeUIInfo *uiinfo, gpointer user_data)
gnome_app_create_toolbar(GnomeApp *app, GnomeUIInfo *uiinfo)
gnome_app_create_toolbar_custom(GnomeApp *app, GnomeUIInfo *uiinfo, GnomeUIBuilderData *uibdata)
gnome_app_create_toolbar_interp(GnomeApp *app, GnomeUIInfo *uiinfo, GtkCallbackMarshal relay_func, gpointer data, GtkDestroyNotify destroy_func)
gnome_app_create_toolbar_with_data(GnomeApp *app, GnomeUIInfo *uiinfo, gpointer user_data)
gnome_app_enable_layout_config(GnomeApp *app, gboolean enable)
gnome_app_error(GnomeApp * app, const gchar * error)
gnome_app_fill_menu(GtkMenuShell *menu_shell, GnomeUIInfo *uiinfo, GtkAccelGroup *accel_group, gboolean uline_accels, gint pos)
gnome_app_fill_menu_custom(GtkMenuShell *menu_shell, GnomeUIInfo *uiinfo, GnomeUIBuilderData *uibdata, GtkAccelGroup *accel_group, gboolean uline_accels, gint pos)
gnome_app_fill_menu_with_data(GtkMenuShell *menu_shell, GnomeUIInfo *uiinfo, GtkAccelGroup *accel_group, gboolean uline_accels, gint pos, gpointer user_data)
gnome_app_fill_toolbar(GtkToolbar *toolbar, GnomeUIInfo *uiinfo, GtkAccelGroup *accel_group)
gnome_app_fill_toolbar_custom(GtkToolbar *toolbar, GnomeUIInfo *uiinfo, GnomeUIBuilderData *uibdata, GtkAccelGroup *accel_group)
gnome_app_fill_toolbar_with_data(GtkToolbar *toolbar, GnomeUIInfo *uiinfo, GtkAccelGroup *accel_group, gpointer user_data)
gnome_app_find_menu_pos(GtkWidget *parent, const gchar *path, gint *pos)
gnome_app_flash(GnomeApp * app, const gchar * flash)
gnome_app_get_dock(GnomeApp *app)
gnome_app_get_dock_item_by_name(GnomeApp *app, const gchar *name)
gnome_app_get_type(void)
gnome_app_helper_gettext(const gchar *string)
gnome_app_insert_menus(GnomeApp *app, const gchar *path, GnomeUIInfo *menuinfo)
gnome_app_insert_menus_custom(GnomeApp *app, const gchar *path, GnomeUIInfo *menuinfo, GnomeUIBuilderData *uibdata)
gnome_app_insert_menus_interp(GnomeApp *app, const gchar *path, GnomeUIInfo *menuinfo, GtkCallbackMarshal relay_func, gpointer data, GtkDestroyNotify destroy_func)
gnome_app_insert_menus_with_data(GnomeApp *app, const gchar *path, GnomeUIInfo *menuinfo, gpointer data)
gnome_app_install_appbar_menu_hints(GnomeAppBar* appbar, GnomeUIInfo* uiinfo)
gnome_app_install_menu_hints(GnomeApp *app, GnomeUIInfo *uinfo)
gnome_app_install_statusbar_menu_hints(GtkStatusbar* bar, GnomeUIInfo* uiinfo)
gnome_app_message(GnomeApp * app, const gchar * message)
gnome_app_new(const gchar *appname, const gchar *title)
gnome_app_ok_cancel(GnomeApp * app, const gchar * message, GnomeReplyCallback callback, gpointer data)
gnome_app_ok_cancel_modal(GnomeApp * app, const gchar * message, GnomeReplyCallback callback, gpointer data)
gnome_app_progress_done(GnomeAppProgressKey key)
gnome_app_progress_manual(GnomeApp * app, const gchar * description, GnomeAppProgressCancelFunc cancel_cb, gpointer data)
gnome_app_progress_timeout(GnomeApp * app, const gchar * description, guint32 interval, GnomeAppProgressFunc percentage_cb, GnomeAppProgressCancelFunc cancel_cb, gpointer data)
gnome_app_question(GnomeApp * app, const gchar * question, GnomeReplyCallback callback, gpointer data)
gnome_app_question_modal(GnomeApp * app, const gchar * question, GnomeReplyCallback callback, gpointer data)
gnome_app_remove_menu_range(GnomeApp *app, const gchar *path, gint start, gint items)
gnome_app_remove_menus(GnomeApp *app, const gchar *path, gint items)
gnome_app_request_password(GnomeApp * app, const gchar * prompt, GnomeStringCallback callback, gpointer data)
gnome_app_request_string(GnomeApp * app, const gchar * prompt, GnomeStringCallback callback, gpointer data)
gnome_app_set_contents(GnomeApp *app, GtkWidget *contents)
gnome_app_set_menus(GnomeApp *app, GtkMenuBar *menubar)
gnome_app_set_progress(GnomeAppProgressKey key, gdouble percent)
gnome_app_set_statusbar(GnomeApp *app, GtkWidget *statusbar)
gnome_app_set_statusbar_custom(GnomeApp *app, GtkWidget *container, GtkWidget *statusbar)
gnome_app_set_toolbar(GnomeApp *app, GtkToolbar *toolbar)
gnome_app_ui_configure_configurable(GnomeUIInfo* uiinfo)
gnome_app_warning(GnomeApp * app, const gchar * warning)
gnome_appbar_clear_prompt(GnomeAppBar * appbar)
gnome_appbar_clear_stack(GnomeAppBar * appbar)
gnome_appbar_construct(GnomeAppBar * ab, gboolean has_progress, gboolean has_status, GnomePreferencesType interactivity)
gnome_appbar_get_progress(GnomeAppBar * appbar)
gnome_appbar_get_response(GnomeAppBar * appbar)
gnome_appbar_get_type(void)
gnome_appbar_new(gboolean has_progress, gboolean has_status, GnomePreferencesType interactivity)
gnome_appbar_pop(GnomeAppBar * appbar)
gnome_appbar_push(GnomeAppBar * appbar, const gchar * status)
gnome_appbar_refresh(GnomeAppBar * appbar)
gnome_appbar_set_default(GnomeAppBar * appbar, const gchar * default_status)
gnome_appbar_set_progress(GnomeAppBar *appbar, gfloat percentage)
gnome_appbar_set_prompt(GnomeAppBar * appbar, const gchar * prompt, gboolean modal)
gnome_appbar_set_status(GnomeAppBar * appbar, const gchar * status)
gnome_button_can_default(GtkButton *button, gboolean can_default)
gnome_calculator_clear(GnomeCalculator *gc, const gboolean reset)
gnome_calculator_get_result
gnome_calculator_get_type(void)
gnome_calculator_new(void)
gnome_calculator_set(GnomeCalculator *gc, gdouble result)
gnome_canvas_bpath_def_art_finish(GnomeCanvasBpathDef *bpd)
gnome_canvas_bpath_def_closepath(GnomeCanvasBpathDef *bpd)
gnome_canvas_bpath_def_curveto(GnomeCanvasBpathDef *bpd, double x1, double y1, double x2, double y2, double x3, double y3)
gnome_canvas_bpath_def_free(GnomeCanvasBpathDef *bpd)
gnome_canvas_bpath_def_lineto(GnomeCanvasBpathDef *bpd, double x, double y)
gnome_canvas_bpath_def_moveto(GnomeCanvasBpathDef *bpd, double x, double y)
gnome_canvas_bpath_def_new(void)
gnome_canvas_bpath_def_new_from(ArtBpath *bpath)
gnome_canvas_bpath_def_ref(GnomeCanvasBpathDef *bpd)
gnome_canvas_bpath_def_unref
gnome_canvas_bpath_get_def(GnomeCanvasBpath *object)
gnome_canvas_bpath_get_type(void)
gnome_canvas_buf_ensure_buf(GnomeCanvasBuf *buf)
gnome_canvas_c2w(GnomeCanvas *canvas, int cx, int cy, double *wx, double *wy)
gnome_canvas_cap_gdk_to_art(GdkCapStyle gdk_cap)
gnome_canvas_destroy_image(GdkImlibImage *image)
gnome_canvas_ellipse_get_type(void)
gnome_canvas_get_butt_points(double x1, double y1, double x2, double y2, double width, int project, double *bx1, double *by1, double *bx2, double *by2)
gnome_canvas_get_color(GnomeCanvas *canvas, const char *spec, GdkColor *color)
gnome_canvas_get_color_pixel(GnomeCanvas *canvas, guint rgba)
gnome_canvas_get_item_at(GnomeCanvas *canvas, double x, double y)
gnome_canvas_get_miter_points(double x1, double y1, double x2, double y2, double x3, double y3, double width, double *mx1, double *my1, double *mx2, double *my2)
gnome_canvas_get_scroll_offsets(GnomeCanvas *canvas, int *cx, int *cy)
gnome_canvas_get_scroll_region(GnomeCanvas *canvas, double *x1, double *y1, double *x2, double *y2)
gnome_canvas_get_type(void)
gnome_canvas_group_child_bounds(GnomeCanvasGroup *group, GnomeCanvasItem *item)
gnome_canvas_group_get_type(void)
gnome_canvas_hacktext_get_type(void)
gnome_canvas_image_get_type(void)
gnome_canvas_item_affine_absolute(GnomeCanvasItem *item, const double affine[6])
gnome_canvas_item_affine_relative(GnomeCanvasItem *item, const double affine[6])
gnome_canvas_item_construct(GnomeCanvasItem *item, GnomeCanvasGroup *parent, const gchar *first_arg_name, va_list args)
gnome_canvas_item_constructv(GnomeCanvasItem *item, GnomeCanvasGroup *parent, guint nargs, GtkArg *args)
gnome_canvas_item_get_bounds(GnomeCanvasItem *item, double *x1, double *y1, double *x2, double *y2)
gnome_canvas_item_get_type(void)
gnome_canvas_item_grab(GnomeCanvasItem *item, unsigned int event_mask, GdkCursor *cursor, guint32 etime)
gnome_canvas_item_grab_focus(GnomeCanvasItem *item)
gnome_canvas_item_hide(GnomeCanvasItem *item)
gnome_canvas_item_i2c_affine(GnomeCanvasItem *item, double affine[6])
gnome_canvas_item_i2w(GnomeCanvasItem *item, double *x, double *y)
gnome_canvas_item_i2w_affine(GnomeCanvasItem *item, double affine[6])
gnome_canvas_item_lower(GnomeCanvasItem *item, int positions)
gnome_canvas_item_lower_to_bottom(GnomeCanvasItem *item)
gnome_canvas_item_move(GnomeCanvasItem *item, double dx, double dy)
gnome_canvas_item_new(GnomeCanvasGroup *parent, GtkType type, const gchar *first_arg_name, ...)
gnome_canvas_item_newv(GnomeCanvasGroup *parent, GtkType type, guint nargs, GtkArg *args)
gnome_canvas_item_raise(GnomeCanvasItem *item, int positions)
gnome_canvas_item_raise_to_top(GnomeCanvasItem *item)
gnome_canvas_item_reparent(GnomeCanvasItem *item, GnomeCanvasGroup *new_group)
gnome_canvas_item_request_redraw_svp(GnomeCanvasItem *item, const ArtSVP *svp)
gnome_canvas_item_request_update(GnomeCanvasItem *item)
gnome_canvas_item_reset_bounds(GnomeCanvasItem *item)
gnome_canvas_item_rotate(GnomeCanvasItem *item, double x, double y, double angle)
gnome_canvas_item_scale(GnomeCanvasItem *item, double x, double y, double scale_x, double scale_y)
gnome_canvas_item_set(GnomeCanvasItem *item, const gchar *first_arg_name, ...)
gnome_canvas_item_set_valist(GnomeCanvasItem *item, const gchar *first_arg_name, va_list args)
gnome_canvas_item_setv(GnomeCanvasItem *item, guint nargs, GtkArg *args)
gnome_canvas_item_show(GnomeCanvasItem *item)
gnome_canvas_item_ungrab(GnomeCanvasItem *item, guint32 etime)
gnome_canvas_item_update_svp(GnomeCanvasItem *item, ArtSVP **p_svp, ArtSVP *new_svp)
gnome_canvas_item_update_svp_clip(GnomeCanvasItem *item, ArtSVP **p_svp, ArtSVP *new_svp, ArtSVP *clip_svp)
gnome_canvas_item_w2i(GnomeCanvasItem *item, double *x, double *y)
gnome_canvas_join_gdk_to_art(GdkJoinStyle gdk_join)
gnome_canvas_line_get_type(void)
gnome_canvas_load_alpha(const gchar *file)
gnome_canvas_new(void)
gnome_canvas_new_aa(void)
gnome_canvas_pixbuf_get_type(void)
gnome_canvas_points_free(GnomeCanvasPoints *points)
gnome_canvas_points_new(int num_points)
gnome_canvas_points_ref(GnomeCanvasPoints *points)
gnome_canvas_points_unref
gnome_canvas_polygon_get_type(void)
gnome_canvas_polygon_to_point(double *poly, int num_points, double x, double y)
gnome_canvas_re_get_type(void)
gnome_canvas_rect_get_type(void)
gnome_canvas_render_svp(GnomeCanvasBuf *buf, ArtSVP *svp, guint32 rgba)
gnome_canvas_request_redraw(GnomeCanvas *canvas, int x1, int y1, int x2, int y2)
gnome_canvas_request_redraw_uta(GnomeCanvas *canvas, ArtUta *uta)
gnome_canvas_root(GnomeCanvas *canvas)
gnome_canvas_scroll_to(GnomeCanvas *canvas, int cx, int cy)
gnome_canvas_set_pixels_per_unit(GnomeCanvas *canvas, double n)
gnome_canvas_set_scroll_region(GnomeCanvas *canvas, double x1, double y1, double x2, double y2)
gnome_canvas_set_stipple_origin(GnomeCanvas *canvas, GdkGC *gc)
gnome_canvas_text_get_type(void)
gnome_canvas_update_bbox(GnomeCanvasItem *item, int x1, int y1, int x2, int y2)
gnome_canvas_update_now(GnomeCanvas *canvas)
gnome_canvas_update_svp(GnomeCanvas *canvas, ArtSVP **p_svp, ArtSVP *new_svp)
gnome_canvas_update_svp_clip(GnomeCanvas *canvas, ArtSVP **p_svp, ArtSVP *new_svp, ArtSVP *clip_svp)
gnome_canvas_w2c(GnomeCanvas *canvas, double wx, double wy, int *cx, int *cy)
gnome_canvas_w2c_affine(GnomeCanvas *canvas, double affine[6])
gnome_canvas_w2c_d(GnomeCanvas *canvas, double wx, double wy, double *cx, double *cy)
gnome_canvas_widget_get_type(void)
gnome_canvas_window_to_world(GnomeCanvas *canvas, double winx, double winy, double *worldx, double *worldy)
gnome_canvas_world_to_window(GnomeCanvas *canvas, double worldx, double worldy, double *winx, double *winy)
gnome_client_add_static_arg(GnomeClient *client, ...)
gnome_client_connect(GnomeClient *client)
gnome_client_disable_master_connection(void)
gnome_client_disconnect(GnomeClient *client)
gnome_client_flush(GnomeClient *client)
gnome_client_get_config_prefix(GnomeClient *client)
gnome_client_get_flags(GnomeClient *client)
gnome_client_get_global_config_prefix(GnomeClient *client)
gnome_client_get_id(GnomeClient *client)
gnome_client_get_previous_id(GnomeClient *client)
gnome_client_get_type(void)
gnome_client_init(void)
gnome_client_new(void)
gnome_client_new_without_connection(void)
gnome_client_request_interaction(GnomeClient *client, GnomeDialogType dialog, GnomeInteractFunction func, gpointer client_data)
gnome_client_request_interaction_interp(GnomeClient *client, GnomeDialogType dialog, GtkCallbackMarshal func, gpointer data, GtkDestroyNotify destroy)
gnome_client_request_phase_2(GnomeClient *client)
gnome_client_request_save(GnomeClient *client, GnomeSaveStyle save_style, gboolean shutdown, GnomeInteractStyle interact_style, gboolean fast, gboolean global)
gnome_client_save_any_dialog(GnomeClient *client, GnomeDialog *dialog)
gnome_client_save_error_dialog(GnomeClient *client, GnomeDialog *dialog)
gnome_client_set_clone_command(GnomeClient *client, gint argc, gchar *argv[])
gnome_client_set_current_directory(GnomeClient *client, const gchar *dir)
gnome_client_set_discard_command(GnomeClient *client, gint argc, gchar *argv[])
gnome_client_set_environment(GnomeClient *client, const gchar *name, const gchar *value)
gnome_client_set_global_config_prefix(GnomeClient *client, const gchar* prefix)
gnome_client_set_id(GnomeClient *client, const gchar *client_id)
gnome_client_set_priority(GnomeClient *client, guint priority)
gnome_client_set_process_id(GnomeClient *client, pid_t pid)
gnome_client_set_program(GnomeClient *client, const gchar *program)
gnome_client_set_resign_command(GnomeClient *client, gint argc, gchar *argv[])
gnome_client_set_restart_command(GnomeClient *client, gint argc, gchar *argv[])
gnome_client_set_restart_style(GnomeClient *client, GnomeRestartStyle style)
gnome_client_set_shutdown_command(GnomeClient *client, gint argc, gchar *argv[])
gnome_client_set_user_id(GnomeClient *client, const gchar *user_id)
gnome_cloned_client(void)
gnome_color_picker_get_d(GnomeColorPicker *cp, gdouble *r, gdouble *g, gdouble *b, gdouble *a)
gnome_color_picker_get_i16(GnomeColorPicker *cp, gushort *r, gushort *g, gushort *b, gushort *a)
gnome_color_picker_get_i8(GnomeColorPicker *cp, guint8 *r, guint8 *g, guint8 *b, guint8 *a)
gnome_color_picker_get_type(void)
gnome_color_picker_new(void)
gnome_color_picker_set_d(GnomeColorPicker *cp, gdouble r, gdouble g, gdouble b, gdouble a)
gnome_color_picker_set_dither(GnomeColorPicker *cp, gboolean dither)
gnome_color_picker_set_i16(GnomeColorPicker *cp, gushort r, gushort g, gushort b, gushort a)
gnome_color_picker_set_i8(GnomeColorPicker *cp, guint8 r, guint8 g, guint8 b, guint8 a)
gnome_color_picker_set_title(GnomeColorPicker *cp, const gchar *title)
gnome_color_picker_set_use_alpha(GnomeColorPicker *cp, gboolean use_alpha)
gnome_config_assemble_vector(int argc, const char *const argv [])
gnome_config_clean_file
gnome_config_clean_key
gnome_config_clean_section
gnome_config_drop_all(void)
gnome_config_drop_file
gnome_config_file(const char *filename)
gnome_config_get_bool
gnome_config_get_bool_with_default
gnome_config_get_float
gnome_config_get_float_with_default
gnome_config_get_int
gnome_config_get_int_with_default
gnome_config_get_real_path
gnome_config_get_string
gnome_config_get_string_with_default
gnome_config_get_translated_string
gnome_config_get_translated_string_with_default
gnome_config_get_vector
gnome_config_get_vector_with_default
gnome_config_has_section
gnome_config_init_iterator
gnome_config_init_iterator_sections
gnome_config_iterator_next(void *iterator_handle, char **key, char **value)
gnome_config_make_vector(const char *string, int *argcp, char ***argvp)
gnome_config_pop_prefix(void)
gnome_config_private_clean_file
gnome_config_private_clean_key
gnome_config_private_clean_section
gnome_config_private_drop_file
gnome_config_private_get_bool
gnome_config_private_get_bool_with_default
gnome_config_private_get_float
gnome_config_private_get_float_with_default
gnome_config_private_get_int
gnome_config_private_get_int_with_default
gnome_config_private_get_real_path
gnome_config_private_get_string
gnome_config_private_get_string_with_default
gnome_config_private_get_translated_string
gnome_config_private_get_translated_string_with_default
gnome_config_private_get_vector
gnome_config_private_get_vector_with_default
gnome_config_private_has_section
gnome_config_private_init_iterator
gnome_config_private_init_iterator_sections
gnome_config_private_set_bool
gnome_config_private_set_float
gnome_config_private_set_int
gnome_config_private_set_string
gnome_config_private_set_translated_string
gnome_config_private_set_vector
gnome_config_private_sync_file
gnome_config_push_prefix(const char *path)
gnome_config_set_bool
gnome_config_set_float
gnome_config_set_int
gnome_config_set_set_handler(void(*func)(void *),void *data)
gnome_config_set_string
gnome_config_set_sync_handler(void(*func)(void *),void *data)
gnome_config_set_translated_string
gnome_config_set_vector
gnome_config_sync(void)
gnome_config_sync_file
gnome_datadir_file(const char *filename)
gnome_date_edit_get_date(GnomeDateEdit *gde)
gnome_date_edit_get_flags(GnomeDateEdit *gde)
gnome_date_edit_get_type(void)
gnome_date_edit_new(time_t the_time, int show_time, int use_24_format)
gnome_date_edit_new_flags(time_t the_time, GnomeDateEditFlags flags)
gnome_date_edit_set_flags(GnomeDateEdit *gde, GnomeDateEditFlags flags)
gnome_date_edit_set_popup_range(GnomeDateEdit *gde, int low_hour, int up_hour)
gnome_date_edit_set_time(GnomeDateEdit *gde, time_t the_time)
gnome_dentry_edit_child1
gnome_dentry_edit_child2
gnome_dentry_edit_clear(GnomeDEntryEdit * dee)
gnome_dentry_edit_get_dentry(GnomeDEntryEdit * dee)
gnome_dentry_edit_get_icon(GnomeDEntryEdit * dee)
gnome_dentry_edit_get_name(GnomeDEntryEdit * dee)
gnome_dentry_edit_get_type(void)
gnome_dentry_edit_load_file(GnomeDEntryEdit * dee, const gchar * path)
gnome_dentry_edit_new(void)
gnome_dentry_edit_new_notebook(GtkNotebook * notebook)
gnome_dentry_edit_set_dentry(GnomeDEntryEdit * dee, GnomeDesktopEntry * dentry)
gnome_dentry_get_comment_entry(GnomeDEntryEdit * dee)
gnome_dentry_get_dentry(GnomeDEntryEdit * dee)
gnome_dentry_get_doc_entry(GnomeDEntryEdit * dee)
gnome_dentry_get_exec_entry(GnomeDEntryEdit * dee)
gnome_dentry_get_icon_entry(GnomeDEntryEdit * dee)
gnome_dentry_get_name_entry(GnomeDEntryEdit * dee)
gnome_dentry_get_tryexec_entry(GnomeDEntryEdit * dee)
gnome_desktop_entry_copy(GnomeDesktopEntry * source)
gnome_desktop_entry_destroy(GnomeDesktopEntry *item)
gnome_desktop_entry_free(GnomeDesktopEntry *item)
gnome_desktop_entry_free_i18n_list(GList *list)
gnome_desktop_entry_get_i18n_list(GnomeDesktopEntry *item)
gnome_desktop_entry_launch(GnomeDesktopEntry *item)
gnome_desktop_entry_launch_with_args(GnomeDesktopEntry *item, int the_argc, char *the_argv[])
gnome_desktop_entry_load(const char *file)
gnome_desktop_entry_load_flags(const char *file, int clean_from_memory_after_load)
gnome_desktop_entry_load_flags_conditional(const char *file, int clean_from_memory_after_load, int unconditional)
gnome_desktop_entry_load_unconditional(const char *file)
gnome_desktop_entry_save(GnomeDesktopEntry *dentry)
gnome_desktop_entry_set_i18n_list(GnomeDesktopEntry *item, GList *list)
gnome_dialog_append_button(GnomeDialog * dialog, const gchar * name)
gnome_dialog_append_button_with_pixmap(GnomeDialog * dialog, const gchar * name, const gchar * pixmap)
gnome_dialog_append_buttons(GnomeDialog * dialog, const gchar * first, ...)
gnome_dialog_append_buttons_with_pixmaps(GnomeDialog * dialog, const gchar **names, const gchar **pixmaps)
gnome_dialog_append_buttonsv(GnomeDialog * dialog, const gchar **buttons)
gnome_dialog_button_connect(GnomeDialog *dialog, gint button, GtkSignalFunc callback, gpointer data)
gnome_dialog_button_connect_object(GnomeDialog *dialog, gint button, GtkSignalFunc callback, GtkObject * obj)
gnome_dialog_close(GnomeDialog * dialog)
gnome_dialog_close_hides(GnomeDialog * dialog, gboolean just_hide)
gnome_dialog_construct(GnomeDialog * dialog, const gchar * title, va_list ap)
gnome_dialog_constructv(GnomeDialog * dialog, const gchar * title, const gchar **buttons)
gnome_dialog_editable_enters(GnomeDialog * dialog, GtkEditable * editable)
gnome_dialog_get_type(void)
gnome_dialog_new(const gchar * title, ...)
gnome_dialog_newv(const gchar * title, const gchar **buttons)
gnome_dialog_run(GnomeDialog *dialog)
gnome_dialog_run_and_close(GnomeDialog *dialog)
gnome_dialog_set_accelerator(GnomeDialog * dialog, gint button, const guchar accelerator_key, guint8 accelerator_mods)
gnome_dialog_set_close(GnomeDialog * dialog, gboolean click_closes)
gnome_dialog_set_default(GnomeDialog *dialog, gint button)
gnome_dialog_set_parent(GnomeDialog * dialog, GtkWindow * parent)
gnome_dialog_set_sensitive(GnomeDialog *dialog, gint button, gboolean setting)
gnome_display_font_height(GnomeDisplayFont *gdf)
gnome_dns_abort(guint32 tag)
gnome_dns_init(gint server_count)
gnome_dns_lookup(const char *hostname, void(* callback)(guint32 ip_addr, void *callback_data), void *callback_data)
gnome_dock_add_floating_item(GnomeDock *dock, GnomeDockItem *widget, gint x, gint y, GtkOrientation orientation)
gnome_dock_add_from_layout(GnomeDock *dock, GnomeDockLayout *layout)
gnome_dock_add_item(GnomeDock *dock, GnomeDockItem *item, GnomeDockPlacement placement, guint band_num, gint position, guint offset, gboolean in_new_band)
gnome_dock_allow_floating_items
gnome_dock_band_append(GnomeDockBand *band, GtkWidget *child, guint offset)
gnome_dock_band_drag_begin(GnomeDockBand *band, GnomeDockItem *item)
gnome_dock_band_drag_end(GnomeDockBand *band, GnomeDockItem *item)
gnome_dock_band_drag_to(GnomeDockBand *band, GnomeDockItem *item, gint x, gint y)
gnome_dock_band_get_child_offset(GnomeDockBand *band, GtkWidget *child)
gnome_dock_band_get_item_by_name(GnomeDockBand *band, const char *name, guint *position_return, guint *offset_return)
gnome_dock_band_get_num_children(GnomeDockBand *band)
gnome_dock_band_get_orientation(GnomeDockBand *band)
gnome_dock_band_get_type(void)
gnome_dock_band_insert(GnomeDockBand *band, GtkWidget *child, guint offset, gint position)
gnome_dock_band_layout_add(GnomeDockBand *band, GnomeDockLayout *layout, GnomeDockPlacement placement, guint band_num)
gnome_dock_band_move_child(GnomeDockBand *band, GList *old_child, guint new_num)
gnome_dock_band_new(void)
gnome_dock_band_prepend(GnomeDockBand *band, GtkWidget *child, guint offset)
gnome_dock_band_set_child_offset(GnomeDockBand *band, GtkWidget *child, guint offset)
gnome_dock_band_set_orientation(GnomeDockBand *band, GtkOrientation orientation)
gnome_dock_get_client_area(GnomeDock *dock)
gnome_dock_get_item_by_name(GnomeDock *dock, const gchar *name, GnomeDockPlacement *placement_return, guint *num_band_return, guint *band_position_return, guint *offset_return)
gnome_dock_get_layout(GnomeDock *dock)
gnome_dock_get_type(void)
gnome_dock_item_attach(GnomeDockItem *item, GtkWidget *parent, gint x, gint y)
gnome_dock_item_construct(GnomeDockItem *new_dock_item, const gchar *name, GnomeDockItemBehavior behavior)
gnome_dock_item_detach(GnomeDockItem *item, gint x, gint y)
gnome_dock_item_drag_floating(GnomeDockItem *item, gint x, gint y)
gnome_dock_item_get_behavior(GnomeDockItem *dock_item)
gnome_dock_item_get_child(GnomeDockItem *dock_item)
gnome_dock_item_get_floating_position
gnome_dock_item_get_name(GnomeDockItem *dock_item)
gnome_dock_item_get_orientation(GnomeDockItem *dock_item)
gnome_dock_item_get_shadow_type(GnomeDockItem *dock_item)
gnome_dock_item_get_type(void)
gnome_dock_item_grab_pointer(GnomeDockItem *item)
gnome_dock_item_handle_size_request
gnome_dock_item_new(const gchar *name, GnomeDockItemBehavior behavior)
gnome_dock_item_set_orientation(GnomeDockItem *dock_item, GtkOrientation orientation)
gnome_dock_item_set_shadow_type(GnomeDockItem *dock_item, GtkShadowType type)
gnome_dock_layout_add_floating_item
gnome_dock_layout_add_item(GnomeDockLayout *layout, GnomeDockItem *item, GnomeDockPlacement placement, gint band_num, gint band_position, gint offset)
gnome_dock_layout_add_to_dock
gnome_dock_layout_create_string
gnome_dock_layout_get_item(GnomeDockLayout *layout, GnomeDockItem *item)
gnome_dock_layout_get_item_by_name
gnome_dock_layout_get_type(void)
gnome_dock_layout_new(void)
gnome_dock_layout_parse_string
gnome_dock_layout_remove_item
gnome_dock_layout_remove_item_by_name
gnome_dock_new(void)
gnome_dock_set_client_area(GnomeDock *dock, GtkWidget *widget)
gnome_druid_append_page(GnomeDruid *druid, GnomeDruidPage *page)
gnome_druid_get_type(void)
gnome_druid_insert_page(GnomeDruid *druid, GnomeDruidPage *back_page, GnomeDruidPage *page)
gnome_druid_new(void)
gnome_druid_page_back(GnomeDruidPage *druid_page)
gnome_druid_page_cancel(GnomeDruidPage *druid_page)
gnome_druid_page_finish(GnomeDruidPage *druid_page)
gnome_druid_page_finish_get_type(void)
gnome_druid_page_finish_new(void)
gnome_druid_page_finish_new_with_vals(const gchar *title, const gchar* text, GdkImlibImage *logo, GdkImlibImage *watermark)
gnome_druid_page_finish_set_bg_color(GnomeDruidPageFinish *druid_page_finish, GdkColor *color)
gnome_druid_page_finish_set_logo(GnomeDruidPageFinish *druid_page_finish, GdkImlibImage *logo_image)
gnome_druid_page_finish_set_logo_bg_color(GnomeDruidPageFinish *druid_page_finish, GdkColor *color)
gnome_druid_page_finish_set_text(GnomeDruidPageFinish *druid_page_finish, const gchar *text)
gnome_druid_page_finish_set_text_color(GnomeDruidPageFinish *druid_page_finish, GdkColor *color)
gnome_druid_page_finish_set_textbox_color(GnomeDruidPageFinish *druid_page_finish, GdkColor *color)
gnome_druid_page_finish_set_title(GnomeDruidPageFinish *druid_page_finish, const gchar *title)
gnome_druid_page_finish_set_title_color(GnomeDruidPageFinish *druid_page_finish, GdkColor *color)
gnome_druid_page_finish_set_watermark(GnomeDruidPageFinish *druid_page_finish, GdkImlibImage *watermark)
gnome_druid_page_get_type(void)
gnome_druid_page_next(GnomeDruidPage *druid_page)
gnome_druid_page_prepare(GnomeDruidPage *druid_page)
gnome_druid_page_standard_get_type(void)
gnome_druid_page_standard_new(void)
gnome_druid_page_standard_new_with_vals(const gchar *title, GdkImlibImage *logo)
gnome_druid_page_standard_set_bg_color(GnomeDruidPageStandard *druid_page_standard, GdkColor *color)
gnome_druid_page_standard_set_logo(GnomeDruidPageStandard *druid_page_standard, GdkImlibImage *logo_image)
gnome_druid_page_standard_set_logo_bg_color(GnomeDruidPageStandard *druid_page_standard, GdkColor *color)
gnome_druid_page_standard_set_title(GnomeDruidPageStandard *druid_page_standard, const gchar *title)
gnome_druid_page_standard_set_title_color(GnomeDruidPageStandard *druid_page_standard, GdkColor *color)
gnome_druid_page_start_get_type(void)
gnome_druid_page_start_new(void)
gnome_druid_page_start_new_with_vals(const gchar *title, const gchar* text, GdkImlibImage *logo, GdkImlibImage *watermark)
gnome_druid_page_start_set_bg_color(GnomeDruidPageStart *druid_page_start, GdkColor *color)
gnome_druid_page_start_set_logo(GnomeDruidPageStart *druid_page_start, GdkImlibImage *logo_image)
gnome_druid_page_start_set_logo_bg_color(GnomeDruidPageStart *druid_page_start, GdkColor *color)
gnome_druid_page_start_set_text(GnomeDruidPageStart *druid_page_start, const gchar *text)
gnome_druid_page_start_set_text_color(GnomeDruidPageStart *druid_page_start, GdkColor *color)
gnome_druid_page_start_set_textbox_color(GnomeDruidPageStart *druid_page_start, GdkColor *color)
gnome_druid_page_start_set_title(GnomeDruidPageStart *druid_page_start, const gchar *title)
gnome_druid_page_start_set_title_color(GnomeDruidPageStart *druid_page_start, GdkColor *color)
gnome_druid_page_start_set_watermark(GnomeDruidPageStart *druid_page_start, GdkImlibImage *watermark)
gnome_druid_prepend_page(GnomeDruid *druid, GnomeDruidPage *page)
gnome_druid_set_buttons_sensitive(GnomeDruid *druid, gboolean back_sensitive, gboolean next_sensitive, gboolean cancel_sensitive)
gnome_druid_set_page(GnomeDruid *druid, GnomeDruidPage *page)
gnome_druid_set_show_finish(GnomeDruid *druid, gboolean show_finish)
gnome_entry_append_history(GnomeEntry *gentry, gint save, const gchar *text)
gnome_entry_get_type(void)
gnome_entry_gtk_entry(GnomeEntry *gentry)
gnome_entry_load_history(GnomeEntry *gentry)
gnome_entry_new(const gchar *history_id)
gnome_entry_prepend_history(GnomeEntry *gentry, gint save, const gchar *text)
gnome_entry_save_history(GnomeEntry *gentry)
gnome_entry_set_history_id(GnomeEntry *gentry, const gchar *history_id)
gnome_entry_set_max_saved(GnomeEntry *gentry, guint max_saved)
gnome_error_dialog(const gchar * error)
gnome_error_dialog_parented(const gchar * error, GtkWindow * parent)
gnome_execute_async(const char *dir, int argc, char * const argv[])
gnome_execute_async_fds(const char *dir, int argc, char * const argv[], gboolean close_fds)
gnome_execute_async_with_env(const char *dir, int argc, char * const argv[], int envc, char * const envv[])
gnome_execute_async_with_env_fds(const char *dir, int argc, char * const argv[], int envc, char * const envv[], gboolean close_fds)
gnome_execute_shell(const char *dir, const char *commandline)
gnome_execute_shell_fds(const char *dir, const char *commandline, gboolean close_fds)
gnome_factory_H
gnome_file_convert(const char *filename, const char *fromtype, const char *totype)
gnome_file_convert_fd(gint fd, const char *fromtype, const char *totype)
gnome_file_entry_construct(GnomeFileEntry *fentry, const char *history_id, const char *browse_dialog_title)
gnome_file_entry_get_full_path(GnomeFileEntry *fentry, gboolean file_must_exist)
gnome_file_entry_get_type(void)
gnome_file_entry_gnome_entry(GnomeFileEntry *fentry)
gnome_file_entry_gtk_entry(GnomeFileEntry *fentry)
gnome_file_entry_new(const char *history_id, const char *browse_dialog_title)
gnome_file_entry_set_default_path(GnomeFileEntry *fentry, const char *path)
gnome_file_entry_set_directory(GnomeFileEntry *fentry, gboolean directory_entry)
gnome_file_entry_set_modal(GnomeFileEntry *fentry, gboolean is_modal)
gnome_file_entry_set_title(GnomeFileEntry *fentry, const char *browse_dialog_title)
gnome_font_family_list(GnomeFontClass *klass)
gnome_font_family_list_free(GList *fontlist)
gnome_font_get_ascender(const GnomeFont *font)
gnome_font_get_descender(const GnomeFont *font)
gnome_font_get_display_font(GnomeFont *font)
gnome_font_get_full_name(const GnomeFont *font)
gnome_font_get_glyph(const GnomeFont *font, int unicode)
gnome_font_get_glyph_name(const GnomeFont *font)
gnome_font_get_name(const GnomeFont *font)
gnome_font_get_pfa(const GnomeFont *font)
gnome_font_get_type(void)
gnome_font_get_underline_position(const GnomeFont *font)
gnome_font_get_underline_thickness(const GnomeFont *font)
gnome_font_get_width(const GnomeFont *font, int ch)
gnome_font_get_width_string(const GnomeFont *font, const char *s)
gnome_font_get_width_string_n(const GnomeFont *font, const char *s, int n)
gnome_font_kern(const GnomeFont *font, int glyph1, int glyph2)
gnome_font_list(GnomeFontClass *klass)
gnome_font_list_free(GList *fontlist)
gnome_font_new(const char *name, double size)
gnome_font_new_closest(const char *family_name, GnomeFontWeight weight, gboolean italic, double size)
gnome_font_new_from_full_name(const char *string)
gnome_font_picker_fi_set_show_size(GnomeFontPicker *gfp, gboolean show_size)
gnome_font_picker_fi_set_use_font_in_label(GnomeFontPicker *gfp, gboolean use_font_in_label, gint size)
gnome_font_picker_get_font(GnomeFontPicker *gfp)
gnome_font_picker_get_font_name(GnomeFontPicker *gfp)
gnome_font_picker_get_mode(GnomeFontPicker *gfp)
gnome_font_picker_get_preview_text(GnomeFontPicker *gfp)
gnome_font_picker_get_type(void)
gnome_font_picker_new(void)
gnome_font_picker_set_font_name(GnomeFontPicker *gfp, const gchar *fontname)
gnome_font_picker_set_mode(GnomeFontPicker *gfp, GnomeFontPickerMode mode)
gnome_font_picker_set_preview_text(GnomeFontPicker *gfp, const gchar *text)
gnome_font_picker_set_title(GnomeFontPicker *gfp, const gchar *title)
gnome_font_picker_uw_set_widget(GnomeFontPicker *gfp, GtkWidget *widget)
gnome_font_select(void)
gnome_font_select_with_default(const gchar *)
gnome_font_selection_dialog_get_font(GnomeFontSelectionDialog *fsd)
gnome_font_selection_dialog_get_type(void)
gnome_font_selection_dialog_new(const gchar *title)
gnome_font_selection_dialog_set_font(GnomeFontSelectionDialog *fsd, GnomeFont *font)
gnome_font_selection_get_font(GnomeFontSelection *fontsel)
gnome_font_selection_get_type(void)
gnome_font_selection_new(void)
gnome_font_selection_set_font(GnomeFontSelection *fontsel, GnomeFont *font)
gnome_font_selector_get_selected(GnomeFontSelector *text_tool)
gnome_font_selector_get_type(void)
gnome_font_selector_new(void)
gnome_font_unsized_closest(const char *family_name, GnomeFontWeight weight, gboolean italic)
gnome_font_unsized_get_glyph(const GnomeFontUnsized *font, int unicode)
gnome_font_unsized_get_glyph_name(const GnomeFontUnsized *font)
gnome_font_unsized_get_name(const GnomeFontUnsized *font)
gnome_font_unsized_get_pfa(const GnomeFontUnsized *font)
gnome_font_unsized_get_width(const GnomeFontUnsized *font, int ch)
gnome_font_unsized_kern(const GnomeFontUnsized *font, int glyph1, int glyph2)
gnome_font_weight_to_string(GnomeFontWeight gfw)
gnome_geometry_string(GdkWindow * window)
gnome_get_display_font(const char *family, GnomeFontWeight weight, gboolean italic, double points, double scale)
gnome_guru_append_page(GnomeGuru * guru, const gchar * name, GtkWidget * widget)
gnome_guru_back_set_sensitive(GnomeGuru * guru, gboolean sensitivity)
gnome_guru_construct(GnomeGuru * guru, const gchar * name, GtkWidget * graphic, GnomeDialog * dialog)
gnome_guru_current_page(GnomeGuru * guru)
gnome_guru_get_type(void)
gnome_guru_new(const gchar * name, GtkWidget * graphic, GnomeDialog * dialog)
gnome_guru_next_set_sensitive(GnomeGuru * guru, gboolean sensitivity)
gnome_help_display(void *ignore, GnomeHelpMenuEntry *ref)
gnome_help_file_find_file(gchar *app, gchar *path)
gnome_help_file_path(gchar *app, gchar *path)
gnome_help_goto(void *ignore, gchar *file)
gnome_help_pbox_display(void *ignore, gint page_num, GnomeHelpMenuEntry *ref)
gnome_help_pbox_goto(void *ignore, int ignore2, GnomeHelpMenuEntry *ref)
gnome_history_free_recently_used_list(GList *alist)
gnome_history_get_recently_used(void)
gnome_history_recently_used(char *filename, char *filetype, char *creator, char *desc)
gnome_href_get_label(GnomeHRef *href)
gnome_href_get_type(void)
gnome_href_get_url(GnomeHRef *href)
gnome_href_new(const gchar *url, const gchar *label)
gnome_href_set_label(GnomeHRef *href, const gchar *label)
gnome_href_set_url(GnomeHRef *href, const gchar *url)
gnome_i18n_get_language(void)
gnome_i18n_get_language_list(const gchar *category_name)
gnome_i18n_get_preferred_language(void)
gnome_i18n_init(void)
gnome_i18n_set_preferred_language(const char *val)
gnome_ice_init(void)
gnome_icon_entry_get_filename(GnomeIconEntry *ientry)
gnome_icon_entry_get_type(void)
gnome_icon_entry_gnome_entry(GnomeIconEntry *ientry)
gnome_icon_entry_gnome_file_entry(GnomeIconEntry *ientry)
gnome_icon_entry_gtk_entry(GnomeIconEntry *ientry)
gnome_icon_entry_new(const gchar *history_id, const gchar *browse_dialog_title)
gnome_icon_entry_set_icon(GnomeIconEntry *ientry, const gchar *filename)
gnome_icon_entry_set_pixmap_subdir(GnomeIconEntry *ientry, const gchar *subdir)
gnome_icon_layout_text(GdkFont *font, const gchar *text, const gchar *separators, gint max_width, gboolean confine)
gnome_icon_list_append(GnomeIconList *gil, const char *icon_filename, const char *text)
gnome_icon_list_append_imlib(GnomeIconList *gil, GdkImlibImage *im, const char *text)
gnome_icon_list_clear(GnomeIconList *gil)
gnome_icon_list_construct(GnomeIconList *gil, guint icon_width, GtkAdjustment *adj, int flags)
gnome_icon_list_find_icon_from_data(GnomeIconList *gil, gpointer data)
gnome_icon_list_freeze(GnomeIconList *gil)
gnome_icon_list_get_icon_at(GnomeIconList *gil, int x, int y)
gnome_icon_list_get_icon_data(GnomeIconList *gil, int pos)
gnome_icon_list_get_items_per_line(GnomeIconList *gil)
gnome_icon_list_get_type(void)
gnome_icon_list_icon_is_visible(GnomeIconList *gil, int pos)
gnome_icon_list_insert(GnomeIconList *gil, int pos, const char *icon_filename, const char *text)
gnome_icon_list_insert_imlib(GnomeIconList *gil, int pos, GdkImlibImage *im, const char *text)
gnome_icon_list_moveto(GnomeIconList *gil, int pos, double yalign)
gnome_icon_list_new(guint icon_width, GtkAdjustment *adj, int flags)
gnome_icon_list_new_flags(guint icon_width, GtkAdjustment *adj, int flags)
gnome_icon_list_remove(GnomeIconList *gil, int pos)
gnome_icon_list_select_icon(GnomeIconList *gil, int idx)
gnome_icon_list_set_col_spacing(GnomeIconList *gil, int pixels)
gnome_icon_list_set_hadjustment(GnomeIconList *gil, GtkAdjustment *hadj)
gnome_icon_list_set_icon_border(GnomeIconList *gil, int pixels)
gnome_icon_list_set_icon_data(GnomeIconList *gil, int pos, gpointer data)
gnome_icon_list_set_icon_data_full(GnomeIconList *gil, int pos, gpointer data, GtkDestroyNotify destroy)
gnome_icon_list_set_icon_width(GnomeIconList *gil, int w)
gnome_icon_list_set_row_spacing(GnomeIconList *gil, int pixels)
gnome_icon_list_set_selection_mode(GnomeIconList *gil, GtkSelectionMode mode)
gnome_icon_list_set_separators(GnomeIconList *gil, const char *sep)
gnome_icon_list_set_text_spacing(GnomeIconList *gil, int pixels)
gnome_icon_list_set_vadjustment(GnomeIconList *gil, GtkAdjustment *vadj)
gnome_icon_list_thaw(GnomeIconList *gil)
gnome_icon_list_unselect_all(GnomeIconList *gil, GdkEvent *event, gpointer keep)
gnome_icon_list_unselect_icon(GnomeIconList *gil, int pos)
gnome_icon_paint_text(GnomeIconTextInfo *ti, GdkDrawable *drawable, GdkGC *gc, gint x, gint y, GtkJustification just)
gnome_icon_selection_add_defaults(GnomeIconSelection * gis)
gnome_icon_selection_add_directory(GnomeIconSelection * gis, const gchar * dir)
gnome_icon_selection_clear(GnomeIconSelection * gis, gboolean not_shown)
gnome_icon_selection_get_icon(GnomeIconSelection * gis, gboolean full_path)
gnome_icon_selection_get_type(void)
gnome_icon_selection_new(void)
gnome_icon_selection_select_icon(GnomeIconSelection * gis, const gchar * filename)
gnome_icon_selection_show_icons(GnomeIconSelection * gis)
gnome_icon_selection_stop_loading(GnomeIconSelection * gis)
gnome_icon_text_info_free(GnomeIconTextInfo *ti)
gnome_icon_text_item_configure(GnomeIconTextItem *iti, int x, int y, int width, const char *fontname, const char *text, gboolean is_editable, gboolean is_static)
gnome_icon_text_item_get_text(GnomeIconTextItem *iti)
gnome_icon_text_item_get_type(void)
gnome_icon_text_item_select(GnomeIconTextItem *iti, int sel)
gnome_icon_text_item_setxy(GnomeIconTextItem *iti, int x, int y)
gnome_icon_text_item_start_editing(GnomeIconTextItem *iti)
gnome_icon_text_item_stop_editing(GnomeIconTextItem *iti, gboolean accept)
gnome_init(const char *app_id, const char *app_version, int argc, char **argv)
gnome_init_with_popt_table(const char *app_id, const char *app_version, int argc, char **argv, const struct poptOption *options, int flags, poptContext *return_ctx)
gnome_interaction_key_return(gint key, gboolean cancel_shutdown)
gnome_is_program_in_path(const gchar *program)
gnome_less_clear(GnomeLess * gl)
gnome_less_fixed_font(GnomeLess * gl)
gnome_less_get_type(void)
gnome_less_new(void)
gnome_less_reshow(GnomeLess * gl)
gnome_less_set_fixed_font(GnomeLess * gl, gboolean fixed)
gnome_less_set_font(GnomeLess * gl, GdkFont * font)
gnome_less_show_command(GnomeLess * gl, const gchar * command_line)
gnome_less_show_fd(GnomeLess * gl, int file_descriptor)
gnome_less_show_file(GnomeLess * gl, const gchar * path)
gnome_less_show_filestream(GnomeLess * gl, FILE * f)
gnome_less_show_string(GnomeLess * gl, const gchar * s)
gnome_less_write_fd(GnomeLess * gl, int fd)
gnome_less_write_file(GnomeLess * gl, const gchar * path)
gnome_libdir_file(const char *filename)
gnome_magic_parse(const gchar *filename, gint *nents)
gnome_master_client(void)
gnome_mdi_add_child(GnomeMDI *mdi, GnomeMDIChild *child)
gnome_mdi_add_toplevel_view(GnomeMDI *mdi, GnomeMDIChild *child)
gnome_mdi_add_view(GnomeMDI *mdi, GnomeMDIChild *child)
gnome_mdi_child_add_view(GnomeMDIChild *mdi_child)
gnome_mdi_child_get_type(void)
gnome_mdi_child_remove_view(GnomeMDIChild *mdi_child, GtkWidget *view)
gnome_mdi_child_set_menu_template(GnomeMDIChild *mdi_child, GnomeUIInfo *menu_tmpl)
gnome_mdi_child_set_name(GnomeMDIChild *mdi_child, const gchar *name)
gnome_mdi_find_child(GnomeMDI *mdi, const gchar *name)
gnome_mdi_generic_child_get_type(void)
gnome_mdi_generic_child_new(const gchar *name)
gnome_mdi_generic_child_set_config_func(GnomeMDIGenericChild *child, GnomeMDIChildConfigFunc func, gpointer data)
gnome_mdi_generic_child_set_config_func_full(GnomeMDIGenericChild *child, GnomeMDIChildConfigFunc func, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify notify)
gnome_mdi_generic_child_set_label_func(GnomeMDIGenericChild *child, GnomeMDIChildLabelFunc func, gpointer data)
gnome_mdi_generic_child_set_label_func_full(GnomeMDIGenericChild *child, GnomeMDIChildLabelFunc func, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify notify)
gnome_mdi_generic_child_set_menu_creator(GnomeMDIGenericChild *child, GnomeMDIChildMenuCreator func, gpointer data)
gnome_mdi_generic_child_set_menu_creator_full(GnomeMDIGenericChild *child, GnomeMDIChildMenuCreator func, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify notify)
gnome_mdi_generic_child_set_view_creator(GnomeMDIGenericChild *child, GnomeMDIChildViewCreator func, gpointer data)
gnome_mdi_generic_child_set_view_creator_full(GnomeMDIGenericChild *child, GnomeMDIChildViewCreator func, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify notify)
gnome_mdi_get_active_child(GnomeMDI *mdi)
gnome_mdi_get_active_view(GnomeMDI *mdi)
gnome_mdi_get_active_window(GnomeMDI *mdi)
gnome_mdi_get_app_from_view(GtkWidget *view)
gnome_mdi_get_child_from_view(GtkWidget *view)
gnome_mdi_get_child_menu_info(GnomeApp *app)
gnome_mdi_get_menubar_info(GnomeApp *app)
gnome_mdi_get_toolbar_info(GnomeApp *app)
gnome_mdi_get_type(void)
gnome_mdi_get_view_from_window(GnomeMDI *mdi, GnomeApp *app)
gnome_mdi_new(const gchar *appname, const gchar *title)
gnome_mdi_open_toplevel(GnomeMDI *mdi)
gnome_mdi_register(GnomeMDI *mdi, GtkObject *object)
gnome_mdi_remove_all(GnomeMDI *mdi, gint force)
gnome_mdi_remove_child(GnomeMDI *mdi, GnomeMDIChild *child, gint force)
gnome_mdi_remove_view(GnomeMDI *mdi, GtkWidget *view, gint force)
gnome_mdi_restore_state(GnomeMDI *mdi, const gchar *section, GnomeMDIChildCreator child_create_func)
gnome_mdi_save_state(GnomeMDI *mdi, const gchar *section)
gnome_mdi_set_active_view(GnomeMDI *mdi, GtkWidget *view)
gnome_mdi_set_child_list_path(GnomeMDI *mdi, const gchar *path)
gnome_mdi_set_child_menu_path(GnomeMDI *mdi, const gchar *path)
gnome_mdi_set_menubar_template(GnomeMDI *mdi, GnomeUIInfo *menu_tmpl)
gnome_mdi_set_mode(GnomeMDI *mdi, GnomeMDIMode mode)
gnome_mdi_set_toolbar_template(GnomeMDI *mdi, GnomeUIInfo *tbar_tmpl)
gnome_mdi_unregister(GnomeMDI *mdi, GtkObject *object)
gnome_mdi_update_child(GnomeMDI *mdi, GnomeMDIChild *child)
gnome_message_box_get_type(void)
gnome_message_box_new(const gchar *message, const gchar *messagebox_type, ...)
gnome_message_box_newv(const gchar *message, const gchar *messagebox_type, const gchar **buttons)
gnome_message_box_set_default(GnomeMessageBox *messagebox, gint button)
gnome_message_box_set_modal(GnomeMessageBox *messagebox)
gnome_metadata_copy(const char *from, const char *to)
gnome_metadata_delete(const char *file)
gnome_metadata_get(const char *file, const char *name, int *size, char **buffer)
gnome_metadata_get_fast(const char *file, const char *name, int *size, char **buffer)
gnome_metadata_list(const char *file)
gnome_metadata_lock(void)
gnome_metadata_regex_add(const char *regex, const char *key, int size, const char *data)
gnome_metadata_regex_remove(const char *regex, const char *key)
gnome_metadata_remove(const char *file, const char *name)
gnome_metadata_rename(const char *from, const char *to)
gnome_metadata_set(const char *file, const char *name, int size, const char *data)
gnome_metadata_type_add(const char *type, const char *key, int size, const char *data)
gnome_metadata_type_remove(const char *type, const char *key)
gnome_metadata_unlock(void)
gnome_mime_composetyped(const char* mime_type)
gnome_mime_copiousoutput(const char* mime_type, char *key)
gnome_mime_description(const char* mime_type)
gnome_mime_get_keys(const char *mime_type)
gnome_mime_get_value(const char *mime_type, char *key)
gnome_mime_needsterminal(const char* mime_type, char *key)
gnome_mime_program(const char* mime_type)
gnome_mime_test(const char* mime_type)
gnome_mime_type(const gchar* filename)
gnome_mime_type_from_magic(const gchar *filename)
gnome_mime_type_of_file(const char *existing_filename)
gnome_mime_type_or_default(const gchar *filename, const gchar *defaultv)
gnome_mime_type_or_default_of_file(const char *existing_filename, const gchar *defaultv)
gnome_name_service_get(void)
gnome_number_entry_get_number(GnomeNumberEntry *nentry)
gnome_number_entry_get_type(void)
gnome_number_entry_gnome_entry(GnomeNumberEntry *nentry)
gnome_number_entry_gtk_entry(GnomeNumberEntry *nentry)
gnome_number_entry_new(const gchar *history_id, const gchar *calc_dialog_title)
gnome_number_entry_set_title(GnomeNumberEntry *nentry, const gchar *calc_dialog_title)
gnome_ok_cancel_dialog(const gchar * message, GnomeReplyCallback callback, gpointer data)
gnome_ok_cancel_dialog_modal(const gchar * message, GnomeReplyCallback callback, gpointer data)
gnome_ok_cancel_dialog_modal_parented(const gchar * message, GnomeReplyCallback callback, gpointer data, GtkWindow * parent)
gnome_ok_cancel_dialog_parented(const gchar * message, GnomeReplyCallback callback, gpointer data, GtkWindow * parent)
gnome_ok_dialog(const gchar * message)
gnome_ok_dialog_parented(const gchar * message, GtkWindow * parent)
gnome_paper_bmargin(const GnomePaper *paper)
gnome_paper_convert(double psvalue, const GnomeUnit *unit)
gnome_paper_convert_to_points(double othervalue, const GnomeUnit *unit)
gnome_paper_lmargin(const GnomePaper *paper)
gnome_paper_name(const GnomePaper *paper)
gnome_paper_name_default(void)
gnome_paper_name_list(void)
gnome_paper_psheight(const GnomePaper *paper)
gnome_paper_pswidth(const GnomePaper *paper)
gnome_paper_rmargin(const GnomePaper *paper)
gnome_paper_selector_get_bottom_margin(GnomePaperSelector *gspaper)
gnome_paper_selector_get_height(GnomePaperSelector *gspaper)
gnome_paper_selector_get_left_margin(GnomePaperSelector *gspaper)
gnome_paper_selector_get_name(GnomePaperSelector *gspaper)
gnome_paper_selector_get_right_margin(GnomePaperSelector *gspaper)
gnome_paper_selector_get_top_margin(GnomePaperSelector *gspaper)
gnome_paper_selector_get_type(void)
gnome_paper_selector_get_width(GnomePaperSelector *gspaper)
gnome_paper_selector_new(void)
gnome_paper_selector_set_height(GnomePaperSelector *gspaper, gfloat height)
gnome_paper_selector_set_name(GnomePaperSelector *gspaper, const gchar *name)
gnome_paper_selector_set_width(GnomePaperSelector *gspaper, gfloat width)
gnome_paper_tmargin(const GnomePaper *paper)
gnome_paper_with_name(const gchar *papername)
gnome_paper_with_size(double pswidth, double psheight)
gnome_parse_geometry(const gchar *geometry, gint *xpos, gint *ypos, gint *width, gint *height)
gnome_pixmap_button(GtkWidget *pixmap, const char *text)
gnome_pixmap_entry_construct(GnomePixmapEntry *gentry, const gchar *history_id, const gchar *browse_dialog_title, gboolean do_preview)
gnome_pixmap_entry_get_filename(GnomePixmapEntry *pentry)
gnome_pixmap_entry_get_type(void)
gnome_pixmap_entry_gnome_entry(GnomePixmapEntry *pentry)
gnome_pixmap_entry_gnome_file_entry(GnomePixmapEntry *pentry)
gnome_pixmap_entry_gtk_entry(GnomePixmapEntry *pentry)
gnome_pixmap_entry_new(const gchar *history_id, const gchar *browse_dialog_title, gboolean do_preview)
gnome_pixmap_entry_set_pixmap_subdir(GnomePixmapEntry *pentry, const gchar *subdir)
gnome_pixmap_entry_set_preview(GnomePixmapEntry *pentry, gboolean do_preview)
gnome_pixmap_entry_set_preview_size(GnomePixmapEntry *pentry, gint preview_w, gint preview_h)
gnome_pixmap_file(const char *filename)
gnome_pixmap_get_type(void)
gnome_pixmap_load_file(GnomePixmap *gpixmap, const char *filename)
gnome_pixmap_load_file_at_size(GnomePixmap *gpixmap, const char *filename, int width, int height)
gnome_pixmap_load_imlib(GnomePixmap *gpixmap, GdkImlibImage *im)
gnome_pixmap_load_imlib_at_size(GnomePixmap *gpixmap, GdkImlibImage *im, int width, int height)
gnome_pixmap_load_rgb_d(GnomePixmap *gpixmap, unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height)
gnome_pixmap_load_rgb_d_at_size(GnomePixmap *gpixmap, unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, int width, int height)
gnome_pixmap_load_rgb_d_shaped(GnomePixmap *gpixmap, unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, GdkImlibColor *shape_color)
gnome_pixmap_load_rgb_d_shaped_at_size(GnomePixmap *gpixmap, unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, int width, int height, GdkImlibColor *shape_color)
gnome_pixmap_load_xpm_d(GnomePixmap *gpixmap, char **xpm_data)
gnome_pixmap_load_xpm_d_at_size(GnomePixmap *gpixmap, char **xpm_data, int width, int height)
gnome_pixmap_new_from_file(const char *filename)
gnome_pixmap_new_from_file_at_size(const char *filename, int width, int height)
gnome_pixmap_new_from_gnome_pixmap(GnomePixmap *gpixmap)
gnome_pixmap_new_from_imlib(GdkImlibImage *im)
gnome_pixmap_new_from_imlib_at_size(GdkImlibImage *im, int width, int height)
gnome_pixmap_new_from_rgb_d(unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height)
gnome_pixmap_new_from_rgb_d_at_size(unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, int width, int height)
gnome_pixmap_new_from_rgb_d_shaped(unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, GdkImlibColor *shape_color)
gnome_pixmap_new_from_rgb_d_shaped_at_size(unsigned char *data, unsigned char *alpha, int rgb_width, int rgb_height, int width, int height, GdkImlibColor *shape_color)
gnome_pixmap_new_from_xpm_d(char **xpm_data)
gnome_pixmap_new_from_xpm_d_at_size(char **xpm_data, int width, int height)
gnome_plugin_unuse(gpointer impl_ptr)
gnome_popup_menu_attach(GtkWidget *popup, GtkWidget *widget, gpointer user_data)
gnome_popup_menu_do_popup(GtkWidget *popup, GtkMenuPositionFunc pos_func, gpointer pos_data, GdkEventButton *event, gpointer user_data)
gnome_popup_menu_do_popup_modal(GtkWidget *popup, GtkMenuPositionFunc pos_func, gpointer pos_data, GdkEventButton *event, gpointer user_data)
gnome_popup_menu_get_accel_group(GtkMenu *menu)
gnome_popup_menu_new(GnomeUIInfo *uiinfo)
gnome_popup_menu_new_with_accelgroup(GnomeUIInfo *uiinfo, GtkAccelGroup *accelgroup)
gnome_preferences_get_button_layout(void)
gnome_preferences_get_dialog_centered(void)
gnome_preferences_get_dialog_position(void)
gnome_preferences_get_dialog_type(void)
gnome_preferences_get_disable_imlib_cache(void)
gnome_preferences_get_mdi_mode(void)
gnome_preferences_get_mdi_tab_pos(void)
gnome_preferences_get_menubar_detachable(void)
gnome_preferences_get_menubar_relief(void)
gnome_preferences_get_menus_have_icons(void)
gnome_preferences_get_menus_have_tearoff(void)
gnome_preferences_get_property_box_apply(void)
gnome_preferences_get_statusbar_dialog(void)
gnome_preferences_get_statusbar_interactive(void)
gnome_preferences_get_statusbar_meter_on_right(void)
gnome_preferences_get_toolbar_detachable(void)
gnome_preferences_get_toolbar_labels(void)
gnome_preferences_get_toolbar_lines(void)
gnome_preferences_get_toolbar_relief(void)
gnome_preferences_get_toolbar_relief_btn(void)
gnome_preferences_load(void)
gnome_preferences_load_custom(GnomePreferences *settings)
gnome_preferences_save(void)
gnome_preferences_save_custom(GnomePreferences *settings)
gnome_preferences_set_button_layout(GtkButtonBoxStyle style)
gnome_preferences_set_dialog_centered(gboolean b)
gnome_preferences_set_dialog_position(GtkWindowPosition p)
gnome_preferences_set_dialog_type(GtkWindowType t)
gnome_preferences_set_disable_imlib_cache(int disable_imlib_cache)
gnome_preferences_set_mdi_mode(GnomeMDIMode m)
gnome_preferences_set_mdi_tab_pos(GtkPositionType p)
gnome_preferences_set_menubar_detachable(gboolean b)
gnome_preferences_set_menubar_relief(gboolean b)
gnome_preferences_set_menus_have_icons(int have_icons)
gnome_preferences_set_menus_have_tearoff(gboolean b)
gnome_preferences_set_property_box_button_apply(int v)
gnome_preferences_set_statusbar_dialog(gboolean statusbar)
gnome_preferences_set_statusbar_interactive(gboolean b)
gnome_preferences_set_statusbar_meter_on_right(gboolean status_meter_on_right)
gnome_preferences_set_toolbar_detachable(gboolean b)
gnome_preferences_set_toolbar_labels(gboolean b)
gnome_preferences_set_toolbar_lines(gboolean b)
gnome_preferences_set_toolbar_relief(gboolean b)
gnome_preferences_set_toolbar_relief_btn(gboolean b)
gnome_print_beginpage(GnomePrintContext *pc, const char *name_of_this_page)
gnome_print_bpath(GnomePrintContext * gpc, ArtBpath * bpath, gboolean append)
gnome_print_clip(GnomePrintContext *pc)
gnome_print_closepath(GnomePrintContext *pc)
gnome_print_compress_blank(guchar *in, gint in_size)
gnome_print_compress_drow(guchar *in, guchar *out, gint in_size, guchar *seed)
gnome_print_compress_rlc(guchar *in, guchar *out, gint in_size)
gnome_print_compress_tiff(guchar *in, guchar *out, gint in_size)
gnome_print_concat(GnomePrintContext *pc, const double matrix[6])
gnome_print_context_close(GnomePrintContext *pc)
gnome_print_context_close_file(GnomePrintContext *pc)
gnome_print_context_fprintf(GnomePrintContext *pc, const char *fmt, ...)
gnome_print_context_get_type(void)
gnome_print_context_new(GnomePrinter *printer)
gnome_print_context_new_with_paper_size
gnome_print_context_open_file(GnomePrintContext *pc, const char *filename)
gnome_print_context_write_file(GnomePrintContext *pc, char *buf, size_t size)
gnome_print_copies_get_copies(GnomePrintCopies *gpc, int *copies, int *collate)
gnome_print_copies_get_type(void)
gnome_print_copies_new(void)
gnome_print_copies_set_copies(GnomePrintCopies *gpc, int copies, int collate)
gnome_print_curveto(GnomePrintContext *pc, double x1, double y1, double x2, double y2, double x3, double y3)
gnome_print_dialog_construct(GtkWidget *gpd, const char *title, int flags)
gnome_print_dialog_construct_range_any(GnomePrintDialog *gpd, int flags, GtkWidget *range_widget, char *currentlabel, char *rangelabel)
gnome_print_dialog_construct_range_custom(GnomePrintDialog *gpd, GtkWidget *custom)
gnome_print_dialog_construct_range_date(GnomePrintDialog *gpd, int flags, time_t start, time_t end, char *currentlabel, char *rangelabel)
gnome_print_dialog_construct_range_page(GnomePrintDialog *gpd, int flags, int start, int end, char *currentlabel, char *rangelabel)
gnome_print_dialog_get_copies(GnomePrintDialog *gpd, int *copies, int *collate)
gnome_print_dialog_get_printer(GnomePrintDialog *gpd)
gnome_print_dialog_get_range(GnomePrintDialog *gpd)
gnome_print_dialog_get_range_date(GnomePrintDialog *gpd, time_t *start, time_t *end)
gnome_print_dialog_get_range_page(GnomePrintDialog *gpd, int *start, int *end)
gnome_print_dialog_get_type(void)
gnome_print_dialog_new(const char *title, int flags)
gnome_print_dialog_set_copies(GnomePrintDialog *gpd, int copies, int collate)
gnome_print_eoclip(GnomePrintContext *pc)
gnome_print_eofill(GnomePrintContext *pc)
gnome_print_fill(GnomePrintContext *pc)
gnome_print_grayimage(GnomePrintContext *pc, const char *data, int width, int height, int rowstride)
gnome_print_grestore(GnomePrintContext *pc)
gnome_print_gsave(GnomePrintContext *pc)
gnome_print_lineto(GnomePrintContext *pc, double x, double y)
gnome_print_master_close(GnomePrintMaster *gpm)
gnome_print_master_get_context(GnomePrintMaster *gpm)
gnome_print_master_get_pages(GnomePrintMaster *gpm)
gnome_print_master_get_type(void)
gnome_print_master_new(void)
gnome_print_master_new_from_dialog(GnomePrintDialog *dialog)
gnome_print_master_preview_get_type(void)
gnome_print_master_preview_new(GnomePrintMaster *, const char *title)
gnome_print_master_preview_new_with_orientation(GnomePrintMaster *, const char *title, gboolean landscape)
gnome_print_master_print(GnomePrintMaster *gpm)
gnome_print_master_set_copies(GnomePrintMaster *gpm, int copies, gboolean iscollate)
gnome_print_master_set_paper(GnomePrintMaster *gpm, const GnomePaper *printer)
gnome_print_master_set_printer(GnomePrintMaster *gpm, GnomePrinter *printer)
gnome_print_meta_access_buffer(GnomePrintMeta *meta, void **buffer, int *buflen)
gnome_print_meta_get_copy(GnomePrintMeta *meta, void **bufer, int *buflen)
gnome_print_meta_get_type(void)
gnome_print_meta_new(void)
gnome_print_meta_new_from(const void *data)
gnome_print_meta_pages(const GnomePrintMeta *meta)
gnome_print_meta_render(GnomePrintContext *destination, const void *meta_stream)
gnome_print_meta_render_from_object(GnomePrintContext *destination, const GnomePrintMeta *source)
gnome_print_meta_render_from_object_page(GnomePrintContext *destination, const GnomePrintMeta *source, int page)
gnome_print_meta_render_page(GnomePrintContext *destination, const void *meta_stream, int page)
gnome_print_moveto(GnomePrintContext *pc, double x, double y)
gnome_print_multipage_get_type(void)
gnome_print_multipage_new(GnomePrintContext *subpc, GList *affines /* Of type double[6] */)
gnome_print_multipage_new_from_sizes(GnomePrintContext *subpc, gdouble paper_width, gdouble paper_height, gdouble page_width, gdouble page_height)
gnome_print_newpath(GnomePrintContext *pc)
gnome_print_pclr_construct(GnomePrintPCLR *pclr, GnomePrinter *printer, const GnomePaper *paper_info, int dpi)
gnome_print_pclr_get_type(void)
gnome_print_pclr_new(GnomePrinter *printer, const char *paper_size, int dpi)
gnome_print_pixbuf_construct(GnomePrintPixbuf *pixbuf, GnomePrinter *printer, const GnomePaper *paper_info, int dpi)
gnome_print_pixbuf_get_type(void)
gnome_print_pixbuf_new(GnomePrinter *printer, const char *paper_size, int dpi)
gnome_print_preview_construct(GnomePrintPreview *preview, GnomeCanvas *canvas, const GnomePaper *paper_info)
gnome_print_preview_get_type(void)
gnome_print_preview_new(GnomeCanvas *canvas, const char *paper_size)
gnome_print_rgbaimage(GnomePrintContext *pc, const char *data, int width, int height, int rowstride)
gnome_print_rgbimage(GnomePrintContext *pc, const char *data, int width, int height, int rowstride)
gnome_print_rgbp_construct(GnomePrintRGBP *rgbp, const GnomePaper *paper_info, int dpi)
gnome_print_rgbp_get_type(void)
gnome_print_rgbp_new(const char *paper_size, int dpi)
gnome_print_rotate(GnomePrintContext *pc, double theta)
gnome_print_scale(GnomePrintContext *pc, double sx, double sy)
gnome_print_setdash(GnomePrintContext *pc, int n_values, const double *values, double offset)
gnome_print_setfont(GnomePrintContext *pc, GnomeFont *font)
gnome_print_setlinecap(GnomePrintContext *pc, int captype)
gnome_print_setlinejoin(GnomePrintContext *pc, int jointype)
gnome_print_setlinewidth(GnomePrintContext *pc, double width)
gnome_print_setmatrix(GnomePrintContext *pc, const double matrix[6])
gnome_print_setmiterlimit(GnomePrintContext *pc, double limit)
gnome_print_setopacity(GnomePrintContext *pc, double opacity)
gnome_print_setrgbcolor(GnomePrintContext *pc, double r, double g, double b)
gnome_print_show(GnomePrintContext *pc, char const *text)
gnome_print_showpage(GnomePrintContext *pc)
gnome_print_stroke(GnomePrintContext *pc)
gnome_print_strokepath(GnomePrintContext *pc)
gnome_print_textline(GnomePrintContext *pc, GnomeTextLine *line)
gnome_print_translate(GnomePrintContext *pc, double x, double y)
gnome_print_vpath(GnomePrintContext * gpc, ArtVpath * vpath, gboolean append)
gnome_printer_dialog_get_printer(GnomePrinterDialog *dialog)
gnome_printer_dialog_get_type(void)
gnome_printer_dialog_new(void)
gnome_printer_dialog_new_modal(void)
gnome_printer_get_profiles(void)
gnome_printer_get_status(GnomePrinter *printer)
gnome_printer_get_type(void)
gnome_printer_new_generic_ps(const char *filename)
gnome_printer_profile_free_profiles(GnomePrinterProfileList *pl)
gnome_printer_profile_get_comment(GnomePrinterProfile *pp)
gnome_printer_profile_get_driver_name(GnomePrinterProfile *pp)
gnome_printer_profile_get_location(GnomePrinterProfile *pp)
gnome_printer_profile_get_mime_type(GnomePrinterProfile *pp)
gnome_printer_profile_get_output(GnomePrinterProfile *pp)
gnome_printer_profile_get_printer(GnomePrinterProfile *pp, const char *optional_file, const char *optional_command)
gnome_printer_profile_get_printer_name(GnomePrinterProfile *pp)
gnome_printer_str_status(GnomePrinterStatus status)
gnome_printer_widget_get_printer(GnomePrinterWidget *widget)
gnome_printer_widget_get_type(void)
gnome_printer_widget_new(void)
gnome_proc_bar_construct(GnomeProcBar *pb, GtkWidget *label, gint n, GdkColor *colors, gint(*cb)())
gnome_proc_bar_get_type(void)
gnome_proc_bar_new(GtkWidget *label, gint n, GdkColor *colors, gint(*cb)())
gnome_proc_bar_set_orient(GnomeProcBar *pb, gboolean vertical)
gnome_proc_bar_set_values(GnomeProcBar *pb, const guint val [])
gnome_proc_bar_start(GnomeProcBar *pb, gint gtime, gpointer data)
gnome_proc_bar_stop(GnomeProcBar *pb)
gnome_proc_bar_update(GnomeProcBar *pb, GdkColor *colors)
gnome_property_box_append_page(GnomePropertyBox *property_box, GtkWidget *child, GtkWidget *tab_label)
gnome_property_box_changed(GnomePropertyBox *property_box)
gnome_property_box_get_type(void)
gnome_property_box_new(void)
gnome_property_box_set_modified(GnomePropertyBox *property_box, gboolean state)
gnome_property_box_set_state(GnomePropertyBox *property_box, gboolean state)
gnome_property_entry_colors(GnomePropertyObject *object, const gchar *label, gint num_colors, gint columns, gint *table_pos, GdkColor *colors, const gchar *texts [])
gnome_property_entry_font(GnomePropertyObject *object, const gchar *label, gchar **font_name_ptr, GdkFont **font_ptr)
gnome_property_object_apply(GnomePropertyObject *object)
gnome_property_object_changed(GnomePropertyObject *object)
gnome_property_object_discard_temp(GnomePropertyObject *object)
gnome_property_object_list_walk(GList *property_object_list, GnomePropertyAction action)
gnome_property_object_load(GnomePropertyObject *object)
gnome_property_object_load_temp(GnomePropertyObject *object)
gnome_property_object_new(GnomePropertyDescriptor *descriptor, gpointer property_data_ptr)
gnome_property_object_register(GnomePropertyBox *property_box, GnomePropertyObject *object)
gnome_property_object_save(GnomePropertyObject *object)
gnome_property_object_save_temp(GnomePropertyObject *object)
gnome_property_object_update(GnomePropertyObject *object)
gnome_question_dialog(const gchar * question, GnomeReplyCallback callback, gpointer data)
gnome_question_dialog_modal(const gchar * question, GnomeReplyCallback callback, gpointer data)
gnome_question_dialog_modal_parented(const gchar * question, GnomeReplyCallback callback, gpointer data, GtkWindow * parent)
gnome_question_dialog_parented(const gchar * question, GnomeReplyCallback callback, gpointer data, GtkWindow * parent)
gnome_regex_cache_compile(GnomeRegexCache *rxc, const char *pattern, int flags)
gnome_regex_cache_destroy(GnomeRegexCache *rxc)
gnome_regex_cache_new(void)
gnome_regex_cache_set_size(GnomeRegexCache *rxc, int new_size)
gnome_remote_get_command(const char *host, gint *argcp, char ***argvp)
gnome_remote_set_command(const char *host, gint argc, const char * const argv[])
gnome_request_dialog(gboolean password, const gchar * prompt, const gchar * default_text, const guint16 max_length, GnomeStringCallback callback, gpointer data, GtkWindow * parent)
gnome_request_password_dialog(const gchar * prompt, GnomeStringCallback callback, gpointer data)
gnome_request_password_dialog_parented(const gchar * prompt, GnomeStringCallback callback, gpointer data, GtkWindow * parent)
gnome_request_string_dialog(const gchar * prompt, GnomeStringCallback callback, gpointer data)
gnome_request_string_dialog_parented(const gchar * prompt, GnomeStringCallback callback, gpointer data, GtkWindow * parent)
gnome_score_get_notable(gchar *gamename, /* Will be auto-determined if NULL */ gchar *level, gchar ***names, gfloat **scores, time_t **scoretimes)
gnome_score_init(const gchar * gamename)
gnome_score_log(gfloat score, gchar *level, /* Pass in NULL unless you want to keep per-level scores for the game */ /* Pass in TRUE if higher scores are "better" in the game */ gboolean higher_to_lower_score_order)
gnome_scores_display(gchar *title, /* Title. */ gchar *app_name, /* Name of the application, as in gnome_score_init. */ gchar *level, /* Level of the game or NULL. */ int pos /* Position in the top ten of the current player, as returned by gnome_score_log. */ )
gnome_scores_get_type(void)
gnome_scores_new(guint n_scores, /* Number of positions. */ gchar **names, /* Names of the players. */ gfloat *scores, /* Scores */ time_t *times, /* Time in which the scores were done */ guint clear /* Add a "Clear" Button? */ )
gnome_scores_set_color(GnomeScores *gs, /* GNOME Scores widget. */ guint pos, /* Entry to be changed. */ GdkColor *col /* Color. */ )
gnome_scores_set_colors(GnomeScores *gs, GdkColor *col /* Array of colors. */ )
gnome_scores_set_current_player(GnomeScores *gs, /* GNOME Scores widget. */ gint i /* Index of the current(from 0 to 9). */ )
gnome_scores_set_def_color(GnomeScores *gs, /* GNOME Scores widget. */ GdkColor *col /* Color. */ )
gnome_scores_set_logo_label(GnomeScores *gs, /* GNOME Scores widget. */ gchar *txt, /* Text in the label. */ gchar *font, /* Font to use in the label. */ GdkColor *color /* Color to use in the label. */ )
gnome_scores_set_logo_label_title(GnomeScores *gs, /* GNOME Scores widget. */ gchar *txt /* Name of the logo. */ )
gnome_scores_set_logo_pixmap(GnomeScores *gs, /* GNOME Scores widget. */ gchar *logo /* Name of the .xpm. */ )
gnome_scores_set_logo_widget(GnomeScores *gs, /* GNOME Scores widget. */ GtkWidget *w /* Widget to be used as logo. */ )
gnome_sound_file(const char *filename)
gnome_sound_init(const char *hostname)
gnome_sound_play(const char * filename)
gnome_sound_sample_load(const char *sample_name, const char *filename)
gnome_sound_shutdown(void)
gnome_spell_accept(GnomeSpell* gtkspell, const gchar* word)
gnome_spell_check(GnomeSpell* gtkspell, const gchar* str)
gnome_spell_get_type(void)
gnome_spell_insert(GnomeSpell* gtkspell, const gchar* word, gboolean lowercase)
gnome_spell_kill(GnomeSpell* gtkspell)
gnome_spell_new(void)
gnome_spell_next(GnomeSpell* gtkspell)
gnome_startup_acquire_token(const gchar *property_name, const gchar *sm_id)
gnome_stock_button(const char *type)
gnome_stock_get_type(void)
gnome_stock_menu_accel(const char *type, guchar *key, guint8 *mod)
gnome_stock_menu_accel_parse(const char *section)
gnome_stock_menu_item(const char *type, const char *text)
gnome_stock_new(void)
gnome_stock_new_with_icon(const char *icon)
gnome_stock_or_ordinary_button(const char *type)
gnome_stock_pixmap_change(const char *icon, const char *subtype, GnomeStockPixmapEntry *entry)
gnome_stock_pixmap_checkfor(const char *icon, const char *subtype)
gnome_stock_pixmap_gdk(const char *icon, const char *subtype, GdkPixmap **pixmap, GdkPixmap **mask)
gnome_stock_pixmap_register(const char *icon, const char *subtype, GnomeStockPixmapEntry *entry)
gnome_stock_pixmap_widget(GtkWidget *window, const char *icon)
gnome_stock_pixmap_widget_at_size(GtkWidget *window, const char *icon, guint width, guint height)
gnome_stock_pixmap_widget_get_type(void)
gnome_stock_pixmap_widget_new(GtkWidget *window, const char *icon)
gnome_stock_pixmap_widget_new(GtkWidget *window, const char *icon)
gnome_stock_pixmap_widget_set_icon(GnomeStock *widget, const char *icon)
gnome_stock_pixmap_widget_set_icon(GnomeStockPixmapWidget *widget, const char *icon)
gnome_stock_set_icon(GnomeStock *stock, const char *icon)
gnome_stock_transparent_window(const char *icon, const char *subtype)
gnome_text_get_font(GnomeTextFontHandle font)
gnome_text_get_font_name(GnomeTextFontHandle font)
gnome_text_get_width(GnomeTextFontHandle font, int glyph)
gnome_text_hs_just(GnomeTextLayout *layout)
gnome_text_intern_font_list(const char *fontlist_name)
gnome_text_layout_free(GnomeTextLayout *layout)
gnome_text_layout_new(const guchar *text, GnomeTextAttrEl *attrs)
gnome_text_line_free(GnomeTextLine *line)
gnome_text_line_from_layout(GnomeTextLayout *layout)
gnome_text_lines_from_layout(GnomeTextLayout *layout)
gnome_text_unicode_to_glyph(GnomeTextFontListHandle fontlist, int unicode, GnomeFontWeight weight, gboolean italic, GnomeTextFontHandle *p_font, int *p_glyph)
gnome_triggers_add_trigger(GnomeTrigger *nt, ...)
gnome_triggers_do(const char *msg, const char *level, ...)
gnome_triggers_init(void)
gnome_triggers_readfile(const char *infilename)
gnome_triggers_vadd_trigger(GnomeTrigger *nt, char *supinfo[])
gnome_triggers_vdo(const char *msg, const char *level, const char *supinfo[])
gnome_unconditional_config_file(const char *filename)
gnome_unconditional_datadir_file(const char *filename)
gnome_unconditional_libdir_file(const char *filename)
gnome_unconditional_pixmap_file(const char *filename)
gnome_unconditional_sound_file(const char *filename)
gnome_unit_name_list(void)
gnome_unit_with_name(const gchar *unitname)
gnome_unknown_H
gnome_uri_list_extract_filenames(const gchar* uri_list)
gnome_uri_list_extract_uris(const gchar* uri_list)
gnome_uri_list_free_strings(GList *list)
gnome_url_show(const char *url)
gnome_util_home_file
gnome_util_prepend_user_home
gnome_util_user_home
gnome_util_user_shell(void)
gnome_warning_dialog(const gchar * warning)
gnome_warning_dialog_parented(const gchar * warning, GtkWindow * parent)
gnome_widget_add_help
gnome_widget_add_help_with_uidata(GtkWidget *widget, const gchar *help, GnomeUIInfo *menuinfo, gpointer user_data)
gnome_win_hints_get_app_state(GtkWidget *window)
gnome_win_hints_get_client_window_ids(void)
gnome_win_hints_get_current_workspace(void)
gnome_win_hints_get_expanded_size(GtkWidget *window, gint *x, gint *y, gint *width, gint *height)
gnome_win_hints_get_hints(GtkWidget *window)
gnome_win_hints_get_layer(GtkWidget *window)
gnome_win_hints_get_state(GtkWidget *window)
gnome_win_hints_get_workspace(GtkWidget *window)
gnome_win_hints_get_workspace_count(void)
gnome_win_hints_get_workspace_names(void)
gnome_win_hints_init(void)
gnome_win_hints_set_app_state(GtkWidget *window, GnomeWinAppState state)
gnome_win_hints_set_current_workspace(gint workspace)
gnome_win_hints_set_expanded_size(GtkWidget *window, gint x, gint y, gint width, gint height)
gnome_win_hints_set_hints(GtkWidget *window, GnomeWinHints skip)
gnome_win_hints_set_layer(GtkWidget *window, GnomeWinLayer layer)
gnome_win_hints_set_moving(GtkWidget *window, gboolean moving)
gnome_win_hints_set_moving(GtkWidget *window, gboolean moving)
gnome_win_hints_set_state(GtkWidget *window, GnomeWinState state)
gnome_win_hints_set_workspace(GtkWidget *window, gint workspace)
gnome_win_hints_wm_exists(void)
gnome_window_icon_init(void)
gnome_window_icon_set_default_from_file(const char *filename)
gnome_window_icon_set_default_from_imlib(GdkImlibImage *im)
gnome_window_icon_set_from_default(GtkWindow *w)
gnome_window_icon_set_from_file(GtkWindow *w, const char *filename)
gnome_window_icon_set_from_imlib(GtkWindow *w, GdkImlibImage *im)
gnomelib_init(const char *app_id, const char *app_version)
gnomelib_parse_args(int argc, char *argv[], int popt_flags)
gnomelib_register_popt_table(const struct poptOption *options, const char *description)
gnorba_CORBA_init(int *argc, char **argv, GnorbaInitFlags flags, CORBA_Environment *ev)
goad_server_activate(GoadServer *sinfo, GoadActivationFlags flags, const char **params)
goad_server_activate_with_id(GoadServerList *server_list, const char *server_id, GoadActivationFlags flags, const char **params)
goad_server_activate_with_repo_id(GoadServerList *server_list, const char *repo_id, GoadActivationFlags flags, const char **params)
goad_server_activation_id(void)
goad_server_list_free(GoadServerList *server_list)
goad_server_list_get(void)
goad_server_register(CORBA_Object name_server, CORBA_Object server, const char* name, const char* kind, CORBA_Environment* ev)
goad_server_unregister(CORBA_Object name_server, const char* name, const char* kind, CORBA_Environment* ev)
gpointer
grantpt (int fd)
group_member (gid_t gid)
gshort
gsignal (int sig)
gsize
gssize
gtk_accel_group_activate(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
gtk_accel_group_add(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GtkObject *object, const gchar *accel_signal)
gtk_accel_group_attach(GtkAccelGroup *accel_group, GtkObject *object)
gtk_accel_group_create_add(GtkType class_type, GtkSignalRunType signal_flags, guint handler_offset)
gtk_accel_group_create_remove(GtkType class_type, GtkSignalRunType signal_flags, guint handler_offset)
gtk_accel_group_detach(GtkAccelGroup *accel_group, GtkObject *object)
gtk_accel_group_entries_from_object(GtkObject *object)
gtk_accel_group_get_default(void)
gtk_accel_group_get_entry(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
gtk_accel_group_handle_add(GtkObject *object, guint accel_signal_id, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags)
gtk_accel_group_handle_remove(GtkObject *object, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
gtk_accel_group_lock(GtkAccelGroup *accel_group)
gtk_accel_group_lock_entry(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
gtk_accel_group_new(void)
gtk_accel_group_ref(GtkAccelGroup *accel_group)
gtk_accel_group_remove(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkObject *object)
gtk_accel_group_unlock(GtkAccelGroup *accel_group)
gtk_accel_group_unlock_entry(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
gtk_accel_group_unref(GtkAccelGroup *accel_group)
gtk_accel_groups_activate(GtkObject *object, guint accel_key, GdkModifierType accel_mods)
gtk_accel_groups_from_object(GtkObject *object)
gtk_accel_label_accelerator_width
gtk_accel_label_get_accel_width(GtkAccelLabel *accel_label)
gtk_accel_label_get_type(void)
gtk_accel_label_new(const gchar *string)
gtk_accel_label_refetch(GtkAccelLabel *accel_label)
gtk_accel_label_set_accel_widget(GtkAccelLabel *accel_label, GtkWidget *accel_widget)
gtk_accelerator_get_default_mod_mask(void)
gtk_accelerator_name(guint accelerator_key, GdkModifierType accelerator_mods)
gtk_accelerator_parse(const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods)
gtk_accelerator_set_default_mod_mask(GdkModifierType default_mod_mask)
gtk_accelerator_valid(guint keyval, GdkModifierType modifiers)
gtk_adjustment_changed(GtkAdjustment *adjustment)
gtk_adjustment_clamp_page(GtkAdjustment *adjustment, gfloat lower, gfloat upper)
gtk_adjustment_get_type(void)
gtk_adjustment_new(gfloat value, gfloat lower, gfloat upper, gfloat step_increment, gfloat page_increment, gfloat page_size)
gtk_adjustment_set_value(GtkAdjustment *adjustment, gfloat value)
gtk_adjustment_value_changed(GtkAdjustment *adjustment)
gtk_alignment_get_type(void)
gtk_alignment_new(gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
gtk_alignment_set(GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale)
gtk_arg_copy(GtkArg *src_arg, GtkArg *dest_arg)
gtk_arg_free(GtkArg *arg, gboolean free_contents)
gtk_arg_get_info(GtkType object_type, GHashTable *arg_info_hash_table, const gchar *arg_name, GtkArgInfo **info_p)
gtk_arg_info_equal(gconstpointer arg_info_1, gconstpointer arg_info_2)
gtk_arg_info_hash(gconstpointer arg_info)
gtk_arg_name_strip_type(const gchar *arg_name)
gtk_arg_new(GtkType arg_type)
gtk_arg_reset(GtkArg *arg)
gtk_arg_to_valueloc(GtkArg *arg, gpointer value_pointer)
gtk_arg_type_new_static(GtkType base_class_type, const gchar *arg_name, guint class_n_args_offset, GHashTable *arg_info_hash_table, GtkType arg_type, guint arg_flags, guint arg_id)
gtk_arg_values_equal(const GtkArg *arg1, const GtkArg *arg2)
gtk_args_collect(GtkType object_type, GHashTable *arg_info_hash_table, GSList **arg_list_p, GSList **info_list_p, const gchar *first_arg_name, va_list var_args)
gtk_args_collect_cleanup(GSList *arg_list, GSList *info_list)
gtk_args_query(GtkType class_type, GHashTable *arg_info_hash_table, guint32 **arg_flags, guint *n_args_p)
gtk_arrow_get_type(void)
gtk_arrow_new(GtkArrowType arrow_type, GtkShadowType shadow_type)
gtk_arrow_set(GtkArrow *arrow, GtkArrowType arrow_type, GtkShadowType shadow_type)
gtk_aspect_frame_get_type(void)
gtk_aspect_frame_new(const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
gtk_aspect_frame_set(GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
gtk_bin_get_type(void)
gtk_binding_entry_add
gtk_binding_entry_add_signal(GtkBindingSet *binding_set, guint keyval, guint modifiers, const gchar *signal_name, guint n_args, ...)
gtk_binding_entry_add_signall(GtkBindingSet *binding_set, guint keyval, guint modifiers, const gchar *signal_name, GSList *binding_args)
gtk_binding_entry_clear(GtkBindingSet *binding_set, guint keyval, guint modifiers)
gtk_binding_entry_remove(GtkBindingSet *binding_set, guint keyval, guint modifiers)
gtk_binding_parse_binding(GScanner *scanner)
gtk_binding_set_activate(GtkBindingSet *binding_set, guint keyval, guint modifiers, GtkObject *object)
gtk_binding_set_add_path(GtkBindingSet *binding_set, GtkPathType path_type, const gchar *path_pattern, GtkPathPriorityType priority)
gtk_binding_set_by_class(gpointer object_class)
gtk_binding_set_find(const gchar *set_name)
gtk_binding_set_new(const gchar *set_name)
gtk_bindings_activate(GtkObject *object, guint keyval, guint modifiers)
gtk_box_get_type(void)
gtk_box_pack_end(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
gtk_box_pack_end_defaults(GtkBox *box, GtkWidget *widget)
gtk_box_pack_start(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding)
gtk_box_pack_start_defaults(GtkBox *box, GtkWidget *widget)
gtk_box_query_child_packing(GtkBox *box, GtkWidget *child, gboolean *expand, gboolean *fill, guint *padding, GtkPackType *pack_type)
gtk_box_reorder_child(GtkBox *box, GtkWidget *child, gint position)
gtk_box_set_child_packing(GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type)
gtk_box_set_homogeneous(GtkBox *box, gboolean homogeneous)
gtk_box_set_spacing(GtkBox *box, gint spacing)
gtk_button_box_child_requisition(GtkWidget *widget, int *nvis_children, int *width, int *height)
gtk_button_box_get_child_ipadding(GtkButtonBox *widget, gint *ipad_x, gint *ipad_y)
gtk_button_box_get_child_ipadding_default(gint *ipad_x, gint *ipad_y)
gtk_button_box_get_child_size(GtkButtonBox *widget, gint *min_width, gint *min_height)
gtk_button_box_get_child_size_default(gint *min_width, gint *min_height)
gtk_button_box_get_layout(GtkButtonBox *widget)
gtk_button_box_get_spacing(GtkButtonBox *widget)
gtk_button_box_get_type(void)
gtk_button_box_set_child_ipadding(GtkButtonBox *widget, gint ipad_x, gint ipad_y)
gtk_button_box_set_child_ipadding_default(gint ipad_x, gint ipad_y)
gtk_button_box_set_child_size(GtkButtonBox *widget, gint min_width, gint min_height)
gtk_button_box_set_child_size_default(gint min_width, gint min_height)
gtk_button_box_set_layout(GtkButtonBox *widget, GtkButtonBoxStyle layout_style)
gtk_button_box_set_spacing(GtkButtonBox *widget, gint spacing)
gtk_button_clicked(GtkButton *button)
gtk_button_enter(GtkButton *button)
gtk_button_get_relief(GtkButton *button)
gtk_button_get_type(void)
gtk_button_leave(GtkButton *button)
gtk_button_new(void)
gtk_button_new_with_label(const gchar *label)
gtk_button_pressed(GtkButton *button)
gtk_button_released(GtkButton *button)
gtk_button_set_relief(GtkButton *button, GtkReliefStyle newstyle)
gtk_calendar_clear_marks(GtkCalendar *calendar)
gtk_calendar_display_options(GtkCalendar *calendar, GtkCalendarDisplayOptions flags)
gtk_calendar_freeze(GtkCalendar *calendar)
gtk_calendar_get_date(GtkCalendar *calendar, guint *year, guint *month, guint *day)
gtk_calendar_get_type(void)
gtk_calendar_mark_day(GtkCalendar *calendar, guint day)
gtk_calendar_new(void)
gtk_calendar_select_day(GtkCalendar *calendar, guint day)
gtk_calendar_select_month(GtkCalendar *calendar, guint month, guint year)
gtk_calendar_thaw(GtkCalendar *calendar)
gtk_calendar_unmark_day(GtkCalendar *calendar, guint day)
gtk_check_button_get_type(void)
gtk_check_button_new(void)
gtk_check_button_new_with_label(const gchar *label)
gtk_check_menu_item_get_type(void)
gtk_check_menu_item_new(void)
gtk_check_menu_item_new_with_label(const gchar *label)
gtk_check_menu_item_set_active(GtkCheckMenuItem *check_menu_item, gboolean is_active)
gtk_check_menu_item_set_show_toggle(GtkCheckMenuItem *menu_item, gboolean always)
gtk_check_menu_item_set_state
gtk_check_menu_item_toggled(GtkCheckMenuItem *check_menu_item)
gtk_check_version(guint required_major, guint required_minor, guint required_micro)
gtk_clist_append(GtkCList *clist, gchar *text[])
gtk_clist_clear(GtkCList *clist)
gtk_clist_column_title_active(GtkCList *clist, gint column)
gtk_clist_column_title_passive(GtkCList *clist, gint column)
gtk_clist_column_titles_active(GtkCList *clist)
gtk_clist_column_titles_hide(GtkCList *clist)
gtk_clist_column_titles_passive(GtkCList *clist)
gtk_clist_column_titles_show(GtkCList *clist)
gtk_clist_columns_autosize(GtkCList *clist)
gtk_clist_construct(GtkCList *clist, gint columns, gchar *titles[])
gtk_clist_find_row_from_data(GtkCList *clist, gpointer data)
gtk_clist_freeze(GtkCList *clist)
gtk_clist_get_cell_style(GtkCList *clist, gint row, gint column)
gtk_clist_get_cell_type(GtkCList *clist, gint row, gint column)
gtk_clist_get_column_title(GtkCList *clist, gint column)
gtk_clist_get_column_widget(GtkCList *clist, gint column)
gtk_clist_get_hadjustment(GtkCList *clist)
gtk_clist_get_pixmap(GtkCList *clist, gint row, gint column, GdkPixmap **pixmap, GdkBitmap **mask)
gtk_clist_get_pixtext(GtkCList *clist, gint row, gint column, gchar **text, guint8 *spacing, GdkPixmap **pixmap, GdkBitmap **mask)
gtk_clist_get_row_data(GtkCList *clist, gint row)
gtk_clist_get_row_style(GtkCList *clist, gint row)
gtk_clist_get_selectable(GtkCList *clist, gint row)
gtk_clist_get_selection_info(GtkCList *clist, gint x, gint y, gint *row, gint *column)
gtk_clist_get_text(GtkCList *clist, gint row, gint column, gchar **text)
gtk_clist_get_type(void)
gtk_clist_get_vadjustment(GtkCList *clist)
gtk_clist_insert(GtkCList *clist, gint row, gchar *text[])
gtk_clist_moveto(GtkCList *clist, gint row, gint column, gfloat row_align, gfloat col_align)
gtk_clist_new(gint columns)
gtk_clist_new_with_titles(gint columns, gchar *titles[])
gtk_clist_optimal_column_width(GtkCList *clist, gint column)
gtk_clist_prepend(GtkCList *clist, gchar *text[])
gtk_clist_remove(GtkCList *clist, gint row)
gtk_clist_row_is_visible(GtkCList *clist, gint row)
gtk_clist_row_move(GtkCList *clist, gint source_row, gint dest_row)
gtk_clist_select_all(GtkCList *clist)
gtk_clist_select_row(GtkCList *clist, gint row, gint column)
gtk_clist_set_auto_sort(GtkCList *clist, gboolean auto_sort)
gtk_clist_set_background(GtkCList *clist, gint row, GdkColor *color)
gtk_clist_set_button_actions(GtkCList *clist, guint button, guint8 button_actions)
gtk_clist_set_cell_style(GtkCList *clist, gint row, gint column, GtkStyle *style)
gtk_clist_set_column_auto_resize(GtkCList *clist, gint column, gboolean auto_resize)
gtk_clist_set_column_justification(GtkCList *clist, gint column, GtkJustification justification)
gtk_clist_set_column_max_width(GtkCList *clist, gint column, gint max_width)
gtk_clist_set_column_min_width(GtkCList *clist, gint column, gint min_width)
gtk_clist_set_column_resizeable(GtkCList *clist, gint column, gboolean resizeable)
gtk_clist_set_column_title(GtkCList *clist, gint column, const gchar *title)
gtk_clist_set_column_visibility(GtkCList *clist, gint column, gboolean visible)
gtk_clist_set_column_widget(GtkCList *clist, gint column, GtkWidget *widget)
gtk_clist_set_column_width(GtkCList *clist, gint column, gint width)
gtk_clist_set_compare_func(GtkCList *clist, GtkCListCompareFunc cmp_func)
gtk_clist_set_foreground(GtkCList *clist, gint row, GdkColor *color)
gtk_clist_set_hadjustment(GtkCList *clist, GtkAdjustment *adjustment)
gtk_clist_set_pixmap(GtkCList *clist, gint row, gint column, GdkPixmap *pixmap, GdkBitmap *mask)
gtk_clist_set_pixtext(GtkCList *clist, gint row, gint column, const gchar *text, guint8 spacing, GdkPixmap *pixmap, GdkBitmap *mask)
gtk_clist_set_reorderable(GtkCList *clist, gboolean reorderable)
gtk_clist_set_row_data(GtkCList *clist, gint row, gpointer data)
gtk_clist_set_row_data_full(GtkCList *clist, gint row, gpointer data, GtkDestroyNotify destroy)
gtk_clist_set_row_height(GtkCList *clist, guint height)
gtk_clist_set_row_style(GtkCList *clist, gint row, GtkStyle *style)
gtk_clist_set_selectable(GtkCList *clist, gint row, gboolean selectable)
gtk_clist_set_selection_mode(GtkCList *clist, GtkSelectionMode mode)
gtk_clist_set_shadow_type(GtkCList *clist, GtkShadowType type)
gtk_clist_set_shift(GtkCList *clist, gint row, gint column, gint vertical, gint horizontal)
gtk_clist_set_sort_column(GtkCList *clist, gint column)
gtk_clist_set_sort_type(GtkCList *clist, GtkSortType sort_type)
gtk_clist_set_text(GtkCList *clist, gint row, gint column, const gchar *text)
gtk_clist_set_use_drag_icons(GtkCList *clist, gboolean use_icons)
gtk_clist_set_vadjustment(GtkCList *clist, GtkAdjustment *adjustment)
gtk_clist_sort(GtkCList *clist)
gtk_clist_swap_rows(GtkCList *clist, gint row1, gint row2)
gtk_clist_thaw(GtkCList *clist)
gtk_clist_undo_selection(GtkCList *clist)
gtk_clist_unselect_all(GtkCList *clist)
gtk_clist_unselect_row(GtkCList *clist, gint row, gint column)
gtk_clock_get_type(void)
gtk_clock_new(GtkClockType type)
gtk_clock_set_format(GtkClock *gclock, const gchar *fmt)
gtk_clock_set_seconds(GtkClock *gclock, time_t seconds)
gtk_clock_set_update_interval(GtkClock *gclock, gint seconds)
gtk_clock_start(GtkClock *gclock)
gtk_clock_stop(GtkClock *gclock)
gtk_color_selection_dialog_get_type(void)
gtk_color_selection_dialog_new(const gchar *title)
gtk_color_selection_get_color(GtkColorSelection *colorsel, gdouble *color)
gtk_color_selection_get_type(void)
gtk_color_selection_new(void)
gtk_color_selection_set_color(GtkColorSelection *colorsel, gdouble *color)
gtk_color_selection_set_opacity(GtkColorSelection *colorsel, gint use_opacity)
gtk_color_selection_set_update_policy(GtkColorSelection *colorsel, GtkUpdateType policy)
gtk_combo_disable_activate(GtkCombo* combo)
gtk_combo_get_type(void)
gtk_combo_new(void)
gtk_combo_set_case_sensitive(GtkCombo* combo, gint val)
gtk_combo_set_item_string(GtkCombo* combo, GtkItem* item, const gchar* item_value)
gtk_combo_set_popdown_strings(GtkCombo* combo, GList *strings)
gtk_combo_set_use_arrows(GtkCombo* combo, gint val)
gtk_combo_set_use_arrows_always(GtkCombo* combo, gint val)
gtk_combo_set_value_in_list(GtkCombo* combo, gint val, gint ok_if_empty)
gtk_container_add(GtkContainer *container, GtkWidget *widget)
gtk_container_add_child_arg_type(const gchar *arg_name, GtkType arg_type, guint arg_flags, guint arg_id)
gtk_container_add_with_args(GtkContainer *container, GtkWidget *widget, const gchar *first_arg_name, ...)
gtk_container_addv(GtkContainer *container, GtkWidget *widget, guint n_args, GtkArg *args)
gtk_container_arg_get(GtkContainer *container, GtkWidget *child, GtkArg *arg, GtkArgInfo *info)
gtk_container_arg_set(GtkContainer *container, GtkWidget *child, GtkArg *arg, GtkArgInfo *info)
gtk_container_border_width
gtk_container_check_resize(GtkContainer *container)
gtk_container_child_arg_get_info(GtkType object_type, const gchar *arg_name, GtkArgInfo **info_p)
gtk_container_child_args_collect(GtkType object_type, GSList **arg_list_p, GSList **info_list_p, const gchar *first_arg_name, va_list args)
gtk_container_child_composite_name(GtkContainer *container, GtkWidget *child)
gtk_container_child_getv(GtkContainer *container, GtkWidget *child, guint n_args, GtkArg *args)
gtk_container_child_set(GtkContainer *container, GtkWidget *child, const gchar *first_arg_name, ...)
gtk_container_child_setv(GtkContainer *container, GtkWidget *child, guint n_args, GtkArg *args)
gtk_container_child_type(GtkContainer *container)
gtk_container_children(GtkContainer *container)
gtk_container_clear_resize_widgets(GtkContainer *container)
gtk_container_dequeue_resize_handler(GtkContainer *container)
gtk_container_focus(GtkContainer *container, GtkDirectionType direction)
gtk_container_forall(GtkContainer *container, GtkCallback callback, gpointer callback_data)
gtk_container_foreach(GtkContainer *container, GtkCallback callback, gpointer callback_data)
gtk_container_foreach_full(GtkContainer *container, GtkCallback callback, GtkCallbackMarshal marshal, gpointer callback_data, GtkDestroyNotify notify)
gtk_container_get_toplevels(void)
gtk_container_get_type(void)
gtk_container_query_child_args(GtkType class_type, guint32 **arg_flags, guint *nargs)
gtk_container_queue_resize(GtkContainer *container)
gtk_container_register_toplevel(GtkContainer *container)
gtk_container_remove(GtkContainer *container, GtkWidget *widget)
gtk_container_resize_children(GtkContainer *container)
gtk_container_set_border_width(GtkContainer *container, guint border_width)
gtk_container_set_focus_child(GtkContainer *container, GtkWidget *child)
gtk_container_set_focus_hadjustment(GtkContainer *container, GtkAdjustment *adjustment)
gtk_container_set_focus_vadjustment(GtkContainer *container, GtkAdjustment *adjustment)
gtk_container_set_reallocate_redraws(GtkContainer *container, gboolean needs_redraws)
gtk_container_set_resize_mode(GtkContainer *container, GtkResizeMode resize_mode)
gtk_container_unregister_toplevel(GtkContainer *container)
gtk_ctree_collapse(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_collapse_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_collapse_to_depth(GtkCTree *ctree, GtkCTreeNode *node, gint depth)
gtk_ctree_construct(GtkCTree *ctree, gint columns, gint tree_column, gchar *titles[])
gtk_ctree_expand(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_expand_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_expand_to_depth(GtkCTree *ctree, GtkCTreeNode *node, gint depth)
gtk_ctree_export_to_gnode(GtkCTree *ctree, GNode *parent, GNode *sibling, GtkCTreeNode *node, GtkCTreeGNodeFunc func, gpointer data)
gtk_ctree_find(GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *child)
gtk_ctree_find_all_by_row_data(GtkCTree *ctree, GtkCTreeNode *node, gpointer data)
gtk_ctree_find_all_by_row_data_custom(GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GCompareFunc func)
gtk_ctree_find_by_row_data(GtkCTree *ctree, GtkCTreeNode *node, gpointer data)
gtk_ctree_find_by_row_data_custom(GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GCompareFunc func)
gtk_ctree_find_node_ptr(GtkCTree *ctree, GtkCTreeRow *ctree_row)
gtk_ctree_get_node_info(GtkCTree *ctree, GtkCTreeNode *node, gchar **text, guint8 *spacing, GdkPixmap **pixmap_closed, GdkBitmap **mask_closed, GdkPixmap **pixmap_opened, GdkBitmap **mask_opened, gboolean *is_leaf, gboolean *expanded)
gtk_ctree_get_type(void)
gtk_ctree_insert_gnode(GtkCTree *ctree, GtkCTreeNode *parent, GtkCTreeNode *sibling, GNode *gnode, GtkCTreeGNodeFunc func, gpointer data)
gtk_ctree_insert_node(GtkCTree *ctree, GtkCTreeNode *parent, GtkCTreeNode *sibling, gchar *text[], guint8 spacing, GdkPixmap *pixmap_closed, GdkBitmap *mask_closed, GdkPixmap *pixmap_opened, GdkBitmap *mask_opened, gboolean is_leaf, gboolean expanded)
gtk_ctree_is_ancestor(GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *child)
gtk_ctree_is_hot_spot(GtkCTree *ctree, gint x, gint y)
gtk_ctree_is_viewable(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_last(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_move(GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, GtkCTreeNode *new_sibling)
gtk_ctree_new(gint columns, gint tree_column)
gtk_ctree_new_with_titles(gint columns, gint tree_column, gchar *titles[])
gtk_ctree_node_get_cell_style(GtkCTree *ctree, GtkCTreeNode *node, gint column)
gtk_ctree_node_get_cell_type(GtkCTree *ctree, GtkCTreeNode *node, gint column)
gtk_ctree_node_get_pixmap(GtkCTree *ctree, GtkCTreeNode *node, gint column, GdkPixmap **pixmap, GdkBitmap **mask)
gtk_ctree_node_get_pixtext(GtkCTree *ctree, GtkCTreeNode *node, gint column, gchar **text, guint8 *spacing, GdkPixmap **pixmap, GdkBitmap **mask)
gtk_ctree_node_get_row_data(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_node_get_row_style(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_node_get_selectable(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_node_get_text(GtkCTree *ctree, GtkCTreeNode *node, gint column, gchar **text)
gtk_ctree_node_is_visible(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_node_moveto(GtkCTree *ctree, GtkCTreeNode *node, gint column, gfloat row_align, gfloat col_align)
gtk_ctree_node_nth(GtkCTree *ctree, guint row)
gtk_ctree_node_set_background(GtkCTree *ctree, GtkCTreeNode *node, GdkColor *color)
gtk_ctree_node_set_cell_style(GtkCTree *ctree, GtkCTreeNode *node, gint column, GtkStyle *style)
gtk_ctree_node_set_foreground(GtkCTree *ctree, GtkCTreeNode *node, GdkColor *color)
gtk_ctree_node_set_pixmap(GtkCTree *ctree, GtkCTreeNode *node, gint column, GdkPixmap *pixmap, GdkBitmap *mask)
gtk_ctree_node_set_pixtext(GtkCTree *ctree, GtkCTreeNode *node, gint column, const gchar *text, guint8 spacing, GdkPixmap *pixmap, GdkBitmap *mask)
gtk_ctree_node_set_row_data(GtkCTree *ctree, GtkCTreeNode *node, gpointer data)
gtk_ctree_node_set_row_data_full(GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GtkDestroyNotify destroy)
gtk_ctree_node_set_row_style(GtkCTree *ctree, GtkCTreeNode *node, GtkStyle *style)
gtk_ctree_node_set_selectable(GtkCTree *ctree, GtkCTreeNode *node, gboolean selectable)
gtk_ctree_node_set_shift(GtkCTree *ctree, GtkCTreeNode *node, gint column, gint vertical, gint horizontal)
gtk_ctree_node_set_text(GtkCTree *ctree, GtkCTreeNode *node, gint column, const gchar *text)
gtk_ctree_post_recursive(GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeFunc func, gpointer data)
gtk_ctree_post_recursive_to_depth(GtkCTree *ctree, GtkCTreeNode *node, gint depth, GtkCTreeFunc func, gpointer data)
gtk_ctree_pre_recursive(GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeFunc func, gpointer data)
gtk_ctree_pre_recursive_to_depth(GtkCTree *ctree, GtkCTreeNode *node, gint depth, GtkCTreeFunc func, gpointer data)
gtk_ctree_real_select_recursive(GtkCTree *ctree, GtkCTreeNode *node, gint state)
gtk_ctree_remove_node(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_select(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_select_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_set_drag_compare_func(GtkCTree *ctree, GtkCTreeCompareDragFunc cmp_func)
gtk_ctree_set_expander_style(GtkCTree *ctree, GtkCTreeExpanderStyle expander_style)
gtk_ctree_set_indent(GtkCTree *ctree, gint indent)
gtk_ctree_set_line_style(GtkCTree *ctree, GtkCTreeLineStyle line_style)
gtk_ctree_set_node_info(GtkCTree *ctree, GtkCTreeNode *node, const gchar *text, guint8 spacing, GdkPixmap *pixmap_closed, GdkBitmap *mask_closed, GdkPixmap *pixmap_opened, GdkBitmap *mask_opened, gboolean is_leaf, gboolean expanded)
gtk_ctree_set_reorderable
gtk_ctree_set_show_stub(GtkCTree *ctree, gboolean show_stub)
gtk_ctree_set_spacing(GtkCTree *ctree, gint spacing)
gtk_ctree_sort_node(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_sort_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_toggle_expansion(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_toggle_expansion_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_unselect(GtkCTree *ctree, GtkCTreeNode *node)
gtk_ctree_unselect_recursive(GtkCTree *ctree, GtkCTreeNode *node)
gtk_curve_get_type(void)
gtk_curve_get_vector(GtkCurve *curve, int veclen, gfloat vector[])
gtk_curve_new(void)
gtk_curve_reset(GtkCurve *curve)
gtk_curve_set_curve_type(GtkCurve *curve, GtkCurveType type)
gtk_curve_set_gamma(GtkCurve *curve, gfloat gamma)
gtk_curve_set_range(GtkCurve *curve, gfloat min_x, gfloat max_x, gfloat min_y, gfloat max_y)
gtk_curve_set_vector(GtkCurve *curve, int veclen, gfloat vector[])
gtk_data_get_type(void)
gtk_dial_get_adjustment(GtkDial *dial)
gtk_dial_get_percentage(GtkDial *dial)
gtk_dial_get_type(void)
gtk_dial_get_value(GtkDial *dial)
gtk_dial_new(GtkAdjustment *adjustment)
gtk_dial_set_adjustment(GtkDial *dial, GtkAdjustment *adjustment)
gtk_dial_set_percentage(GtkDial *dial, gfloat percent)
gtk_dial_set_update_policy(GtkDial *dial, GtkUpdateType policy)
gtk_dial_set_value(GtkDial *dial, gfloat value)
gtk_dial_set_view_only(GtkDial *dial, gboolean view_only)
gtk_dialog_cauldron(const gchar * title, glong options, ...)
gtk_dialog_cauldron_get_error(void)
gtk_dialog_cauldron_parse(const gchar * title, glong options, const gchar * format, GtkCauldronNextArgCallback next_arg, gpointer user_data, GtkWidget *parent)
gtk_dialog_get_type(void)
gtk_dialog_new(void)
gtk_drag_begin(GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event)
gtk_drag_dest_handle_event(GtkWidget *toplevel, GdkEvent *event)
gtk_drag_dest_set(GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
gtk_drag_dest_set_proxy(GtkWidget *widget, GdkWindow *proxy_window, GdkDragProtocol protocol, gboolean use_coordinates)
gtk_drag_dest_unset(GtkWidget *widget)
gtk_drag_finish(GdkDragContext *context, gboolean success, gboolean del, guint32 time)
gtk_drag_get_data(GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time)
gtk_drag_get_source_widget(GdkDragContext *context)
gtk_drag_highlight(GtkWidget *widget)
gtk_drag_set_default_icon(GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask, gint hot_x, gint hot_y)
gtk_drag_set_icon_default(GdkDragContext *context)
gtk_drag_set_icon_pixmap(GdkDragContext *context, GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask, gint hot_x, gint hot_y)
gtk_drag_set_icon_widget(GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y)
gtk_drag_source_handle_event(GtkWidget *widget, GdkEvent *event)
gtk_drag_source_set(GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
gtk_drag_source_set_icon(GtkWidget *widget, GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask)
gtk_drag_source_unset(GtkWidget *widget)
gtk_drag_unhighlight(GtkWidget *widget)
gtk_draw_arrow(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height)
gtk_draw_box(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_box_gap(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
gtk_draw_check(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_cross(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_diamond(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_extension(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side)
gtk_draw_flat_box(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_focus(GtkStyle *style, GdkWindow *window, gint x, gint y, gint width, gint height)
gtk_draw_handle(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkOrientation orientation)
gtk_draw_hline(GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint x1, gint x2, gint y)
gtk_draw_option(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_oval(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_polygon(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkPoint *points, gint npoints, gboolean fill)
gtk_draw_ramp(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GtkArrowType arrow_type, gint x, gint y, gint width, gint height)
gtk_draw_shadow(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_shadow_gap(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
gtk_draw_slider(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkOrientation orientation)
gtk_draw_string(GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint x, gint y, const gchar *string)
gtk_draw_tab(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height)
gtk_draw_vline(GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint y1, gint y2, gint x)
gtk_drawing_area_get_type(void)
gtk_drawing_area_new(void)
gtk_drawing_area_size(GtkDrawingArea *darea, gint width, gint height)
gtk_editable_changed(GtkEditable *editable)
gtk_editable_claim_selection(GtkEditable *editable, gboolean claim, guint32 time)
gtk_editable_copy_clipboard(GtkEditable *editable)
gtk_editable_cut_clipboard(GtkEditable *editable)
gtk_editable_delete_selection(GtkEditable *editable)
gtk_editable_delete_text(GtkEditable *editable, gint start_pos, gint end_pos)
gtk_editable_get_chars(GtkEditable *editable, gint start_pos, gint end_pos)
gtk_editable_get_position(GtkEditable *editable)
gtk_editable_get_type(void)
gtk_editable_insert_text(GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position)
gtk_editable_paste_clipboard(GtkEditable *editable)
gtk_editable_select_region(GtkEditable *editable, gint start, gint end)
gtk_editable_set_editable(GtkEditable *editable, gboolean is_editable)
gtk_editable_set_position(GtkEditable *editable, gint position)
gtk_entry_append_text(GtkEntry *entry, const gchar *text)
gtk_entry_get_text(GtkEntry *entry)
gtk_entry_get_type(void)
gtk_entry_new(void)
gtk_entry_new_with_max_length(guint16 max)
gtk_entry_prepend_text(GtkEntry *entry, const gchar *text)
gtk_entry_select_region(GtkEntry *entry, gint start, gint end)
gtk_entry_set_editable(GtkEntry *entry, gboolean editable)
gtk_entry_set_max_length(GtkEntry *entry, guint16 max)
gtk_entry_set_position(GtkEntry *entry, gint position)
gtk_entry_set_text(GtkEntry *entry, const gchar *text)
gtk_entry_set_visibility(GtkEntry *entry, gboolean visible)
gtk_event_box_get_type(void)
gtk_event_box_new(void)
gtk_events_pending(void)
gtk_exit(gint error_code)
gtk_false(void)
gtk_file_selection_complete(GtkFileSelection *filesel, const gchar *pattern)
gtk_file_selection_get_filename(GtkFileSelection *filesel)
gtk_file_selection_get_type(void)
gtk_file_selection_hide_fileop_buttons(GtkFileSelection *filesel)
gtk_file_selection_new(const gchar *title)
gtk_file_selection_set_filename(GtkFileSelection *filesel, const gchar *filename)
gtk_file_selection_show_fileop_buttons(GtkFileSelection *filesel)
gtk_fixed_get_type(void)
gtk_fixed_move(GtkFixed *fixed, GtkWidget *widget, gint16 x, gint16 y)
gtk_fixed_new(void)
gtk_fixed_put(GtkFixed *fixed, GtkWidget *widget, gint16 x, gint16 y)
gtk_font_selection_dialog_get_font(GtkFontSelectionDialog *fsd)
gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog *fsd)
gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog *fsd)
gtk_font_selection_dialog_get_type(void)
gtk_font_selection_dialog_new(const gchar *title)
gtk_font_selection_dialog_set_filter(GtkFontSelectionDialog *fsd, GtkFontFilterType filter_type, GtkFontType font_type, gchar **foundries, gchar **weights, gchar **slants, gchar **setwidths, gchar **spacings, gchar **charsets)
gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog *fsd, const gchar *fontname)
gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog *fsd, const gchar *text)
gtk_font_selection_get_font(GtkFontSelection *fontsel)
gtk_font_selection_get_font_name(GtkFontSelection *fontsel)
gtk_font_selection_get_preview_text(GtkFontSelection *fontsel)
gtk_font_selection_get_type(void)
gtk_font_selection_new(void)
gtk_font_selection_set_filter(GtkFontSelection *fontsel, GtkFontFilterType filter_type, GtkFontType font_type, gchar **foundries, gchar **weights, gchar **slants, gchar **setwidths, gchar **spacings, gchar **charsets)
gtk_font_selection_set_font_name(GtkFontSelection *fontsel, const gchar *fontname)
gtk_font_selection_set_preview_text(GtkFontSelection *fontsel, const gchar *text)
gtk_frame_get_type(void)
gtk_frame_new(const gchar *label)
gtk_frame_set_label(GtkFrame *frame, const gchar *label)
gtk_frame_set_label_align(GtkFrame *frame, gfloat xalign, gfloat yalign)
gtk_frame_set_shadow_type(GtkFrame *frame, GtkShadowType type)
gtk_gamma_curve_get_type(void)
gtk_gamma_curve_new(void)
gtk_gc_get(gint depth, GdkColormap *colormap, GdkGCValues *values, GdkGCValuesMask values_mask)
gtk_gc_release(GdkGC *gc)
gtk_get_current_event(void)
gtk_get_event_widget(GdkEvent *event)
gtk_grab_add(GtkWidget *widget)
gtk_grab_get_current(void)
gtk_grab_remove(GtkWidget *widget)
gtk_handle_box_get_type(void)
gtk_handle_box_new(void)
gtk_handle_box_set_handle_position(GtkHandleBox *handle_box, GtkPositionType position)
gtk_handle_box_set_shadow_type(GtkHandleBox *handle_box, GtkShadowType type)
gtk_handle_box_set_snap_edge(GtkHandleBox *handle_box, GtkPositionType edge)
gtk_hbox_get_type(void)
gtk_hbox_new(gboolean homogeneous, gint spacing)
gtk_hbutton_box_get_layout_default(void)
gtk_hbutton_box_get_spacing_default(void)
gtk_hbutton_box_get_type(void)
gtk_hbutton_box_new(void)
gtk_hbutton_box_set_layout_default(GtkButtonBoxStyle layout)
gtk_hbutton_box_set_spacing_default(gint spacing)
gtk_hpaned_get_type(void)
gtk_hpaned_new(void)
gtk_hruler_get_type(void)
gtk_hruler_new(void)
gtk_hscale_get_type(void)
gtk_hscale_new(GtkAdjustment *adjustment)
gtk_hscrollbar_get_type(void)
gtk_hscrollbar_new(GtkAdjustment *adjustment)
gtk_hseparator_get_type(void)
gtk_hseparator_new(void)
gtk_identifier_get_type(void)
gtk_idle_add(GtkFunction function, gpointer data)
gtk_idle_add_full(gint priority, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify destroy)
gtk_idle_add_priority(gint priority, GtkFunction function, gpointer data)
gtk_idle_remove(guint idle_handler_id)
gtk_idle_remove_by_data(gpointer data)
gtk_image_get(GtkImage *image, GdkImage **val, GdkBitmap **mask)
gtk_image_get_type(void)
gtk_image_new(GdkImage *val, GdkBitmap *mask)
gtk_image_set(GtkImage *image, GdkImage *val, GdkBitmap *mask)
gtk_init(int *argc, char ***argv)
gtk_init_add(GtkFunction function, gpointer data)
gtk_init_check(int *argc, char ***argv)
gtk_input_add_full(gint source, GdkInputCondition condition, GdkInputFunction function, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify destroy)
gtk_input_dialog_get_type(void)
gtk_input_dialog_new(void)
gtk_input_remove(guint input_handler_id)
gtk_invisible_get_type(void)
gtk_invisible_new(void)
gtk_item_deselect(GtkItem *item)
gtk_item_factories_path_delete(const gchar *ifactory_path, const gchar *path)
gtk_item_factory_add_foreign(GtkWidget *accel_widget, const gchar *full_path, GtkAccelGroup *accel_group, guint keyval, GdkModifierType modifiers)
gtk_item_factory_construct(GtkItemFactory *ifactory, GtkType container_type, const gchar *path, GtkAccelGroup *accel_group)
gtk_item_factory_create_item(GtkItemFactory *ifactory, GtkItemFactoryEntry *entry, gpointer callback_data, guint callback_type)
gtk_item_factory_create_items(GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data)
gtk_item_factory_create_items_ac(GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data, guint callback_type)
gtk_item_factory_create_menu_entries(guint n_entries, GtkMenuEntry *entries)
gtk_item_factory_delete_entries(GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries)
gtk_item_factory_delete_entry(GtkItemFactory *ifactory, GtkItemFactoryEntry *entry)
gtk_item_factory_delete_item(GtkItemFactory *ifactory, const gchar *path)
gtk_item_factory_dump_items(GtkPatternSpec *path_pspec, gboolean modified_only, GtkPrintFunc print_func, gpointer func_data)
gtk_item_factory_dump_rc(const gchar *file_name, GtkPatternSpec *path_pspec, gboolean modified_only)
gtk_item_factory_from_path(const gchar *path)
gtk_item_factory_from_widget(GtkWidget *widget)
gtk_item_factory_get_item(GtkItemFactory *ifactory, const gchar *path)
gtk_item_factory_get_item_by_action(GtkItemFactory *ifactory, guint action)
gtk_item_factory_get_type(void)
gtk_item_factory_get_widget(GtkItemFactory *ifactory, const gchar *path)
gtk_item_factory_get_widget_by_action(GtkItemFactory *ifactory, guint action)
gtk_item_factory_new(GtkType container_type, const gchar *path, GtkAccelGroup *accel_group)
gtk_item_factory_parse_rc(const gchar *file_name)
gtk_item_factory_parse_rc_scanner(GScanner *scanner)
gtk_item_factory_parse_rc_string(const gchar *rc_string)
gtk_item_factory_path_from_widget(GtkWidget *widget)
gtk_item_factory_popup(GtkItemFactory *ifactory, guint x, guint y, guint mouse_button, guint32 time)
gtk_item_factory_popup_data(GtkItemFactory *ifactory)
gtk_item_factory_popup_data_from_widget(GtkWidget *widget)
gtk_item_factory_popup_with_data(GtkItemFactory *ifactory, gpointer popup_data, GtkDestroyNotify destroy, guint x, guint y, guint mouse_button, guint32 time)
gtk_item_factory_print_func(gpointer FILE_pointer, gchar *string)
gtk_item_factory_set_translate_func(GtkItemFactory *ifactory, GtkTranslateFunc func, gpointer data, GtkDestroyNotify notify)
gtk_item_get_type(void)
gtk_item_select(GtkItem *item)
gtk_item_toggle(GtkItem *item)
gtk_key_snooper_install(GtkKeySnoopFunc snooper, gpointer func_data)
gtk_key_snooper_remove(guint snooper_handler_id)
gtk_label_get(GtkLabel *label, gchar **str)
gtk_label_get_type(void)
gtk_label_new(const gchar *str)
gtk_label_parse_uline(GtkLabel *label, const gchar *string)
gtk_label_set
gtk_label_set_justify(GtkLabel *label, GtkJustification jtype)
gtk_label_set_line_wrap(GtkLabel *label, gboolean wrap)
gtk_label_set_pattern(GtkLabel *label, const gchar *pattern)
gtk_label_set_text(GtkLabel *label, const gchar *str)
gtk_layout_freeze(GtkLayout *layout)
gtk_layout_get_hadjustment(GtkLayout *layout)
gtk_layout_get_type(void)
gtk_layout_get_vadjustment(GtkLayout *layout)
gtk_layout_move(GtkLayout *layout, GtkWidget *widget, gint x, gint y)
gtk_layout_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
gtk_layout_put(GtkLayout *layout, GtkWidget *widget, gint x, gint y)
gtk_layout_set_hadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
gtk_layout_set_size(GtkLayout *layout, guint width, guint height)
gtk_layout_set_vadjustment(GtkLayout *layout, GtkAdjustment *adjustment)
gtk_layout_thaw(GtkLayout *layout)
gtk_list_append_items(GtkList *list, GList *items)
gtk_list_child_position(GtkList *list, GtkWidget *child)
gtk_list_clear_items(GtkList *list, gint start, gint end)
gtk_list_end_drag_selection(GtkList *list)
gtk_list_end_selection(GtkList *list)
gtk_list_extend_selection(GtkList *list, GtkScrollType scroll_type, gfloat position, gboolean auto_start_selection)
gtk_list_get_type(void)
gtk_list_insert_items(GtkList *list, GList *items, gint position)
gtk_list_item_deselect(GtkListItem *list_item)
gtk_list_item_get_type(void)
gtk_list_item_new(void)
gtk_list_item_new_with_label(const gchar *label)
gtk_list_item_select(GtkListItem *list_item)
gtk_list_new(void)
gtk_list_prepend_items(GtkList *list, GList *items)
gtk_list_remove_items(GtkList *list, GList *items)
gtk_list_remove_items_no_unref(GtkList *list, GList *items)
gtk_list_scroll_horizontal(GtkList *list, GtkScrollType scroll_type, gfloat position)
gtk_list_scroll_vertical(GtkList *list, GtkScrollType scroll_type, gfloat position)
gtk_list_select_all(GtkList *list)
gtk_list_select_child(GtkList *list, GtkWidget *child)
gtk_list_select_item(GtkList *list, gint item)
gtk_list_set_selection_mode(GtkList *list, GtkSelectionMode mode)
gtk_list_start_selection(GtkList *list)
gtk_list_toggle_add_mode(GtkList *list)
gtk_list_toggle_focus_row(GtkList *list)
gtk_list_toggle_row(GtkList *list, GtkWidget *item)
gtk_list_undo_selection(GtkList *list)
gtk_list_unselect_all(GtkList *list)
gtk_list_unselect_child(GtkList *list, GtkWidget *child)
gtk_list_unselect_item(GtkList *list, gint item)
gtk_main(void)
gtk_main_do_event(GdkEvent *event)
gtk_main_iteration(void)
gtk_main_iteration_do(gboolean blocking)
gtk_main_level(void)
gtk_main_quit(void)
gtk_marshal_BOOL__NONE(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER_INT_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER_INT_INT_UINT
gtk_marshal_BOOL__POINTER_POINTER_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER
gtk_marshal_ENUM__ENUM
gtk_marshal_INT__INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_INT__POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_INT__POINTER_CHAR_CHAR(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__BOOL(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__BOXED
gtk_marshal_NONE__C_CALLBACK(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__C_CALLBACK_C_CALLBACK(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__ENUM
gtk_marshal_NONE__ENUM_FLOAT
gtk_marshal_NONE__ENUM_FLOAT_BOOL
gtk_marshal_NONE__INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_FLOAT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_FLOAT_BOOL(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_INT_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_POINTER_INT_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__NONE(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__OBJECT
gtk_marshal_NONE__POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT
gtk_marshal_NONE__POINTER_INT_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_POINTER_INT_INT(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_POINTER_POINTER(GtkObject * object, GtkSignalFunc func, gpointer func_data, GtkArg * args)
gtk_marshal_NONE__POINTER_POINTER_UINT_UINT
gtk_marshal_NONE__POINTER_STRING_STRING
gtk_marshal_NONE__POINTER_UINT
gtk_marshal_NONE__POINTER_UINT_ENUM
gtk_marshal_NONE__POINTER_UINT_UINT
gtk_marshal_NONE__STRING
gtk_marshal_NONE__STRING_INT_POINTER
gtk_marshal_NONE__UINT
gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER
gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM
gtk_marshal_NONE__UINT_STRING
gtk_menu_append(GtkMenu *menu, GtkWidget *child)
gtk_menu_attach_to_widget(GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher)
gtk_menu_bar_append(GtkMenuBar *menu_bar, GtkWidget *child)
gtk_menu_bar_get_type(void)
gtk_menu_bar_insert(GtkMenuBar *menu_bar, GtkWidget *child, gint position)
gtk_menu_bar_new(void)
gtk_menu_bar_prepend(GtkMenuBar *menu_bar, GtkWidget *child)
gtk_menu_bar_set_shadow_type(GtkMenuBar *menu_bar, GtkShadowType type)
gtk_menu_detach(GtkMenu *menu)
gtk_menu_ensure_uline_accel_group(GtkMenu *menu)
gtk_menu_factory_add_entries(GtkMenuFactory *factory, GtkMenuEntry *entries, int nentries)
gtk_menu_factory_add_subfactory(GtkMenuFactory *factory, GtkMenuFactory *subfactory, const char *path)
gtk_menu_factory_destroy(GtkMenuFactory *factory)
gtk_menu_factory_find(GtkMenuFactory *factory, const char *path)
gtk_menu_factory_new(GtkMenuFactoryType type)
gtk_menu_factory_remove_entries(GtkMenuFactory *factory, GtkMenuEntry *entries, int nentries)
gtk_menu_factory_remove_paths(GtkMenuFactory *factory, char **paths, int npaths)
gtk_menu_factory_remove_subfactory(GtkMenuFactory *factory, GtkMenuFactory *subfactory, const char *path)
gtk_menu_get_accel_group(GtkMenu *menu)
gtk_menu_get_active(GtkMenu *menu)
gtk_menu_get_attach_widget(GtkMenu *menu)
gtk_menu_get_type(void)
gtk_menu_get_uline_accel_group(GtkMenu *menu)
gtk_menu_insert(GtkMenu *menu, GtkWidget *child, gint position)
gtk_menu_item_activate(GtkMenuItem *menu_item)
gtk_menu_item_configure(GtkMenuItem *menu_item, gint show_toggle_indicator, gint show_submenu_indicator)
gtk_menu_item_deselect(GtkMenuItem *menu_item)
gtk_menu_item_get_type(void)
gtk_menu_item_new(void)
gtk_menu_item_new_with_label(const gchar *label)
gtk_menu_item_remove_submenu(GtkMenuItem *menu_item)
gtk_menu_item_right_justify(GtkMenuItem *menu_item)
gtk_menu_item_select(GtkMenuItem *menu_item)
gtk_menu_item_set_placement(GtkMenuItem *menu_item, GtkSubmenuPlacement placement)
gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
gtk_menu_new(void)
gtk_menu_popdown(GtkMenu *menu)
gtk_menu_popup(GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time)
gtk_menu_prepend(GtkMenu *menu, GtkWidget *child)
gtk_menu_reorder_child(GtkMenu *menu, GtkWidget *child, gint position)
gtk_menu_reposition(GtkMenu *menu)
gtk_menu_set_accel_group(GtkMenu *menu, GtkAccelGroup *accel_group)
gtk_menu_set_active(GtkMenu *menu, guint index)
gtk_menu_set_tearoff_state(GtkMenu *menu, gboolean torn_off)
gtk_menu_set_title(GtkMenu *menu, const gchar *title)
gtk_menu_shell_activate_item(GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate)
gtk_menu_shell_append(GtkMenuShell *menu_shell, GtkWidget *child)
gtk_menu_shell_deactivate(GtkMenuShell *menu_shell)
gtk_menu_shell_deselect(GtkMenuShell *menu_shell)
gtk_menu_shell_get_type(void)
gtk_menu_shell_insert(GtkMenuShell *menu_shell, GtkWidget *child, gint position)
gtk_menu_shell_prepend(GtkMenuShell *menu_shell, GtkWidget *child)
gtk_menu_shell_select_item(GtkMenuShell *menu_shell, GtkWidget *menu_item)
gtk_misc_get_type(void)
gtk_misc_set_alignment(GtkMisc *misc, gfloat xalign, gfloat yalign)
gtk_misc_set_padding(GtkMisc *misc, gint xpad, gint ypad)
gtk_notebook_append_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
gtk_notebook_append_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
gtk_notebook_current_page
gtk_notebook_get_current_page(GtkNotebook *notebook)
gtk_notebook_get_menu_label(GtkNotebook *notebook, GtkWidget *child)
gtk_notebook_get_nth_page(GtkNotebook *notebook, gint page_num)
gtk_notebook_get_tab_label(GtkNotebook *notebook, GtkWidget *child)
gtk_notebook_get_type(void)
gtk_notebook_insert_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position)
gtk_notebook_insert_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position)
gtk_notebook_new(void)
gtk_notebook_next_page(GtkNotebook *notebook)
gtk_notebook_page_num(GtkNotebook *notebook, GtkWidget *child)
gtk_notebook_popup_disable(GtkNotebook *notebook)
gtk_notebook_popup_enable(GtkNotebook *notebook)
gtk_notebook_prepend_page(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
gtk_notebook_prepend_page_menu(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label)
gtk_notebook_prev_page(GtkNotebook *notebook)
gtk_notebook_query_tab_label_packing(GtkNotebook *notebook, GtkWidget *child, gboolean *expand, gboolean *fill, GtkPackType *pack_type)
gtk_notebook_remove_page(GtkNotebook *notebook, gint page_num)
gtk_notebook_reorder_child(GtkNotebook *notebook, GtkWidget *child, gint position)
gtk_notebook_set_homogeneous_tabs(GtkNotebook *notebook, gboolean homogeneous)
gtk_notebook_set_menu_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label)
gtk_notebook_set_menu_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text)
gtk_notebook_set_page(GtkNotebook *notebook, gint page_num)
gtk_notebook_set_scrollable(GtkNotebook *notebook, gboolean scrollable)
gtk_notebook_set_show_border(GtkNotebook *notebook, gboolean show_border)
gtk_notebook_set_show_tabs(GtkNotebook *notebook, gboolean show_tabs)
gtk_notebook_set_tab_border(GtkNotebook *notebook, guint border_width)
gtk_notebook_set_tab_hborder(GtkNotebook *notebook, guint tab_hborder)
gtk_notebook_set_tab_label(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label)
gtk_notebook_set_tab_label_packing(GtkNotebook *notebook, GtkWidget *child, gboolean expand, gboolean fill, GtkPackType pack_type)
gtk_notebook_set_tab_label_text(GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text)
gtk_notebook_set_tab_pos(GtkNotebook *notebook, GtkPositionType pos)
gtk_notebook_set_tab_vborder(GtkNotebook *notebook, guint tab_vborder)
gtk_object_add_arg_type(const gchar *arg_name, GtkType arg_type, guint arg_flags, guint arg_id)
gtk_object_arg_get(GtkObject *object, GtkArg *arg, GtkArgInfo *info)
gtk_object_arg_get_info(GtkType object_type, const gchar *arg_name, GtkArgInfo **info_p)
gtk_object_arg_set(GtkObject *object, GtkArg *arg, GtkArgInfo *info)
gtk_object_args_collect(GtkType object_type, GSList **arg_list_p, GSList **info_list_p, const gchar *first_arg_name, va_list var_args)
gtk_object_class_add_signals(GtkObjectClass *klass, guint *signals, guint nsignals)
gtk_object_class_user_signal_new(GtkObjectClass *klass, const gchar *name, GtkSignalRunType signal_flags, GtkSignalMarshaller marshaller, GtkType return_val, guint nparams, ...)
gtk_object_class_user_signal_newv(GtkObjectClass *klass, const gchar *name, GtkSignalRunType signal_flags, GtkSignalMarshaller marshaller, GtkType return_val, guint nparams, GtkType *params)
gtk_object_constructed(GtkObject *object)
gtk_object_data_force_id
gtk_object_data_try_key
gtk_object_default_construct(GtkObject *object)
gtk_object_destroy(GtkObject *object)
gtk_object_get(GtkObject *object, const gchar *first_arg_name, ...)
gtk_object_get_data(GtkObject *object, const gchar *key)
gtk_object_get_data_by_id(GtkObject *object, GQuark data_id)
gtk_object_get_type(void)
gtk_object_get_user_data(GtkObject *object)
gtk_object_getv(GtkObject *object, guint n_args, GtkArg *args)
gtk_object_new(GtkType type, const gchar *first_arg_name, ...)
gtk_object_newv(GtkType object_type, guint n_args, GtkArg *args)
gtk_object_query_args(GtkType class_type, guint32 **arg_flags, guint *n_args)
gtk_object_ref(GtkObject *object)
gtk_object_ref
gtk_object_remove_data(GtkObject *object, const gchar *key)
gtk_object_remove_data_by_id(GtkObject *object, GQuark data_id)
gtk_object_remove_no_notify(GtkObject *object, const gchar *key)
gtk_object_remove_no_notify_by_id(GtkObject *object, GQuark key_id)
gtk_object_set(GtkObject *object, const gchar *first_arg_name, ...)
gtk_object_set_data(GtkObject *object, const gchar *key, gpointer data)
gtk_object_set_data_by_id(GtkObject *object, GQuark data_id, gpointer data)
gtk_object_set_data_by_id_full(GtkObject *object, GQuark data_id, gpointer data, GtkDestroyNotify destroy)
gtk_object_set_data_full(GtkObject *object, const gchar *key, gpointer data, GtkDestroyNotify destroy)
gtk_object_set_user_data(GtkObject *object, gpointer data)
gtk_object_setv(GtkObject *object, guint n_args, GtkArg *args)
gtk_object_sink(GtkObject *object)
gtk_object_unref(GtkObject *object)
gtk_object_unref
gtk_object_weakref(GtkObject *object, GtkDestroyNotify notify, gpointer data)
gtk_object_weakunref(GtkObject *object, GtkDestroyNotify notify, gpointer data)
gtk_option_menu_get_menu(GtkOptionMenu *option_menu)
gtk_option_menu_get_type(void)
gtk_option_menu_new(void)
gtk_option_menu_remove_menu(GtkOptionMenu *option_menu)
gtk_option_menu_set_history(GtkOptionMenu *option_menu, guint index)
gtk_option_menu_set_menu(GtkOptionMenu *option_menu, GtkWidget *menu)
gtk_packer_add(GtkPacker *packer, GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options, guint border_width, guint pad_x, guint pad_y, guint i_pad_x, guint i_pad_y)
gtk_packer_add_defaults(GtkPacker *packer, GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options)
gtk_packer_configure
gtk_packer_get_type(void)
gtk_packer_new(void)
gtk_packer_reorder_child(GtkPacker *packer, GtkWidget *child, gint position)
gtk_packer_set_child_packing(GtkPacker *packer, GtkWidget *child, GtkSideType side, GtkAnchorType anchor, GtkPackerOptions options, guint border_width, guint pad_x, guint pad_y, guint i_pad_x, guint i_pad_y)
gtk_packer_set_default_border_width(GtkPacker *packer, guint border)
gtk_packer_set_default_ipad(GtkPacker *packer, guint i_pad_x, guint i_pad_y)
gtk_packer_set_default_pad(GtkPacker *packer, guint pad_x, guint pad_y)
gtk_packer_set_spacing(GtkPacker *packer, guint spacing)
gtk_paint_arrow(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height)
gtk_paint_box(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_box_gap(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
gtk_paint_check(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_cross(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_diamond(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_extension(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side)
gtk_paint_flat_box(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_focus(GtkStyle *style, GdkWindow *window, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_handle(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
gtk_paint_hline(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x1, gint x2, gint y)
gtk_paint_option(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_oval(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_polygon(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, GdkPoint *points, gint npoints, gboolean fill)
gtk_paint_ramp(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, GtkArrowType arrow_type, gint x, gint y, gint width, gint height)
gtk_paint_shadow(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_shadow_gap(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width)
gtk_paint_slider(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation)
gtk_paint_string(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, const gchar *string)
gtk_paint_tab(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint x, gint y, gint width, gint height)
gtk_paint_vline(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GdkRectangle *area, GtkWidget *widget, gchar *detail, gint y1, gint y2, gint x)
gtk_paned_add1(GtkPaned *paned, GtkWidget *child)
gtk_paned_add2(GtkPaned *paned, GtkWidget *child)
gtk_paned_compute_position(GtkPaned *paned, gint allocation, gint child1_req, gint child2_req)
gtk_paned_get_type(void)
gtk_paned_gutter_size
gtk_paned_handle_size
gtk_paned_pack1(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
gtk_paned_pack2(GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink)
gtk_paned_set_gutter_size(GtkPaned *paned, guint16 size)
gtk_paned_set_handle_size(GtkPaned *paned, guint16 size)
gtk_paned_set_position(GtkPaned *paned, gint position)
gtk_pattern_match(GtkPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed)
gtk_pattern_match_simple(const gchar *pattern, const gchar *string)
gtk_pattern_match_string(GtkPatternSpec *pspec, const gchar *string)
gtk_pattern_spec_free_segs(GtkPatternSpec *pspec)
gtk_pattern_spec_init(GtkPatternSpec *pspec, const gchar *pattern)
gtk_pixmap_get(GtkPixmap *pixmap, GdkPixmap **val, GdkBitmap **mask)
gtk_pixmap_get_type(void)
gtk_pixmap_menu_item_get_type(void)
gtk_pixmap_menu_item_new(void)
gtk_pixmap_menu_item_set_pixmap(GtkPixmapMenuItem *menu_item, GtkWidget *pixmap)
gtk_pixmap_new(GdkPixmap *pixmap, GdkBitmap *mask)
gtk_pixmap_set(GtkPixmap *pixmap, GdkPixmap *val, GdkBitmap *mask)
gtk_pixmap_set_build_insensitive(GtkPixmap *pixmap, guint build)
gtk_plug_construct(GtkPlug *plug, guint32 socket_id)
gtk_plug_get_type(void)
gtk_plug_new(guint32 socket_id)
gtk_preview_draw_row(GtkPreview *preview, guchar *data, gint x, gint y, gint w)
gtk_preview_get_cmap(void)
gtk_preview_get_info(void)
gtk_preview_get_type(void)
gtk_preview_get_visual(void)
gtk_preview_new(GtkPreviewType type)
gtk_preview_put(GtkPreview *preview, GdkWindow *window, GdkGC *gc, gint srcx, gint srcy, gint destx, gint desty, gint width, gint height)
gtk_preview_reset(void)
gtk_preview_set_color_cube(guint nred_shades, guint ngreen_shades, guint nblue_shades, guint ngray_shades)
gtk_preview_set_dither(GtkPreview *preview, GdkRgbDither dither)
gtk_preview_set_expand(GtkPreview *preview, gboolean expand)
gtk_preview_set_gamma(double gamma)
gtk_preview_set_install_cmap(gint install_cmap)
gtk_preview_set_reserved(gint nreserved)
gtk_preview_size(GtkPreview *preview, gint width, gint height)
gtk_preview_uninit(void)
gtk_progress_bar_get_type(void)
gtk_progress_bar_new(void)
gtk_progress_bar_new_with_adjustment(GtkAdjustment *adjustment)
gtk_progress_bar_set_activity_blocks(GtkProgressBar *pbar, guint blocks)
gtk_progress_bar_set_activity_step(GtkProgressBar *pbar, guint step)
gtk_progress_bar_set_bar_style(GtkProgressBar *pbar, GtkProgressBarStyle style)
gtk_progress_bar_set_discrete_blocks(GtkProgressBar *pbar, guint blocks)
gtk_progress_bar_set_orientation(GtkProgressBar *pbar, GtkProgressBarOrientation orientation)
gtk_progress_bar_update(GtkProgressBar *pbar, gfloat percentage)
gtk_progress_configure(GtkProgress *progress, gfloat value, gfloat min, gfloat max)
gtk_progress_get_current_percentage(GtkProgress *progress)
gtk_progress_get_current_text(GtkProgress *progress)
gtk_progress_get_percentage_from_value(GtkProgress *progress, gfloat value)
gtk_progress_get_text_from_value(GtkProgress *progress, gfloat value)
gtk_progress_get_type(void)
gtk_progress_get_value(GtkProgress *progress)
gtk_progress_set_activity_mode(GtkProgress *progress, guint activity_mode)
gtk_progress_set_adjustment(GtkProgress *progress, GtkAdjustment *adjustment)
gtk_progress_set_format_string(GtkProgress *progress, const gchar *format)
gtk_progress_set_percentage(GtkProgress *progress, gfloat percentage)
gtk_progress_set_show_text(GtkProgress *progress, gint show_text)
gtk_progress_set_text_alignment(GtkProgress *progress, gfloat x_align, gfloat y_align)
gtk_progress_set_value(GtkProgress *progress, gfloat value)
gtk_propagate_event(GtkWidget *widget, GdkEvent *event)
gtk_quit_add(guint main_level, GtkFunction function, gpointer data)
gtk_quit_add_destroy(guint main_level, GtkObject *object)
gtk_quit_add_full(guint main_level, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify destroy)
gtk_quit_remove(guint quit_handler_id)
gtk_quit_remove_by_data(gpointer data)
gtk_radio_button_get_type(void)
gtk_radio_button_group(GtkRadioButton *radio_button)
gtk_radio_button_new(GSList *group)
gtk_radio_button_new_from_widget(GtkRadioButton *group)
gtk_radio_button_new_with_label(GSList *group, const gchar *label)
gtk_radio_button_new_with_label_from_widget(GtkRadioButton *group, const gchar *label)
gtk_radio_button_set_group(GtkRadioButton *radio_button, GSList *group)
gtk_radio_menu_item_get_type(void)
gtk_radio_menu_item_group(GtkRadioMenuItem *radio_menu_item)
gtk_radio_menu_item_new(GSList *group)
gtk_radio_menu_item_new_with_label(GSList *group, const gchar *label)
gtk_radio_menu_item_set_group(GtkRadioMenuItem *radio_menu_item, GSList *group)
gtk_range_clear_background(GtkRange *range)
gtk_range_default_hmotion(GtkRange *range, gint xdelta, gint ydelta)
gtk_range_default_hslider_update(GtkRange *range)
gtk_range_default_htrough_click(GtkRange *range, gint x, gint y, gfloat *jump_perc)
gtk_range_default_vmotion(GtkRange *range, gint xdelta, gint ydelta)
gtk_range_default_vslider_update(GtkRange *range)
gtk_range_default_vtrough_click(GtkRange *range, gint x, gint y, gfloat *jump_perc)
gtk_range_draw_background(GtkRange *range)
gtk_range_draw_slider(GtkRange *range)
gtk_range_draw_step_back(GtkRange *range)
gtk_range_draw_step_forw(GtkRange *range)
gtk_range_draw_trough(GtkRange *range)
gtk_range_get_adjustment(GtkRange *range)
gtk_range_get_type(void)
gtk_range_set_adjustment(GtkRange *range, GtkAdjustment *adjustment)
gtk_range_set_update_policy(GtkRange *range, GtkUpdateType policy)
gtk_range_slider_update(GtkRange *range)
gtk_range_trough_click(GtkRange *range, gint x, gint y, gfloat *jump_perc)
gtk_rc_add_class_style(GtkRcStyle *rc_style, const gchar *pattern)
gtk_rc_add_default_file(const gchar *filename)
gtk_rc_add_widget_class_style(GtkRcStyle *rc_style, const gchar *pattern)
gtk_rc_add_widget_name_style(GtkRcStyle *rc_style, const gchar *pattern)
gtk_rc_find_module_in_path(const gchar *module_file)
gtk_rc_find_pixmap_in_path(GScanner *scanner, const gchar *pixmap_file)
gtk_rc_get_default_files(void)
gtk_rc_get_module_dir(void)
gtk_rc_get_style(GtkWidget *widget)
gtk_rc_get_theme_dir(void)
gtk_rc_init(void)
gtk_rc_load_image(GdkColormap *colormap, GdkColor *transparent_color, const gchar *filename)
gtk_rc_parse(const gchar *filename)
gtk_rc_parse_color(GScanner *scanner, GdkColor *color)
gtk_rc_parse_priority(GScanner *scanner, GtkPathPriorityType *priority)
gtk_rc_parse_state(GScanner *scanner, GtkStateType *state)
gtk_rc_parse_string(const gchar *rc_string)
gtk_rc_reparse_all(void)
gtk_rc_set_default_files(gchar **filenames)
gtk_rc_set_image_loader(GtkImageLoader loader)
gtk_rc_style_new(void)
gtk_rc_style_ref(GtkRcStyle *rc_style)
gtk_rc_style_unref(GtkRcStyle *rc_style)
gtk_ruler_draw_pos(GtkRuler *ruler)
gtk_ruler_draw_ticks(GtkRuler *ruler)
gtk_ruler_get_type(void)
gtk_ruler_set_metric(GtkRuler *ruler, GtkMetricType metric)
gtk_ruler_set_range(GtkRuler *ruler, gfloat lower, gfloat upper, gfloat position, gfloat max_size)
gtk_scale_draw_value(GtkScale *scale)
gtk_scale_get_type(void)
gtk_scale_get_value_width(GtkScale *scale)
gtk_scale_set_digits(GtkScale *scale, gint digits)
gtk_scale_set_draw_value(GtkScale *scale, gboolean draw_value)
gtk_scale_set_value_pos(GtkScale *scale, GtkPositionType pos)
gtk_scale_value_width
gtk_scrollbar_get_type(void)
gtk_scrolled_window_add_with_viewport(GtkScrolledWindow *scrolled_window, GtkWidget *child)
gtk_scrolled_window_get_hadjustment(GtkScrolledWindow *scrolled_window)
gtk_scrolled_window_get_type(void)
gtk_scrolled_window_get_vadjustment(GtkScrolledWindow *scrolled_window)
gtk_scrolled_window_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
gtk_scrolled_window_set_hadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment)
gtk_scrolled_window_set_placement(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement)
gtk_scrolled_window_set_policy(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy)
gtk_scrolled_window_set_vadjustment(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment)
gtk_selection_add_target(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info)
gtk_selection_add_targets(GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets)
gtk_selection_clear(GtkWidget *widget, GdkEventSelection *event)
gtk_selection_convert(GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time)
gtk_selection_data_copy(GtkSelectionData *data)
gtk_selection_data_free(GtkSelectionData *data)
gtk_selection_data_set(GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length)
gtk_selection_incr_event(GdkWindow *window, GdkEventProperty *event)
gtk_selection_notify(GtkWidget *widget, GdkEventSelection *event)
gtk_selection_owner_set(GtkWidget *widget, GdkAtom selection, guint32 time)
gtk_selection_property_notify(GtkWidget *widget, GdkEventProperty *event)
gtk_selection_remove_all(GtkWidget *widget)
gtk_selection_request(GtkWidget *widget, GdkEventSelection *event)
gtk_separator_get_type(void)
gtk_set_locale(void)
gtk_signal_add_emission_hook(guint signal_id, GtkEmissionHook hook_func, gpointer data)
gtk_signal_add_emission_hook_full(guint signal_id, GtkEmissionHook hook_func, gpointer data, GDestroyNotify destroy)
gtk_signal_connect(GtkObject *object, const gchar *name, GtkSignalFunc func, gpointer func_data)
gtk_signal_connect_after(GtkObject *object, const gchar *name, GtkSignalFunc func, gpointer func_data)
gtk_signal_connect_full(GtkObject *object, const gchar *name, GtkSignalFunc func, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify destroy_func, gint object_signal, gint after)
gtk_signal_connect_object(GtkObject *object, const gchar *name, GtkSignalFunc func, GtkObject *slot_object)
gtk_signal_connect_object_after(GtkObject *object, const gchar *name, GtkSignalFunc func, GtkObject *slot_object)
gtk_signal_connect_object_while_alive(GtkObject *object, const gchar *signal, GtkSignalFunc func, GtkObject *alive_object)
gtk_signal_connect_while_alive(GtkObject *object, const gchar *signal, GtkSignalFunc func, gpointer func_data, GtkObject *alive_object)
gtk_signal_default_marshaller
gtk_signal_disconnect(GtkObject *object, guint handler_id)
gtk_signal_disconnect_by_data(GtkObject *object, gpointer data)
gtk_signal_disconnect_by_func(GtkObject *object, GtkSignalFunc func, gpointer data)
gtk_signal_emit(GtkObject *object, guint signal_id, ...)
gtk_signal_emit_by_name(GtkObject *object, const gchar *name, ...)
gtk_signal_emit_stop(GtkObject *object, guint signal_id)
gtk_signal_emit_stop_by_name(GtkObject *object, const gchar *name)
gtk_signal_emitv(GtkObject *object, guint signal_id, GtkArg *params)
gtk_signal_emitv_by_name(GtkObject *object, const gchar *name, GtkArg *params)
gtk_signal_handler_block(GtkObject *object, guint handler_id)
gtk_signal_handler_block_by_data(GtkObject *object, gpointer data)
gtk_signal_handler_block_by_func(GtkObject *object, GtkSignalFunc func, gpointer data)
gtk_signal_handler_pending(GtkObject *object, guint signal_id, gboolean may_be_blocked)
gtk_signal_handler_pending_by_func(GtkObject *object, guint signal_id, gboolean may_be_blocked, GtkSignalFunc func, gpointer data)
gtk_signal_handler_pending_by_id(GtkObject *object, guint handler_id, gboolean may_be_blocked)
gtk_signal_handler_unblock(GtkObject *object, guint handler_id)
gtk_signal_handler_unblock_by_data(GtkObject *object, gpointer data)
gtk_signal_handler_unblock_by_func(GtkObject *object, GtkSignalFunc func, gpointer data)
gtk_signal_handlers_destroy(GtkObject *object)
gtk_signal_init(void)
gtk_signal_lookup(const gchar *name, GtkType object_type)
gtk_signal_n_emissions(GtkObject *object, guint signal_id)
gtk_signal_n_emissions_by_name(GtkObject *object, const gchar *name)
gtk_signal_name(guint signal_id)
gtk_signal_new(const gchar *name, GtkSignalRunType signal_flags, GtkType object_type, guint function_offset, GtkSignalMarshaller marshaller, GtkType return_val, guint nparams, ...)
gtk_signal_newv(const gchar *name, GtkSignalRunType signal_flags, GtkType object_type, guint function_offset, GtkSignalMarshaller marshaller, GtkType return_val, guint nparams, GtkType *params)
gtk_signal_query(guint signal_id)
gtk_signal_remove_emission_hook(guint signal_id, guint hook_id)
gtk_signal_set_funcs(GtkSignalMarshal marshal_func, GtkSignalDestroy destroy_func)
gtk_socket_get_type(void )
gtk_socket_new(void)
gtk_socket_steal(GtkSocket *socket, guint32 wid)
gtk_spin_button_configure(GtkSpinButton *spin_button, GtkAdjustment *adjustment, gfloat climb_rate, guint digits)
gtk_spin_button_get_adjustment(GtkSpinButton *spin_button)
gtk_spin_button_get_type(void)
gtk_spin_button_get_value_as_float(GtkSpinButton *spin_button)
gtk_spin_button_get_value_as_int(GtkSpinButton *spin_button)
gtk_spin_button_new(GtkAdjustment *adjustment, gfloat climb_rate, guint digits)
gtk_spin_button_set_adjustment(GtkSpinButton *spin_button, GtkAdjustment *adjustment)
gtk_spin_button_set_digits(GtkSpinButton *spin_button, guint digits)
gtk_spin_button_set_numeric(GtkSpinButton *spin_button, gboolean numeric)
gtk_spin_button_set_shadow_type(GtkSpinButton *spin_button, GtkShadowType shadow_type)
gtk_spin_button_set_snap_to_ticks(GtkSpinButton *spin_button, gboolean snap_to_ticks)
gtk_spin_button_set_update_policy(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy)
gtk_spin_button_set_value(GtkSpinButton *spin_button, gfloat value)
gtk_spin_button_set_wrap(GtkSpinButton *spin_button, gboolean wrap)
gtk_spin_button_spin(GtkSpinButton *spin_button, GtkSpinType direction, gfloat increment)
gtk_spin_button_update(GtkSpinButton *spin_button)
gtk_statusbar_get_context_id(GtkStatusbar *statusbar, const gchar *context_description)
gtk_statusbar_get_type(void)
gtk_statusbar_new(void)
gtk_statusbar_pop(GtkStatusbar *statusbar, guint context_id)
gtk_statusbar_push(GtkStatusbar *statusbar, guint context_id, const gchar *text)
gtk_statusbar_remove(GtkStatusbar *statusbar, guint context_id, guint message_id)
gtk_style_apply_default_background(GtkStyle *style, GdkWindow *window, gboolean set_bg, GtkStateType state_type, GdkRectangle *area, gint x, gint y, gint width, gint height)
gtk_style_apply_default_pixmap
gtk_style_attach(GtkStyle *style, GdkWindow *window)
gtk_style_copy(GtkStyle *style)
gtk_style_detach(GtkStyle *style)
gtk_style_new(void)
gtk_style_ref(GtkStyle *style)
gtk_style_set_background(GtkStyle *style, GdkWindow *window, GtkStateType state_type)
gtk_style_unref(GtkStyle *style)
gtk_table_attach(GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding)
gtk_table_attach_defaults(GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach)
gtk_table_get_type(void)
gtk_table_new(guint rows, guint columns, gboolean homogeneous)
gtk_table_resize(GtkTable *table, guint rows, guint columns)
gtk_table_set_col_spacing(GtkTable *table, guint column, guint spacing)
gtk_table_set_col_spacings(GtkTable *table, guint spacing)
gtk_table_set_homogeneous(GtkTable *table, gboolean homogeneous)
gtk_table_set_row_spacing(GtkTable *table, guint row, guint spacing)
gtk_table_set_row_spacings(GtkTable *table, guint spacing)
gtk_target_list_add(GtkTargetList *list, GdkAtom target, guint flags, guint info)
gtk_target_list_add_table(GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets)
gtk_target_list_find(GtkTargetList *list, GdkAtom target, guint *info)
gtk_target_list_new(const GtkTargetEntry *targets, guint ntargets)
gtk_target_list_ref(GtkTargetList *list)
gtk_target_list_remove(GtkTargetList *list, GdkAtom target)
gtk_target_list_unref(GtkTargetList *list)
gtk_tearoff_menu_item_get_type(void)
gtk_tearoff_menu_item_new(void)
gtk_ted_add(GtkTed *ted, GtkWidget *widget, const gchar *name)
gtk_ted_get_type(void)
gtk_ted_new(const gchar *dialog_name)
gtk_ted_new_layout(const gchar *dialog_name, const gchar *layout)
gtk_ted_prepare(GtkTed *ted)
gtk_ted_set_app_name(const gchar *str)
gtk_text_backward_delete(GtkText *text, guint nchars)
gtk_text_forward_delete(GtkText *text, guint nchars)
gtk_text_freeze(GtkText *text)
gtk_text_get_length(GtkText *text)
gtk_text_get_point(GtkText *text)
gtk_text_get_type(void)
gtk_text_insert(GtkText *text, GdkFont *font, GdkColor *fore, GdkColor *back, const char *chars, gint length)
gtk_text_new(GtkAdjustment *hadj, GtkAdjustment *vadj)
gtk_text_set_adjustments(GtkText *text, GtkAdjustment *hadj, GtkAdjustment *vadj)
gtk_text_set_editable(GtkText *text, gboolean editable)
gtk_text_set_line_wrap(GtkText *text, gint line_wrap)
gtk_text_set_point(GtkText *text, guint index)
gtk_text_set_word_wrap(GtkText *text, gint word_wrap)
gtk_text_thaw(GtkText *text)
gtk_theme_engine_get(const gchar *name)
gtk_theme_engine_ref(GtkThemeEngine *engine)
gtk_theme_engine_unref(GtkThemeEngine *engine)
gtk_timeout_add(guint32 interval, GtkFunction function, gpointer data)
gtk_timeout_add_full(guint32 interval, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GtkDestroyNotify destroy)
gtk_timeout_remove(guint timeout_handler_id)
gtk_tips_query_get_type(void)
gtk_tips_query_new(void)
gtk_tips_query_set_caller(GtkTipsQuery *tips_query, GtkWidget *caller)
gtk_tips_query_set_labels(GtkTipsQuery *tips_query, const gchar *label_inactive, const gchar *label_no_tip)
gtk_tips_query_start_query(GtkTipsQuery *tips_query)
gtk_tips_query_stop_query(GtkTipsQuery *tips_query)
gtk_toggle_button_get_active(GtkToggleButton *toggle_button)
gtk_toggle_button_get_type(void)
gtk_toggle_button_new(void)
gtk_toggle_button_new_with_label(const gchar *label)
gtk_toggle_button_set_active(GtkToggleButton *toggle_button, gboolean is_active)
gtk_toggle_button_set_mode(GtkToggleButton *toggle_button, gboolean draw_indicator)
gtk_toggle_button_set_state
gtk_toggle_button_toggled(GtkToggleButton *toggle_button)
gtk_toolbar_append_element(GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data)
gtk_toolbar_append_item(GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data)
gtk_toolbar_append_space(GtkToolbar *toolbar)
gtk_toolbar_append_widget(GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text)
gtk_toolbar_get_button_relief(GtkToolbar *toolbar)
gtk_toolbar_get_type(void)
gtk_toolbar_insert_element(GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data, gint position)
gtk_toolbar_insert_item(GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data, gint position)
gtk_toolbar_insert_space(GtkToolbar *toolbar, gint position)
gtk_toolbar_insert_widget(GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text, gint position)
gtk_toolbar_new(GtkOrientation orientation, GtkToolbarStyle style)
gtk_toolbar_prepend_element(GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data)
gtk_toolbar_prepend_item(GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GtkSignalFunc callback, gpointer user_data)
gtk_toolbar_prepend_space(GtkToolbar *toolbar)
gtk_toolbar_prepend_widget(GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text)
gtk_toolbar_set_button_relief(GtkToolbar *toolbar, GtkReliefStyle relief)
gtk_toolbar_set_orientation(GtkToolbar *toolbar, GtkOrientation orientation)
gtk_toolbar_set_space_size(GtkToolbar *toolbar, gint space_size)
gtk_toolbar_set_space_style(GtkToolbar *toolbar, GtkToolbarSpaceStyle space_style)
gtk_toolbar_set_style(GtkToolbar *toolbar, GtkToolbarStyle style)
gtk_toolbar_set_tooltips(GtkToolbar *toolbar, gint enable)
gtk_tooltips_data_get(GtkWidget *widget)
gtk_tooltips_disable(GtkTooltips *tooltips)
gtk_tooltips_enable(GtkTooltips *tooltips)
gtk_tooltips_force_window(GtkTooltips *tooltips)
gtk_tooltips_get_type(void)
gtk_tooltips_new(void)
gtk_tooltips_set_colors(GtkTooltips *tooltips, GdkColor *background, GdkColor *foreground)
gtk_tooltips_set_delay(GtkTooltips *tooltips, guint delay)
gtk_tooltips_set_tip(GtkTooltips *tooltips, GtkWidget *widget, const gchar *tip_text, const gchar *tip_private)
gtk_trace_referencing(GtkObject *object, const gchar *func, guint dummy, guint line, gboolean do_ref)
gtk_tree_append(GtkTree *tree, GtkWidget *tree_item)
gtk_tree_child_position(GtkTree *tree, GtkWidget *child)
gtk_tree_clear_items(GtkTree *tree, gint start, gint end)
gtk_tree_get_type(void)
gtk_tree_insert(GtkTree *tree, GtkWidget *tree_item, gint position)
gtk_tree_item_collapse(GtkTreeItem *tree_item)
gtk_tree_item_deselect(GtkTreeItem *tree_item)
gtk_tree_item_expand(GtkTreeItem *tree_item)
gtk_tree_item_get_type(void)
gtk_tree_item_new(void)
gtk_tree_item_new_with_label(const gchar *label)
gtk_tree_item_remove_subtree(GtkTreeItem *tree_item)
gtk_tree_item_select(GtkTreeItem *tree_item)
gtk_tree_item_set_subtree(GtkTreeItem *tree_item, GtkWidget *subtree)
gtk_tree_new(void)
gtk_tree_prepend(GtkTree *tree, GtkWidget *tree_item)
gtk_tree_remove_item(GtkTree *tree, GtkWidget *child)
gtk_tree_remove_items(GtkTree *tree, GList *items)
gtk_tree_select_child(GtkTree *tree, GtkWidget *tree_item)
gtk_tree_select_item(GtkTree *tree, gint item)
gtk_tree_set_selection_mode(GtkTree *tree, GtkSelectionMode mode)
gtk_tree_set_view_lines(GtkTree *tree, guint flag)
gtk_tree_set_view_mode(GtkTree *tree, GtkTreeViewMode mode)
gtk_tree_unselect_child(GtkTree *tree, GtkWidget *tree_item)
gtk_tree_unselect_item(GtkTree *tree, gint item)
gtk_true(void)
gtk_type_check_class_cast(GtkTypeClass *klass, GtkType cast_type)
gtk_type_check_object_cast(GtkTypeObject *type_object, GtkType cast_type)
gtk_type_children_types(GtkType type)
gtk_type_class(GtkType type)
gtk_type_describe_heritage(GtkType type)
gtk_type_describe_tree(GtkType type, gboolean show_size)
gtk_type_enum_find_value(GtkType enum_type, const gchar *value_name)
gtk_type_enum_get_values(GtkType enum_type)
gtk_type_flags_find_value(GtkType flag_type, const gchar *value_name)
gtk_type_flags_get_values(GtkType flags_type)
gtk_type_free(GtkType type, gpointer mem)
gtk_type_from_name(const gchar *name)
gtk_type_get_varargs_type(GtkType foreign_type)
gtk_type_init(void)
gtk_type_is_a(GtkType type, GtkType is_a_type)
gtk_type_name(guint type)
gtk_type_new(GtkType type)
gtk_type_parent(GtkType type)
gtk_type_parent_class(GtkType type)
gtk_type_query(GtkType type)
gtk_type_register_enum(const gchar *type_name, GtkEnumValue *values)
gtk_type_register_flags(const gchar *type_name, GtkFlagValue *values)
gtk_type_set_chunk_alloc(GtkType type, guint n_chunks)
gtk_type_set_varargs_type(GtkType foreign_type, GtkType varargs_type)
gtk_type_unique(GtkType parent_type, const GtkTypeInfo *type_info)
gtk_vbox_get_type(void)
gtk_vbox_new(gboolean homogeneous, gint spacing)
gtk_vbutton_box_get_layout_default(void)
gtk_vbutton_box_get_spacing_default(void)
gtk_vbutton_box_get_type(void)
gtk_vbutton_box_new(void)
gtk_vbutton_box_set_layout_default(GtkButtonBoxStyle layout)
gtk_vbutton_box_set_spacing_default(gint spacing)
gtk_viewport_get_hadjustment(GtkViewport *viewport)
gtk_viewport_get_type(void)
gtk_viewport_get_vadjustment(GtkViewport *viewport)
gtk_viewport_new(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
gtk_viewport_set_hadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
gtk_viewport_set_shadow_type(GtkViewport *viewport, GtkShadowType type)
gtk_viewport_set_vadjustment(GtkViewport *viewport, GtkAdjustment *adjustment)
gtk_vpaned_get_type(void)
gtk_vpaned_new(void)
gtk_vruler_get_type(void)
gtk_vruler_new(void)
gtk_vscale_get_type(void)
gtk_vscale_new(GtkAdjustment *adjustment)
gtk_vscrollbar_get_type(void)
gtk_vscrollbar_new(GtkAdjustment *adjustment)
gtk_vseparator_get_type(void)
gtk_vseparator_new(void)
gtk_widget_accelerator_signal(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, guint accel_mods)
gtk_widget_accelerators_locked(GtkWidget *widget)
gtk_widget_activate(GtkWidget *widget)
gtk_widget_add_accelerator(GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, guint accel_mods, GtkAccelFlags accel_flags)
gtk_widget_add_events(GtkWidget *widget, gint events)
gtk_widget_class_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
gtk_widget_destroy(GtkWidget *widget)
gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
gtk_widget_draw(GtkWidget *widget, GdkRectangle *area)
gtk_widget_draw_default(GtkWidget *widget)
gtk_widget_draw_focus(GtkWidget *widget)
gtk_widget_ensure_style(GtkWidget *widget)
gtk_widget_event(GtkWidget *widget, GdkEvent *event)
gtk_widget_get(GtkWidget *widget, GtkArg *arg)
gtk_widget_get_ancestor(GtkWidget *widget, GtkType widget_type)
gtk_widget_get_child_requisition(GtkWidget *widget, GtkRequisition *requisition)
gtk_widget_get_colormap(GtkWidget *widget)
gtk_widget_get_composite_name(GtkWidget *widget)
gtk_widget_get_default_colormap(void)
gtk_widget_get_default_style(void)
gtk_widget_get_default_visual(void)
gtk_widget_get_events(GtkWidget *widget)
gtk_widget_get_extension_events(GtkWidget *widget)
gtk_widget_get_name(GtkWidget *widget)
gtk_widget_get_parent_window(GtkWidget *widget)
gtk_widget_get_pointer(GtkWidget *widget, gint *x, gint *y)
gtk_widget_get_style(GtkWidget *widget)
gtk_widget_get_toplevel(GtkWidget *widget)
gtk_widget_get_type(void)
gtk_widget_get_visual(GtkWidget *widget)
gtk_widget_getv(GtkWidget *widget, guint nargs, GtkArg *args)
gtk_widget_grab_default(GtkWidget *widget)
gtk_widget_grab_focus(GtkWidget *widget)
gtk_widget_hide(GtkWidget *widget)
gtk_widget_hide_all(GtkWidget *widget)
gtk_widget_hide_on_delete(GtkWidget *widget)
gtk_widget_intersect(GtkWidget *widget, GdkRectangle *area, GdkRectangle *intersection)
gtk_widget_is_ancestor(GtkWidget *widget, GtkWidget *ancestor)
gtk_widget_lock_accelerators(GtkWidget *widget)
gtk_widget_map(GtkWidget *widget)
gtk_widget_modify_style(GtkWidget *widget, GtkRcStyle *style)
gtk_widget_new(GtkType type, const gchar *first_arg_name, ...)
gtk_widget_newv(GtkType type, guint nargs, GtkArg *args)
gtk_widget_path(GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed)
gtk_widget_pop_colormap(void)
gtk_widget_pop_composite_child(void)
gtk_widget_pop_style(void)
gtk_widget_pop_visual(void)
gtk_widget_popup(GtkWidget *widget, gint x, gint y)
gtk_widget_push_colormap(GdkColormap *cmap)
gtk_widget_push_composite_child(void)
gtk_widget_push_style(GtkStyle *style)
gtk_widget_push_visual(GdkVisual *visual)
gtk_widget_queue_clear(GtkWidget *widget)
gtk_widget_queue_clear_area(GtkWidget *widget, gint x, gint y, gint width, gint height)
gtk_widget_queue_draw(GtkWidget *widget)
gtk_widget_queue_draw_area(GtkWidget *widget, gint x, gint y, gint width, gint height)
gtk_widget_queue_resize(GtkWidget *widget)
gtk_widget_realize(GtkWidget *widget)
gtk_widget_ref(GtkWidget *widget)
gtk_widget_ref
gtk_widget_remove_accelerator(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, guint accel_mods)
gtk_widget_remove_accelerators(GtkWidget *widget, const gchar *accel_signal, gboolean visible_only)
gtk_widget_reparent(GtkWidget *widget, GtkWidget *new_parent)
gtk_widget_reset_rc_styles(GtkWidget *widget)
gtk_widget_reset_shapes(GtkWidget *widget)
gtk_widget_restore_default_style(GtkWidget *widget)
gtk_widget_set(GtkWidget *widget, const gchar *first_arg_name, ...)
gtk_widget_set_app_paintable(GtkWidget *widget, gboolean app_paintable)
gtk_widget_set_colormap(GtkWidget *widget, GdkColormap *colormap)
gtk_widget_set_composite_name(GtkWidget *widget, const gchar *name)
gtk_widget_set_default_colormap(GdkColormap *colormap)
gtk_widget_set_default_style(GtkStyle *style)
gtk_widget_set_default_visual(GdkVisual *visual)
gtk_widget_set_events(GtkWidget *widget, gint events)
gtk_widget_set_extension_events(GtkWidget *widget, GdkExtensionMode mode)
gtk_widget_set_name(GtkWidget *widget, const gchar *name)
gtk_widget_set_parent(GtkWidget *widget, GtkWidget *parent)
gtk_widget_set_parent_window(GtkWidget *widget, GdkWindow *parent_window)
gtk_widget_set_rc_style(GtkWidget *widget)
gtk_widget_set_scroll_adjustments(GtkWidget *widget, GtkAdjustment *hadjustment, GtkAdjustment *vadjustment)
gtk_widget_set_sensitive(GtkWidget *widget, gboolean sensitive)
gtk_widget_set_state(GtkWidget *widget, GtkStateType state)
gtk_widget_set_style(GtkWidget *widget, GtkStyle *style)
gtk_widget_set_uposition(GtkWidget *widget, gint x, gint y)
gtk_widget_set_usize(GtkWidget *widget, gint width, gint height)
gtk_widget_set_visual(GtkWidget *widget, GdkVisual *visual)
gtk_widget_setv(GtkWidget *widget, guint nargs, GtkArg *args)
gtk_widget_shape_combine_mask(GtkWidget *widget, GdkBitmap *shape_mask, gint offset_x, gint offset_y)
gtk_widget_show(GtkWidget *widget)
gtk_widget_show_all(GtkWidget *widget)
gtk_widget_show_now(GtkWidget *widget)
gtk_widget_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
gtk_widget_size_request(GtkWidget *widget, GtkRequisition *requisition)
gtk_widget_unlock_accelerators(GtkWidget *widget)
gtk_widget_unmap(GtkWidget *widget)
gtk_widget_unparent(GtkWidget *widget)
gtk_widget_unrealize(GtkWidget *widget)
gtk_widget_unref(GtkWidget *widget)
gtk_widget_unref
gtk_window_activate_default(GtkWindow *window)
gtk_window_activate_focus(GtkWindow *window)
gtk_window_add_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
gtk_window_add_embedded_xid(GtkWindow *window, guint xid)
gtk_window_get_type(void)
gtk_window_new(GtkWindowType type)
gtk_window_position
gtk_window_remove_accel_group(GtkWindow *window, GtkAccelGroup *accel_group)
gtk_window_remove_embedded_xid(GtkWindow *window, guint xid)
gtk_window_reposition(GtkWindow *window, gint x, gint y)
gtk_window_set_default(GtkWindow *window, GtkWidget *defaultw)
gtk_window_set_default_size(GtkWindow *window, gint width, gint height)
gtk_window_set_focus(GtkWindow *window, GtkWidget *focus)
gtk_window_set_geometry_hints(GtkWindow *window, GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask)
gtk_window_set_modal(GtkWindow *window, gboolean modal)
gtk_window_set_policy(GtkWindow *window, gint allow_shrink, gint allow_grow, gint auto_shrink)
gtk_window_set_position(GtkWindow *window, GtkWindowPosition position)
gtk_window_set_title(GtkWindow *window, const gchar *title)
gtk_window_set_transient_for(GtkWindow *window, GtkWindow *parent)
gtk_window_set_wmclass(GtkWindow *window, const gchar *wmclass_name, const gchar *wmclass_class)
gtk_xmhtml_callback_info
gtk_xmhtml_freeze(GtkXmHTML *html)
gtk_xmhtml_get_source(GtkXmHTML *html)
gtk_xmhtml_get_topline(GtkXmHTML *html)
gtk_xmhtml_get_type(void)
gtk_xmhtml_manage(GtkContainer *container, GtkWidget *widget)
gtk_xmhtml_new(void)
gtk_xmhtml_outline(GtkXmHTML *html, int flag)
gtk_xmhtml_set_alignment(GtkXmHTML *html, int alignment)
gtk_xmhtml_set_allow_body_colors(GtkXmHTML *html, int enable)
gtk_xmhtml_set_allow_color_switching(GtkXmHTML *html, int flag)
gtk_xmhtml_set_allow_font_switching(GtkXmHTML *html, int flag)
gtk_xmhtml_set_allow_form_coloring(GtkXmHTML *html, int flag)
gtk_xmhtml_set_allow_images(GtkXmHTML *html, int flag)
gtk_xmhtml_set_alpha_processing(GtkXmHTML *html, int flag)
gtk_xmhtml_set_anchor_buttons(GtkXmHTML *html, int flag)
gtk_xmhtml_set_anchor_cursor(GtkXmHTML *html, GdkCursor * cursor, int flag)
gtk_xmhtml_set_anchor_target_underline_type(GtkXmHTML *html, int underline_type)
gtk_xmhtml_set_anchor_underline_type(GtkXmHTML *html, int underline_type)
gtk_xmhtml_set_anchor_visited_underline_type(GtkXmHTML *html, int underline_type)
gtk_xmhtml_set_bad_html_warnings(GtkXmHTML *html, int flag)
gtk_xmhtml_set_colors(GtkXmHTML *html, Pixel foreground, Pixel background, Pixel anchor_fg, Pixel anchor_target_fg, Pixel anchor_visited_fg, Pixel anchor_activated_fg, Pixel anchor_activated_bg)
gtk_xmhtml_set_def_body_image_url(GtkXmHTML *html, char *url)
gtk_xmhtml_set_dithering(GtkXmHTML *html, XmHTMLDitherType flag)
gtk_xmhtml_set_event_proc(GtkXmHTML *html, XmHTMLEventProc event_proc)
gtk_xmhtml_set_font_charset(GtkXmHTML *html, char *charset)
gtk_xmhtml_set_font_familty(GtkXmHTML *html, char *family, char *sizes)
gtk_xmhtml_set_font_familty_fixed(GtkXmHTML *html, char *family, char *sizes)
gtk_xmhtml_set_freeze_animations(GtkXmHTML *html, int flag)
gtk_xmhtml_set_geometry(GtkWidget *widget, int x, int y, int width, int height)
gtk_xmhtml_set_hilight_on_enter(GtkXmHTML *html, int flag)
gtk_xmhtml_set_image_procs(GtkXmHTML *html, XmImageProc image_proc, XmImageGifProc gif_proc, XmHTMLGetDataProc get_data, XmHTMLEndDataProc end_data)
gtk_xmhtml_set_imagemap_draw(GtkXmHTML *html, int flag)
gtk_xmhtml_set_max_image_colors(GtkXmHTML *html, int max_colors)
gtk_xmhtml_set_mime_type(GtkXmHTML *html, char *mime_type)
gtk_xmhtml_set_outline(GtkXmHTML *html, int flag)
gtk_xmhtml_set_perfect_colors(GtkXmHTML *html, int flag)
gtk_xmhtml_set_plc_intervals(GtkXmHTML *html, int min_delay, int max_delay, int def_delay)
gtk_xmhtml_set_rgb_conv_mode(GtkXmHTML *html, int val)
gtk_xmhtml_set_screen_gamma(GtkXmHTML *html, float gamma)
gtk_xmhtml_set_strict_checking(GtkXmHTML *html, int flag)
gtk_xmhtml_set_string_direction(GtkXmHTML *html, int direction)
gtk_xmhtml_set_topline(GtkXmHTML *html, int line)
gtk_xmhtml_set_uncompress_command(GtkXmHTML *html, char *cmd)
gtk_xmhtml_source(GtkXmHTML *html, char *source)
gtk_xmhtml_thaw(GtkXmHTML *html)
guchar
guint
gulong
gushort
gwin_closedir(DIR *dir)
gwin_ftruncate(gint f, guint size)
gwin_opendir(const gchar *dirname)
gwin_readdir(DIR *dir)
gwin_rewinddir(DIR *dir)
hasExternalSubset(void *ctx)
hasExternalSubsetSAXFunc
hasInternalSubset(void *ctx)
hasInternalSubsetSAXFunc
htmlAutoCloseTag(htmlDocPtr doc, const xmlChar *name, htmlNodePtr elem)
htmlCreatePushParserCtxt(htmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename, xmlCharEncoding enc)
htmlDefaultSAXHandlerInit(void)
htmlDefaultSAXHandlerInit(void)
htmlDocDump(FILE *f, xmlDocPtr cur)
htmlDocDumpMemory(xmlDocPtr cur, xmlChar**mem, int *size)
htmlDocPtr
htmlElemDesc
htmlElemDescPtr
htmlEntityDesc
htmlEntityDescPtr
htmlEntityLookup(const xmlChar *name)
htmlEnum
htmlEnum
htmlFreeParserCtxt(htmlParserCtxtPtr ctxt)
htmlIsAutoClosed(htmlDocPtr doc, htmlNodePtr elem)
htmlNodePtr
htmlParseCharRef(htmlParserCtxtPtr ctxt)
htmlParseChunk(htmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
htmlParseDoc(xmlChar *cur, const char *encoding)
htmlParseElement(htmlParserCtxtPtr ctxt)
htmlParseEntityRef(htmlParserCtxtPtr ctxt, xmlChar **str)
htmlParseFile(const char *filename, const char *encoding)
htmlParserCtxt
htmlParserCtxtPtr
htmlParserInput
htmlParserInputPtr
htmlParserNodeInfo
htmlSAXHandler
htmlSAXHandlerPtr
htmlSAXParseDoc(xmlChar *cur, const char *encoding, htmlSAXHandlerPtr sax, void *userData)
htmlSAXParseFile(const char *filename, const char *encoding, htmlSAXHandlerPtr sax, void *userData)
htmlSaveFile(const char *filename, xmlDocPtr cur)
htmlTagLookup(const xmlChar *tag)
idtype_t
ignorableWhitespace(void *ctx, const xmlChar *ch, int len)
ignorableWhitespaceSAXFunc
index (const char *s, int c)
initstate (unsigned int seed, ptr_t statebuf, size_t statelen)
initstate_r (unsigned int seed, ptr_t statebuf, size_t statelen, struct random_data *buf))
inline
ino_t
inputPop(xmlParserCtxtPtr ctxt)
inputPush(xmlParserCtxtPtr ctxt, xmlParserInputPtr value)
internalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
internalSubsetSAXFunc
intptr_t
isStandalone(void *ctx)
isStandaloneSAXFunc
isalnum (int c)
isalpha (int c)
isascii (int c)
isatty (int fd)
isblank (int c)
iscntrl (int c)
isdigit (int c)
isfinite
isgraph
isgreater
isgreaterequal
isinf
isless
islessequal
islessgreater
islower
isnan
isnormal
isprint
ispunct
isspace
isunordered
isupper
isxdigit
jrand48 (unsigned short int xsubi[3])
jrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
kill (pid_t pid, int sig)
killpg (pid_t pgrp, int sig)
l64a (long int n)
labs (long int x)
lchown (const char *file, uid_t owner, gid_t group)
lcong48 (unsigned short int param[7])
lcong48_r (unsigned short int param[7], struct drand48_data *buffer)
ldiv (long int numer, long int denom)
ldiv_t
link (const char *from, const char *to)
llabs (long long int x)
lldiv (long long int numer, long long int denom)
lldiv_t
localtime (const time_t *timer)
localtime_r (const time_t *timer, struct tm *tp)
lockf (int fd, int cmd, off_t len)
lockf64 (int fd, int cmd, off64_t len)
lrand48 (void)
lrand48_r (struct drand48_data *buffer, long int *result)
lseek (int fd, off_t offset, int whence)
lseek64 (int fd, off64_t offset, int whence)
lstat (const char *file, struct stat *buf)
lstat64 (const char *file, struct stat64 *buf)
malloc (size_t size)
malloc_get_state (void)
malloc_set_state (malloc_ptr_t ptr)
malloc_stats (void)
malloc_trim (size_t pad)
malloc_usable_size (malloc_ptr_t ptr)
mallopt (int param, int val)
mapArea
matherr (struct exception *exc)
matherr (struct exception *exc)
mblen (const char *s, size_t n)
mbstowcs (wchar_t *pwcs, const char *s, size_t n)
mbtowc (wchar_t *pwc, const char *s, size_t n)
memalign (size_t alignment, size_t size)
memccpy (ptr_t dest, const ptr_t src, int c, size_t n)
memchr (const ptr_t s, int c, size_t n)
memcmp (const ptr_t s1, const ptr_t s2, size_t n)
memcpy (ptr_t dest, const ptr_t src, size_t n)
memfrob (ptr_t s, size_t n)
memmem (const ptr_t haystack, size_t haystacklen, const ptr_t needle, size_t needlelen)
memmove (ptr_t dest, const ptr_t src, size_t n)
mempcpy (ptr_t dest, const ptr_t src, size_t n)
memset (ptr_t s, int c, size_t n)
mkdir (const char *path, mode_t mode)
mkfifo (const char *path, mode_t mode)
mknod (const char *path, mode_t mode, dev_t dev)
mkstemp (char *template)
mktemp (char *template)
mktime (struct tm *tp)
mode_t
mrand48 (void)
mrand48_r (struct drand48_data *buffer, long int *result)
my_locase(char *string)
my_strcasecmp(const char *s1, const char *s2)
my_strcasecmp(const char *s1, const char *s2)
my_strcasestr(const char *s1, const char *s2)
my_strcasestr(const char *s1, const char *s2)
my_strdup(const char *s1)
my_strncasecmp(const char *s1, const char *s2, size_t n)
my_strncasecmp(const char *s1, const char *s2, size_t n)
my_strndup(const char *s1, size_t len)
my_strndup(const char *s1, size_t len)
my_upcase(char *string)
my_x_query_colors(GdkColormap *colormap, GdkColor *colors, gint ncolors)
namespaceDecl(void *ctx, const xmlChar *href, const xmlChar *prefix)
nanosleep (const struct timespec *requested_time, struct timespec *remaining)
nice (int inc)
nlink_t
nodePop(xmlParserCtxtPtr ctxt)
nodePush(xmlParserCtxtPtr ctxt, xmlNodePtr value)
notationDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId)
notationDeclSAXFunc
nrand48 (unsigned short int xsubi[3])
nrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
obstack_printf (struct obstack *obstack, const char *format, ...)
obstack_vprintf (struct obstack *obstack, const char *format, _G_va_list args)
off64_t
off_t
on_exit (void(*func)(int status, ptr_t arg), ptr_t arg)
open_memstream (char **bufloc, size_t *sizeloc)
parserError
pathconf (const char *path, int name)
pause (void)
pclose (FILE *stream)
perror (const char *s)
pid_t
pipe (int pipedes[2])
popen (const char *command, const char *modes)
pread (int fd, ptr_t buf, size_t nbytes, off_t offsets)
pread64 (int fd, ptr_t buf, size_t nbytes, off64_t offset)
printf (const char *format, ...)
processingInstruction(void *ctx, const xmlChar *target, const xmlChar *data)
processingInstructionSAXFunc
profil (unsigned short int *sample_buffer, size_t size, size_t offset, unsigned int scale)
psignal (int sig, const char *s)
pthread_atfork (void(*prepare)(void), void(*parent)(void), void(*child)(void))
pthread_attr_destroy (pthread_attr_t *attr)
pthread_attr_getdetachstate (const pthread_attr_t *attr, int *detachstate)
pthread_attr_getguardsize (const pthread_attr_t *attr, size_t *guardsize)
pthread_attr_getinheritsched (const pthread_attr_t *attr, int *inherit)
pthread_attr_getschedparam (const pthread_attr_t *attr, struct sched_param *param)
pthread_attr_getschedpolicy (const pthread_attr_t *attr, int *policy)
pthread_attr_getscope (const pthread_attr_t *attr, int *scope)
pthread_attr_getstackaddr (const pthread_attr_t *attr, void **stackaddr)
pthread_attr_getstacksize (const pthread_attr_t *attr, size_t *stacksize)
pthread_attr_init (pthread_attr_t *attr)
pthread_attr_setdetachstate (pthread_attr_t *attr, int detachstate)
pthread_attr_setguardsize (pthread_attr_t *attr, size_t guardsize)
pthread_attr_setinheritsched (pthread_attr_t *attr, int inherit)
pthread_attr_setschedparam (pthread_attr_t *attr, const struct sched_param *param)
pthread_attr_setschedpolicy (pthread_attr_t *attr, int policy)
pthread_attr_setscope (pthread_attr_t *attr, int scope)
pthread_attr_setstackaddr (pthread_attr_t *attr, void *stackaddr)
pthread_attr_setstacksize (pthread_attr_t *attr, size_t stacksize)
pthread_cancel (pthread_t thread)
pthread_cleanup_pop
pthread_cleanup_pop_restore_np
pthread_cleanup_push
pthread_cleanup_push_defer_np
pthread_cond_broadcast (pthread_cond_t *cond)
pthread_cond_destroy __P((pthread_cond_t *__cond))
pthread_cond_init __P((pthread_cond_t *__cond, __const pthread_condattr_t *__cond_attr))
pthread_cond_signal __P((pthread_cond_t *__cond))
pthread_cond_timedwait __P((pthread_cond_t *__cond, pthread_mutex_t *__mutex, __const struct timespec *__abstime))
pthread_cond_wait __P((pthread_cond_t *__cond, pthread_mutex_t *__mutex))
pthread_condattr_destroy __P((pthread_condattr_t *__attr))
pthread_condattr_init __P((pthread_condattr_t *__attr))
pthread_create __P((pthread_t *__thread, __const pthread_attr_t *__attr, void *(*__start_routine)(void *), void *__arg))
pthread_detach __P((pthread_t __th))
pthread_equal __P((pthread_t __thread1, pthread_t __thread2))
pthread_exit __P((void *__retval)) __attribute__((__noreturn__))
pthread_getconcurrency __P((void))
pthread_getschedparam __P((pthread_t __target_thread, int *__policy, struct sched_param *__param))
pthread_getspecific __P((pthread_key_t __key))
pthread_join __P((pthread_t __th, void **__thread_return))
pthread_key_create __P((pthread_key_t *__key, void(*__destr_function)(void *)))
pthread_key_delete __P((pthread_key_t __key))
pthread_kill_other_threads_np __P((void))
pthread_mutex_destroy __P((pthread_mutex_t *__mutex))
pthread_mutex_init __P((pthread_mutex_t *__mutex, __const pthread_mutexattr_t *__mutex_attr))
pthread_mutex_lock __P((pthread_mutex_t *__mutex))
pthread_mutex_trylock __P((pthread_mutex_t *__mutex))
pthread_mutex_unlock __P((pthread_mutex_t *__mutex))
pthread_mutexattr_destroy __P((pthread_mutexattr_t *__attr))
pthread_mutexattr_gettype __P((__const pthread_mutexattr_t *__attr, int *__kind))
pthread_mutexattr_init __P((pthread_mutexattr_t *__attr))
pthread_mutexattr_settype __P((pthread_mutexattr_t *__attr, int __kind))
pthread_once __P((pthread_once_t *__once_control, void(*__init_routine)(void)))
pthread_rwlock_destroy __P((pthread_rwlock_t *__rwlock))
pthread_rwlock_init __P((pthread_rwlock_t *__rwlock, __const pthread_rwlockattr_t *__attr))
pthread_rwlock_rdlock __P((pthread_rwlock_t *__rwlock))
pthread_rwlock_tryrdlock __P((pthread_rwlock_t *__rwlock))
pthread_rwlock_trywrlock __P((pthread_rwlock_t *__rwlock))
pthread_rwlock_unlock __P((pthread_rwlock_t *__rwlock))
pthread_rwlock_wrlock __P((pthread_rwlock_t *__rwlock))
pthread_rwlockattr_destroy __P((pthread_rwlockattr_t *__attr))
pthread_rwlockattr_getkind_np __P((__const pthread_rwlockattr_t *__attr, int *__pref))
pthread_rwlockattr_getpshared __P((__const pthread_rwlockattr_t *__attr, int *__pshared))
pthread_rwlockattr_init __P((pthread_rwlockattr_t *__attr))
pthread_rwlockattr_setkind_np __P((pthread_rwlockattr_t *__attr, int __pref))
pthread_rwlockattr_setpshared __P((pthread_rwlockattr_t *__attr, int __pshared))
pthread_self __P((void))
pthread_setcancelstate __P((int __state, int *__oldstate))
pthread_setcanceltype __P((int __type, int *__oldtype))
pthread_setconcurrency __P((int __level))
pthread_setschedparam __P((pthread_t __target_thread, int __policy, __const struct sched_param *__param))
pthread_setspecific __P((pthread_key_t __key, __const void *__pointer))
pthread_testcancel __P((void))
ptmalloc_init __MALLOC_P((void))
ptrdiff_t
ptsname __P((int __fd))
ptsname_r __P((int __fd, char *__buf, size_t __buflen))
putc __P((int __c, FILE *__stream))
putc
putc_unlocked __P((int __c, FILE *__stream))
putchar __P((int __c))
putchar_unlocked __P((int __c))
putenv __P((char *__string))
puts __P((__const char *__s))
putw __P((int __w, FILE *__stream))
pvalloc __MALLOC_P((size_t __size))
pwrite __P((int __fd, __const __ptr_t __buf, size_t __n, __off_t __offset))
pwrite
pwrite64 __P((int __fd, __const __ptr_t __buf, size_t __n, __off64_t __offset))
qecvt __P((__long_double_t __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign))
qecvt_r __P((__long_double_t __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len))
qfcvt __P((__long_double_t __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign))
qfcvt_r __P((__long_double_t __value, int __ndigit, int *__restrict __decpt, int *__restrict __sign, char *__restrict __buf, size_t __len))
qgcvt __P((__long_double_t __value, int __ndigit, char *__buf))
qsort __PMT((__ptr_t __base, size_t __nmemb, size_t __size, __compar_fn_t __compar))
raise __P((int __sig))
rand __P((void))
rand_r __P((unsigned int *__seed))
random __P((void))
random_data
random_r __P((struct random_data *__restrict __buf, int32_t *__restrict __result))
rawmemchr __P((__const __ptr_t __s, int __c))
read
read __P((int __fd, __ptr_t __buf, size_t __nbytes))
readdir
readlink __P((__const char *__path, char *__buf, size_t __len))
realloc __MALLOC_P((__malloc_ptr_t __ptr, size_t __size))
realloc __P((__ptr_t __ptr, size_t __size))
realpath __P((__const char *__restrict __name, char *__restrict __resolved))
reference(void *ctx, const xmlChar *name)
referenceSAXFunc
remove __P((__const char *__filename))
rename __P((__const char *__old, __const char *__new))
rename __P((__const char *__old, __const char *__new))
resolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId)
resolveEntitySAXFunc
revoke __P((__const char *__file))
rewind __P((FILE *__stream))
rewinddir
rindex __P((__const char *__s, int __c))
rmdir __P((__const char *__path))
rpmatch __P((__const char *__response))
sbrk __P((ptrdiff_t __delta))
scanf __P((__const char *__restrict __format, ...))
seed48 __P((unsigned short int __seed16v[3]))
seed48_r __P((unsigned short int __seed16v[3], struct drand48_data *__buffer))
setDocumentLocator(void *ctx, xmlSAXLocatorPtr loc)
setDocumentLocatorSAXFunc
setNamespace(void *ctx, const xmlChar *name)
setbuf __P((FILE *__restrict __stream, char *__restrict __buf))
setbuffer __P((FILE *__restrict __stream, char *__restrict __buf, size_t __size))
setdomainname __P((__const char *__name, size_t __len))
setegid __P((__gid_t __gid))
setenv __P((__const char *__name, __const char *__value, int __replace))
seteuid __P((__uid_t __uid))
setgid __P((__gid_t __gid))
sethostid __P((long int __id))
sethostname __P((__const char *__name, size_t __len))
setkey __P((__const char *__key))
setkey __P((__const char *__key))
setlinebuf __P((FILE *__stream))
setlogin __P((__const char *__name))
setpgid __P((__pid_t __pid, __pid_t __pgid))
setpgrp __P((void))
setpgrp
setregid __P((__gid_t __rgid, __gid_t __egid))
setreuid __P((__uid_t __ruid, __uid_t __euid))
setsid __P((void))
setstate __P((__ptr_t __statebuf))
setstate_r __P((__ptr_t __restrict __statebuf, struct random_data *__restrict __buf))
setuid __P((__uid_t __uid))
setusershell __P((void)) /* Rewind and re-read the file. */
setvbuf __P((FILE *__restrict __stream, char *__restrict __buf, int __modes, size_t __n))
sig_atomic_t
sig_t
sigaction __P((int __sig, __const struct sigaction *__act, struct sigaction *__oact))
sigaddset __P((sigset_t *__set, int __signo))
sigaltstack __P((__const struct sigaltstack *__ss, struct sigaltstack *__oss))
sigandset __P((sigset_t *__set, __const sigset_t *__left, __const sigset_t *__right))
sigblock __P((int __mask))
sigdelset __P((sigset_t *__set, int __signo))
sigemptyset __P((sigset_t *__set))
sigfillset __P((sigset_t *__set))
siggetmask __P((void))
sighandler_t
sighold __P((int __sig))
sigignore __P((int __sig))
siginterrupt __P((int __sig, int __interrupt))
sigisemptyset __P((__const sigset_t *__set))
sigismember __P((__const sigset_t *__set, int __signo))
sigmask
signal __P((int __sig, __sighandler_t __handler))
signal
signbit
sigorset __P((sigset_t *__set, __const sigset_t *__left, __const sigset_t *__right))
sigpause __P((int __mask))
sigpause
sigpending __P((sigset_t *__set))
sigprocmask __P((int __how, __const sigset_t *__set, sigset_t *__oset))
sigqueue __P((__pid_t __pid, int __sig, __const union sigval __val))
sigrelse __P((int __sig))
sigreturn __P((struct sigcontext *__scp))
sigset __P((int __sig, __sighandler_t __disp))
sigset_t
sigsetmask __P((int __mask))
sigstack __P((struct sigstack *__ss, struct sigstack *__oss))
sigsuspend __P((__const sigset_t *__set))
sigtimedwait __P((__const sigset_t *__set, siginfo_t *__info, __const struct timespec *__timeout))
sigvec
sigvec __P((int __sig, __const struct sigvec *__vec, struct sigvec *__ovec))
sigwait __P((__const sigset_t *__set, int *__sig))
sigwaitinfo __P((__const sigset_t *__set, siginfo_t *__info))
size_t
sleep __P((unsigned int __seconds))
snprintf __P((char *__restrict __s, size_t __maxlen, __const char *__restrict __format, ...))
sprintf __P((char *__restrict __s, __const char *__restrict __format, ...))
srand __P((unsigned int __seed))
srand48 __P((long int __seedval))
srand48_r __P((long int __seedval, struct drand48_data *__buffer))
srandom __P((unsigned int __seed))
srandom_r __P((unsigned int __seed, struct random_data *__buf))
sscanf __P((__const char *__restrict __s, __const char *__restrict __format, ...))
ssignal __P((int __sig, __sighandler_t __handler))
ssize_t
ssize_t
startDocument(void *ctx)
startDocumentSAXFunc
startElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
startElementSAXFunc
stat __P((__const char *__file, struct stat *__buf))
stat
stat64 __P((__const char *__file, struct stat64 *__buf))
stateStack
stateStack
stderr
stdin
stdout
stime __P((__const time_t *__when))
stpcpy __P((char *__restrict __dest, __const char *__restrict __src))
stpncpy __P((char *__restrict __dest, __const char *__restrict __src, size_t __n))
strcasecmp
strcasecmp __P((__const char *__s1, __const char *__s2))
strcasestr __P((__const char *__haystack, __const char *__needle))
strcat __P((char *__restrict __dest, __const char *__restrict __src))
strchr __P((__const char *__s, int __c))
strchrnul __P((__const char *__s, int __c))
strcmp __P((__const char *__s1, __const char *__s2))
strcoll __P((__const char *__s1, __const char *__s2))
strcpy __P((char *__restrict __dest, __const char *__restrict __src))
strcspn __P((__const char *__s, __const char *__reject))
strdup __P((__const char *__s))
strdupa
strerror
strerror __P((int __errnum))
strerror_r __P((int __errnum, char *__buf, size_t __buflen))
strfry __P((char *__string))
strftime __P((char *__restrict __s, size_t __maxsize, __const char *__restrict __format, __const struct tm *__restrict __tp))
string_to_gnome_font_weight(const char *weight)
strlen __P((__const char *__s))
strncasecmp
strncasecmp __P((__const char *__s1, __const char *__s2, size_t __n))
strncat __P((char *__restrict __dest, __const char *__restrict __src, size_t __n))
strncmp __P((__const char *__s1, __const char *__s2, size_t __n))
strncpy __P((char *__restrict __dest, __const char *__restrict __src, size_t __n))
strndup __P((__const char *__string, size_t __n))
strndupa
strnlen __P((__const char *__string, size_t __maxlen))
strpbrk __P((__const char *__s, __const char *__accept))
strptime __P((__const char *__s, __const char *__fmt, struct tm *__tp))
strrchr __P((__const char *__s, int __c))
strsep __P((char **__restrict __stringp, __const char *__restrict __delim))
strsignal __P((int __sig))
strspn __P((__const char *__s, __const char *__accept))
strstr __P((__const char *__haystack, __const char *__needle))
strtod __P((__const char *__restrict __nptr, char **__restrict __endptr))
strtof __P((__const char *__restrict __nptr, char **__restrict __endptr))
strtok __P((char *__restrict __s, __const char *__restrict __delim))
strtok_r __P((char *__restrict __s, __const char *__restrict __delim, char **__restrict __save_ptr))
strtol __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strtold __P((__const char *__restrict __nptr, char **__restrict __endptr))
strtoll __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strtoq __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strtoul __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strtoull __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strtouq __P((__const char *__restrict __nptr, char **__restrict __endptr, int __base))
strverscmp __P((__const char *__s1, __const char *__s2))
strxfrm __P((char *__restrict __dest, __const char *__restrict __src, size_t __n))
sv_onstack
swab __P((__const __ptr_t __from, __ptr_t __to, ssize_t __n))
symlink __P((__const char *__from, __const char *__to))
sync __P((void))
syscall __P((long int __sysno, ...))
sysconf __P((int __name))
system __P((__const char *__command))
sysv_signal __P((int __sig, __sighandler_t __handler))
tcgetpgrp __P((int __fd))
tcsetpgrp __P((int __fd, __pid_t __pgrp_id))
tempnam __P((__const char *__dir, __const char *__pfx))
textdomain
time_t time __P((time_t *__timer))
time_t
timegm __P((struct tm *__tp))
timelocal __P((struct tm *__tp))
timespec
tm
tmpfile __P((void))
tmpfile
tmpfile64 __P((void))
tmpnam __P((char *__s))
tmpnam_r __P((char *__s))
toascii __P((int __c))
toascii
tolower __P((int __c))
tolower
toupper __P((int __c))
toupper
truncate __P((__const char *__file, __off_t __length))
truncate
truncate64 __P((__const char *__file, __off64_t __length))
ttyname __P((int __fd))
ttyname_r __P((int __fd, char *__buf, size_t __buflen))
ttyslot __P((void))
tzset __P((void))
ualarm __P((unsigned int __value, unsigned int __interval))
uid_t
uid_t
uid_t
uid_t
umask __P((__mode_t __mask))
ungetc __P((int __c, FILE *__stream))
unlink __P((__const char *__name))
unlockpt __P((int __fd))
unparsedEntityDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName)
unparsedEntityDeclSAXFunc
unsetenv __P((__const char *__name))
usleep __P((unsigned int __useconds))
valloc __MALLOC_P((size_t __size))
valloc __P((size_t __size))
vasprintf __P((char **__restrict __ptr, __const char *__restrict __f, _G_va_list __arg))
vdprintf __P((int __fd, __const char *__restrict __fmt, _G_va_list __arg))
vfork __P((void))
vfprintf __P((FILE *__restrict __s, __const char *__restrict __format, _G_va_list __arg))
vfscanf __P((FILE *__restrict __s, __const char *__restrict __format, _G_va_list __arg))
vhangup __P((void))
vprintf __P((__const char *__restrict __format, _G_va_list __arg))
vscanf __P((__const char *__restrict __format, _G_va_list __arg))
vsnprintf __P((char *__restrict __s, size_t __maxlen, __const char *__restrict __format, _G_va_list __arg))
vsprintf __P((char *__restrict __s, __const char *__restrict __format, _G_va_list __arg))
vsscanf __P((__const char *__restrict __s, __const char *__restrict __format, _G_va_list __arg))
wait __P((__WAIT_STATUS __stat_loc))
wait3 __P((__WAIT_STATUS __stat_loc, int __options, struct rusage * __usage))
wait4 __P((__pid_t __pid, __WAIT_STATUS __stat_loc, int __options, struct rusage *__usage))
waitid __P((idtype_t __idtype, __id_t __id, siginfo_t *__infop, int __options))
waitpid __P((__pid_t __pid, int *__stat_loc, int __options))
warningSAXFunc
wcstombs __P((char *__restrict __s, __const wchar_t *__restrict __pwcs, size_t __n))
wctomb __P((char *__s, wchar_t __wchar))
wrap_gdk_cc_get_pixels(int incremental, GdkColorContext *cc, gushort *reds, gushort *greens, gushort *blues, gint ncolors, gint *used, gulong *colors, gint *nallocated)
write
write __P((int __fd, __const __ptr_t __buf, size_t __n))
xlinkActuate
xlinkExtendedLinkFunk
xlinkExtendedLinkSetFunk
xlinkGetDefaultDetect(void)
xlinkGetDefaultHandler(void)
xlinkHRef
xlinkHandler
xlinkHandlerPtr
xlinkIsLink(xmlDocPtr doc, xmlNodePtr node)
xlinkNodeDetectFunc
xlinkRole
xlinkSetDefaultDetect(xlinkNodeDetectFunc func)
xlinkSetDefaultHandler(xlinkHandlerPtr handler)
xlinkShow
xlinkSimpleLinkFunk
xlinkTitle
xlinkType
xmlAddAttributeDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, xmlAttributeType type, xmlAttributeDefault def, const xmlChar *defaultValue, xmlEnumerationPtr tree)
xmlAddChild(xmlNodePtr parent, xmlNodePtr cur)
xmlAddDocEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content)
xmlAddDtdEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content)
xmlAddElementDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, xmlElementTypeVal type, xmlElementContentPtr content)
xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
xmlAddNextSibling(xmlNodePtr cur, xmlNodePtr elem)
xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, const xmlChar *PublicID, const xmlChar *SystemID)
xmlAddPrevSibling(xmlNodePtr cur, xmlNodePtr elem)
xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem)
xmlAllocParserInputBuffer(xmlCharEncoding enc)
xmlAttr
xmlAttrPtr
xmlAttribute
xmlAttributeDefault
xmlAttributePtr
xmlAttributeTable
xmlAttributeTablePtr
xmlAttributeType
xmlBuffer
xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len)
xmlBufferAllocationScheme
xmlBufferCCat(xmlBufferPtr buf, const char *str)
xmlBufferCat(xmlBufferPtr buf, const xmlChar *str)
xmlBufferContent(const xmlBufferPtr buf)
xmlBufferCreate(void)
xmlBufferCreateSize(size_t size)
xmlBufferDump(FILE *file, xmlBufferPtr buf)
xmlBufferEmpty(xmlBufferPtr buf)
xmlBufferFree(xmlBufferPtr buf)
xmlBufferLength(const xmlBufferPtr buf)
xmlBufferPtr
xmlBufferSetAllocationScheme(xmlBufferPtr buf, xmlBufferAllocationScheme scheme)
xmlBufferShrink(xmlBufferPtr buf, int len)
xmlBufferUse(const xmlBufferPtr buf)
xmlBufferWriteCHAR(xmlBufferPtr buf, const xmlChar *string)
xmlBufferWriteChar(xmlBufferPtr buf, const char *string)
xmlBufferWriteQuotedString(xmlBufferPtr buf, const xmlChar *string)
xmlChar
xmlChar
xmlCharEncoding
xmlCharEncodingHandler
xmlCharEncodingHandlerPtr
xmlCharEncodingInputFunc
xmlCharEncodingOutputFunc
xmlCleanupCharEncodingHandlers(void)
xmlCleanupParser(void)
xmlCleanupPredefinedEntities(void)
xmlClearNodeInfoSeq(xmlParserNodeInfoSeqPtr seq)
xmlClearParserCtxt(xmlParserCtxtPtr ctxt)
xmlCopyAttributeTable(xmlAttributeTablePtr table)
xmlCopyDoc(xmlDocPtr doc, int recursive)
xmlCopyDtd(xmlDtdPtr dtd)
xmlCopyElementContent(xmlElementContentPtr content)
xmlCopyElementTable(xmlElementTablePtr table)
xmlCopyEntitiesTable(xmlEntitiesTablePtr table)
xmlCopyEntitiesTable(xmlEntitiesTablePtr table)
xmlCopyEnumeration(xmlEnumerationPtr cur)
xmlCopyIDTable(xmlIDTablePtr table)
xmlCopyNamespace(xmlNsPtr cur)
xmlCopyNamespaceList(xmlNsPtr cur)
xmlCopyNode(xmlNodePtr node, int recursive)
xmlCopyNodeList(xmlNodePtr node)
xmlCopyNotationTable(xmlNotationTablePtr table)
xmlCopyProp(xmlNodePtr target, xmlAttrPtr cur)
xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur)
xmlCopyRefTable(xmlRefTablePtr table)
xmlCreateDocParserCtxt(xmlChar *cur)
xmlCreateDocParserCtxt(xmlChar *cur)
xmlCreateEntitiesTable(void)
xmlCreateEnumeration(xmlChar *name)
xmlCreateFileParserCtxt(const char *filename)
xmlCreateIntSubset(xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
xmlCreateMemoryParserCtxt(char *buffer, int size)
xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename)
xmlDebugDumpAttr(FILE *output, xmlAttrPtr attr, int depth)
xmlDebugDumpAttrList(FILE *output, xmlAttrPtr attr, int depth)
xmlDebugDumpDocument(FILE *output, xmlDocPtr doc)
xmlDebugDumpDocumentHead(FILE *output, xmlDocPtr doc)
xmlDebugDumpEntities(FILE *output, xmlDocPtr doc)
xmlDebugDumpNode(FILE *output, xmlNodePtr node, int depth)
xmlDebugDumpNodeList(FILE *output, xmlNodePtr node, int depth)
xmlDebugDumpOneNode(FILE *output, xmlNodePtr node, int depth)
xmlDebugDumpString(FILE *output, const xmlChar *str)
xmlDecodeEntities(xmlParserCtxtPtr ctxt, int len, int what, xmlChar end, xmlChar end2, xmlChar end3)
xmlDefaultSAXHandlerInit(void)
xmlDefaultSAXHandlerInit(void)
xmlDetectCharEncoding(const unsigned char* in)
xmlDoc
xmlDocDump(FILE *f, xmlDocPtr cur)
xmlDocDumpMemory(xmlDocPtr cur, xmlChar**mem, int *size)
xmlDocGetRootElement(xmlDocPtr doc)
xmlDocPtr
xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root)
xmlDtd
xmlDtdPtr
xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table)
xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table)
xmlDumpEntitiesTable(xmlBufferPtr buf, xmlEntitiesTablePtr table)
xmlDumpNotationTable(xmlBufferPtr buf, xmlNotationTablePtr table)
xmlElemDump(FILE *f, xmlDocPtr cur, xmlNodePtr elem)
xmlElement
xmlElementContent
xmlElementContentOccur
xmlElementContentPtr
xmlElementContentType
xmlElementPtr
xmlElementTable
xmlElementTablePtr
xmlElementType
xmlElementTypeVal
xmlEncodeEntities(xmlDocPtr doc, const xmlChar *input)
xmlEncodeEntitiesReentrant(xmlDocPtr doc, const xmlChar *input)
xmlEntitiesTable
xmlEntitiesTablePtr
xmlEntity
xmlEntityPtr
xmlEnumeration
xmlEnumerationPtr
xmlExternalEntityLoader
xmlFindCharEncodingHandler(const char *name)
xmlFree
xmlFree(void *ptr)
xmlFreeAttributeTable(xmlAttributeTablePtr table)
xmlFreeDoc(xmlDocPtr cur)
xmlFreeDtd(xmlDtdPtr cur)
xmlFreeElementContent(xmlElementContentPtr cur)
xmlFreeElementTable(xmlElementTablePtr table)
xmlFreeEntitiesTable(xmlEntitiesTablePtr table)
xmlFreeEnumeration(xmlEnumerationPtr cur)
xmlFreeIDTable(xmlIDTablePtr table)
xmlFreeInputStream(xmlParserInputPtr input)
xmlFreeNode(xmlNodePtr cur)
xmlFreeNodeList(xmlNodePtr cur)
xmlFreeNotationTable(xmlNotationTablePtr table)
xmlFreeNs(xmlNsPtr cur)
xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
xmlFreeParserCtxt(xmlParserCtxtPtr ctxt)
xmlFreeParserInputBuffer(xmlParserInputBufferPtr in)
xmlFreeProp(xmlAttrPtr cur)
xmlFreePropList(xmlAttrPtr cur)
xmlFreeRefTable(xmlRefTablePtr table)
xmlGetCharEncodingHandler(xmlCharEncoding enc)
xmlGetCompressMode(void)
xmlGetDocCompressMode(xmlDocPtr doc)
xmlGetDocEntity(xmlDocPtr doc, const xmlChar *name)
xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name)
xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name)
xmlGetDtdEntity(xmlDocPtr doc, const xmlChar *name)
xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name)
xmlGetExternalEntityLoader(void)
xmlGetID(xmlDocPtr doc, const xmlChar *ID)
xmlGetLastChild(xmlNodePtr parent)
xmlGetNsList(xmlDocPtr doc, xmlNodePtr node)
xmlGetNsProp(xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace)
xmlGetParameterEntity(xmlDocPtr doc, const xmlChar *name)
xmlGetPredefinedEntity(const xmlChar *name)
xmlGetProp(xmlNodePtr node, const xmlChar *name)
xmlHandleEntity(xmlParserCtxtPtr ctxt, xmlEntityPtr entity)
xmlID
xmlIDPtr
xmlIDTable
xmlIDTablePtr
xmlInitCharEncodingHandlers(void)
xmlInitMemory
xmlInitMemory(void)
xmlInitMemory(void)
xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr seq)
xmlInitParserCtxt(xmlParserCtxtPtr ctxt)
xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr)
xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name)
xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr)
xmlLoadExternalEntity(const char *URL, const char *ID, xmlParserCtxtPtr context)
xmlLsOneNode(FILE *output, xmlNodePtr node)
xmlMalloc
xmlMalloc(int size)
xmlMallocLoc(int size, const char *file, int line)
xmlMemDisplay
xmlMemDisplay(FILE *fp)
xmlMemShow
xmlMemShow(FILE *fp, int nr)
xmlMemStrdup
xmlMemStrdup(const char *str)
xmlMemStrdupLoc(const char *str, const char *file, int line)
xmlMemUsed
xmlMemUsed(void)
xmlMemoryDump
xmlMemoryDump(void)
xmlNamespaceParseNCName(xmlParserCtxtPtr ctxt)
xmlNamespaceParseNSDef(xmlParserCtxtPtr ctxt)
xmlNamespaceParseQName(xmlParserCtxtPtr ctxt, xmlChar **prefix)
xmlNanoFTPCheckResponse(void *ctx)
xmlNanoFTPCleanup(void)
xmlNanoFTPClose(void *ctx)
xmlNanoFTPCloseConnection(void *ctx)
xmlNanoFTPConnect(void *ctx)
xmlNanoFTPConnectTo(const char *server, int port)
xmlNanoFTPCwd(void *ctx, char *directory)
xmlNanoFTPFreeCtxt(void * ctx)
xmlNanoFTPGet(void *ctx, ftpDataCallback callback, void *userData, const char *filename)
xmlNanoFTPGetConnection(void *ctx)
xmlNanoFTPGetResponse(void *ctx)
xmlNanoFTPGetSocket(void *ctx, const char *filename)
xmlNanoFTPInit(void)
xmlNanoFTPList(void *ctx, ftpListCallback callback, void *userData, char *filename)
xmlNanoFTPNewCtxt(const char *URL)
xmlNanoFTPOpen(const char *URL)
xmlNanoFTPProxy(const char *host, int port, const char *user, const char *passwd, int type)
xmlNanoFTPQuit(void *ctx)
xmlNanoFTPRead(void *ctx, void *dest, int len)
xmlNanoFTPScanProxy(const char *URL)
xmlNanoFTPUpdateURL(void *ctx, const char *URL)
xmlNanoHTTPCleanup(void)
xmlNanoHTTPClose(void *ctx)
xmlNanoHTTPFetch(const char *URL, const char *filename, char **contentType)
xmlNanoHTTPInit(void)
xmlNanoHTTPMethod(const char *URL, const char *method, const char *input, char **contentType, const char *headers)
xmlNanoHTTPOpen(const char *URL, char **contentType)
xmlNanoHTTPRead(void *ctx, void *dest, int len)
xmlNanoHTTPReturnCode(void *ctx)
xmlNanoHTTPSave(void *ctxt, const char *filename)
xmlNanoHTTPScanProxy(const char *URL)
xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len)
xmlNewChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
xmlNewComment(const xmlChar *content)
xmlNewDoc(const xmlChar *version)
xmlNewDocComment(xmlDocPtr doc, const xmlChar *content)
xmlNewDocFragment(xmlDocPtr doc)
xmlNewDocNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value)
xmlNewDocRawNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
xmlNewDocText(xmlDocPtr doc, const xmlChar *content)
xmlNewDocTextLen(xmlDocPtr doc, const xmlChar *content, int len)
xmlNewDtd(xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
xmlNewElementContent(xmlChar *name, xmlElementContentType type)
xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity)
xmlNewGlobalNs(xmlDocPtr doc, const xmlChar *href, const xmlChar *prefix)
xmlNewInputFromFile(xmlParserCtxtPtr ctxt, const char *filename)
xmlNewNode(xmlNsPtr ns, const xmlChar *name)
xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix)
xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value)
xmlNewPI(const xmlChar *name, const xmlChar *content)
xmlNewParserCtxt(void)
xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
xmlNewReference(xmlDocPtr doc, const xmlChar *name)
xmlNewText(const xmlChar *content)
xmlNewTextChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
xmlNewTextLen(const xmlChar *content, int len)
xmlNode
xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content)
xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len)
xmlNodeGetBase(xmlDocPtr doc, xmlNodePtr cur)
xmlNodeGetContent(xmlNodePtr cur)
xmlNodeGetLang(xmlNodePtr cur)
xmlNodeIsText(xmlNodePtr node)
xmlNodeListGetString(xmlDocPtr doc, xmlNodePtr list, int inLine)
xmlNodePtr
xmlNodeSet
xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content)
xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len)
xmlNodeSetLang(xmlNodePtr cur, const xmlChar *lang)
xmlNodeSetName(xmlNodePtr cur, const xmlChar *name)
xmlNodeSetPtr
xmlNotation
xmlNotationPtr
xmlNotationTable
xmlNotationTablePtr
xmlNs
xmlNsPtr
xmlNsType
xmlParseAttValue(xmlParserCtxtPtr ctxt)
xmlParseAttribute(xmlParserCtxtPtr ctxt, xmlChar **value)
xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt)
xmlParseAttributeType(xmlParserCtxtPtr ctxt, xmlEnumerationPtr *tree)
xmlParseCDSect(xmlParserCtxtPtr ctxt)
xmlParseCharData(xmlParserCtxtPtr ctxt, int cdata)
xmlParseCharEncoding(const char* name)
xmlParseCharRef(xmlParserCtxtPtr ctxt)
xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate)
xmlParseComment(xmlParserCtxtPtr ctxt)
xmlParseContent(xmlParserCtxtPtr ctxt)
xmlParseDTD(const xmlChar *ExternalID, const xmlChar *SystemID)
xmlParseDefaultDecl(xmlParserCtxtPtr ctxt, xmlChar **value)
xmlParseDoc(xmlChar *cur)
xmlParseDocTypeDecl(xmlParserCtxtPtr ctxt)
xmlParseDocument(xmlParserCtxtPtr ctxt)
xmlParseElement(xmlParserCtxtPtr ctxt)
xmlParseElementChildrenContentDecl
xmlParseElementContentDecl(xmlParserCtxtPtr ctxt, xmlChar *name, xmlElementContentPtr *result)
xmlParseElementDecl(xmlParserCtxtPtr ctxt)
xmlParseElementMixedContentDecl
xmlParseEncName(xmlParserCtxtPtr ctxt)
xmlParseEncodingDecl(xmlParserCtxtPtr ctxt)
xmlParseEndTag(xmlParserCtxtPtr ctxt)
xmlParseEntityDecl(xmlParserCtxtPtr ctxt)
xmlParseEntityRef(xmlParserCtxtPtr ctxt)
xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig)
xmlParseEnumeratedType(xmlParserCtxtPtr ctxt, xmlEnumerationPtr *tree)
xmlParseEnumerationType(xmlParserCtxtPtr ctxt)
xmlParseExternalID(xmlParserCtxtPtr ctxt, xmlChar **publicID, int strict)
xmlParseExternalSubset(xmlParserCtxtPtr ctxt, const xmlChar *ExternalID, const xmlChar *SystemID)
xmlParseFile(const char *filename)
xmlParseMarkupDecl(xmlParserCtxtPtr ctxt)
xmlParseMemory(char *buffer, int size)
xmlParseMisc(xmlParserCtxtPtr ctxt)
xmlParseName(xmlParserCtxtPtr ctxt)
xmlParseNamespace(xmlParserCtxtPtr ctxt)
xmlParseNmtoken(xmlParserCtxtPtr ctxt)
xmlParseNotationDecl(xmlParserCtxtPtr ctxt)
xmlParseNotationType(xmlParserCtxtPtr ctxt)
xmlParsePEReference(xmlParserCtxtPtr ctxt)
xmlParsePI(xmlParserCtxtPtr ctxt)
xmlParsePITarget(xmlParserCtxtPtr ctxt)
xmlParsePubidLiteral(xmlParserCtxtPtr ctxt)
xmlParseQuotedString(xmlParserCtxtPtr ctxt)
xmlParseReference(xmlParserCtxtPtr ctxt)
xmlParseSDDecl(xmlParserCtxtPtr ctxt)
xmlParseStartTag(xmlParserCtxtPtr ctxt)
xmlParseSystemLiteral(xmlParserCtxtPtr ctxt)
xmlParseVersionInfo(xmlParserCtxtPtr ctxt)
xmlParseVersionNum(xmlParserCtxtPtr ctxt)
xmlParseXMLDecl(xmlParserCtxtPtr ctxt)
xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt, const xmlParserNodeInfo* info)
xmlParserCtxt
xmlParserCtxtPtr
xmlParserError(void *ctx, const char *msg, ...)
xmlParserErrors
xmlParserFindNodeInfo(const xmlParserCtxt* ctxt, const xmlNode* node)
xmlParserFindNodeInfoIndex(const xmlParserNodeInfoSeq* seq, const xmlNode* node)
xmlParserGetDirectory(const char *filename)
xmlParserInput
xmlParserInputBuffer
xmlParserInputBufferCreateFd(int fd, xmlCharEncoding enc)
xmlParserInputBufferCreateFile(FILE *file, xmlCharEncoding enc)
xmlParserInputBufferCreateFilename(const char *filename, xmlCharEncoding enc)
xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len)
xmlParserInputBufferPtr
xmlParserInputBufferPush(xmlParserInputBufferPtr in, int len, const char *buf)
xmlParserInputBufferRead(xmlParserInputBufferPtr in, int len)
xmlParserInputDeallocate
xmlParserInputGrow(xmlParserInputPtr in, int len)
xmlParserInputPtr
xmlParserInputRead(xmlParserInputPtr in, int len)
xmlParserInputState
xmlParserNodeInfo
xmlParserNodeInfoPtr
xmlParserNodeInfoSeq
xmlParserNodeInfoSeqPtr
xmlParserPrintFileContext(xmlParserInputPtr input)
xmlParserPrintFileInfo(xmlParserInputPtr input)
xmlParserValidityError(void *ctx, const char *msg, ...)
xmlParserValidityWarning(void *ctx, const char *msg, ...)
xmlParserWarning(void *ctx, const char *msg, ...)
xmlPopInput(xmlParserCtxtPtr ctxt)
xmlPushInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr input)
xmlRealloc
xmlRealloc(void *ptr, int size)
xmlReallocLoc(void *ptr,int size, const char *file, int line)
xmlRecoverDoc(xmlChar *cur)
xmlRecoverFile(const char *filename)
xmlRecoverMemory(char *buffer, int size)
xmlRef
xmlRefPtr
xmlRefTable
xmlRefTablePtr
xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr handler)
xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr)
xmlRemoveNode(xmlNodePtr node) /* TODO */
xmlRemoveProp(xmlAttrPtr cur)
xmlRemoveProp(xmlAttrPtr attr) /* TODO */
xmlRemoveRef(xmlDocPtr doc, xmlAttrPtr attr)
xmlReplaceNode(xmlNodePtr old, xmlNodePtr cur)
xmlSAXHandler
xmlSAXHandlerPtr
xmlSAXLocator
xmlSAXLocatorPtr
xmlSAXParseDTD(xmlSAXHandlerPtr sax, const xmlChar *ExternalID, const xmlChar *SystemID)
xmlSAXParseDoc(xmlSAXHandlerPtr sax, xmlChar *cur, int recovery)
xmlSAXParseFile(xmlSAXHandlerPtr sax, const char *filename, int recovery)
xmlSAXParseMemory(xmlSAXHandlerPtr sax, char *buffer, int size, int recovery)
xmlSAXUserParseFile(xmlSAXHandlerPtr sax, void *user_data, const char *filename)
xmlSAXUserParseMemory(xmlSAXHandlerPtr sax, void *user_data, char *buffer, int size)
xmlSaveFile(const char *filename, xmlDocPtr cur)
xmlScanName(xmlParserCtxtPtr ctxt)
xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace)
xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar *href)
xmlSetCompressMode(int mode)
xmlSetDocCompressMode(xmlDocPtr doc, int mode)
xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
xmlSetNs(xmlNodePtr node, xmlNsPtr ns)
xmlSetProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
xmlSetupParserForBuffer(xmlParserCtxtPtr ctxt, const xmlChar* buffer, const char* filename)
xmlShell(xmlDocPtr doc, char *filename, xmlShellReadlineFunc input, FILE *output)
xmlShellCmd
xmlShellCtxt
xmlShellCtxtPtr
xmlShellReadlineFunc
xmlSplitQName(const xmlChar *name, xmlChar **prefix)
xmlStrcat(xmlChar *cur, const xmlChar *add)
xmlStrchr(const xmlChar *str, xmlChar val)
xmlStrcmp(const xmlChar *str1, const xmlChar *str2)
xmlStrdup(const xmlChar *cur)
xmlStringGetNodeList(xmlDocPtr doc, const xmlChar *value)
xmlStringLenGetNodeList(xmlDocPtr doc, const xmlChar *value, int len)
xmlStrlen(const xmlChar *str)
xmlStrncat(xmlChar *cur, const xmlChar *add, int len)
xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len)
xmlStrndup(const xmlChar *cur, int len)
xmlStrstr(const xmlChar *str, xmlChar *val)
xmlStrsub(const xmlChar *str, int start, int len)
xmlSubstituteEntitiesDefault(int val)
xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc)
xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len)
xmlTextMerge(xmlNodePtr first, xmlNodePtr second)
xmlUnlinkNode(xmlNodePtr cur)
xmlValidCtxt
xmlValidCtxtPtr
xmlValidGetPotentialChildren(xmlElementContent *ctree, const xmlChar **list, int *len, int max)
xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **list, int max)
xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlAttributePtr attr)
xmlValidateAttributeValue(xmlAttributeType type, const xmlChar *value)
xmlValidateDocument(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd)
xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlElementPtr elem)
xmlValidateNotationDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNotationPtr nota)
xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *notationName)
xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr, const xmlChar *value)
xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
xmlValidityErrorFunc
xmlValidityWarningFunc
xmlXPathAxis
xmlXPathAxisFunc
xmlXPathAxisPtr
xmlXPathContext
xmlXPathContextPtr
xmlXPathConvertFunc
xmlXPathEval(const xmlChar *str, xmlXPathContextPtr ctxt)
xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt)
xmlXPathEvalFunc
xmlXPathFreeContext(xmlXPathContextPtr ctxt)
xmlXPathFreeNodeSet(xmlNodeSetPtr obj)
xmlXPathFreeNodeSetList(xmlXPathObjectPtr obj)
xmlXPathFreeObject(xmlXPathObjectPtr obj)
xmlXPathFuncPtr
xmlXPathFunct
xmlXPathFunction
xmlXPathNewContext(xmlDocPtr doc)
xmlXPathNodeSetCreate(xmlNodePtr val)
xmlXPathObject
xmlXPathObjectPtr
xmlXPathParserContext
xmlXPathParserContextPtr
xmlXPathRegisterAxis(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathAxisFunc f)
xmlXPathRegisterFunc(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathFunction f)
xmlXPathRegisterType(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathConvertFunc f)
xmlXPathRegisterVariable(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathObject value)
xmlXPathType
xmlXPathTypePtr
xmlXPathVariable
xmlXPathVariablePtr
