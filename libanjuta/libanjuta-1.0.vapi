/* libanjuta.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Anjuta", lower_case_cprefix = "anjuta_")]
namespace Anjuta {
	[CCode (cprefix = "ANJUTA_LAUNCHER_OUTPUT_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum LauncherOutputType {
		STDOUT,
		STDERR,
		PTY
	}
	[CCode (cprefix = "ANJUTA_PLUGIN_DESCRIPTION_PARSE_ERROR_INVALID_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum PluginDescriptionParseError {
		SYNTAX,
		ESCAPES,
		CHARS
	}
	[CCode (cprefix = "ANJUTA_PLUGIN_MANAGER_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum PluginManagerError {
		MISSING_FACTORY,
		ERROR_UNKNOWN
	}
	[CCode (cprefix = "ANJUTA_PREFERENCES_FILTER_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum PreferencesFilterType {
		NONE,
		PROJECT
	}
	[CCode (cprefix = "ANJUTA_PROFILE_ERROR_URI_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum ProfileError {
		READ_FAILED,
		WRITE_FAILED
	}
	[CCode (cprefix = "ANJUTA_PROPERTY_DATA_TYPE_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum PropertyDataType {
		BOOL,
		INT,
		TEXT,
		COLOR,
		FONT
	}
	[CCode (cprefix = "ANJUTA_PROPERTY_OBJECT_TYPE_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum PropertyObjectType {
		TOGGLE,
		SPIN,
		ENTRY,
		COMBO,
		TEXT,
		COLOR,
		FONT,
		FILE,
		FOLDER
	}
	[CCode (cprefix = "ANJUTA_SERIALIZER_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum SerializerMode {
		READ,
		WRITE
	}
	[CCode (cprefix = "ANJUTA_SESSION_PHASE_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum SessionPhase {
		START,
		FIRST,
		NORMAL,
		LAST,
		END
	}
	[CCode (cprefix = "ANJUTA_SHELL_ERROR_DOESNT_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum ShellError {
		EXIST
	}
	[CCode (cprefix = "ANJUTA_SHELL_PLACEMENT_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum ShellPlacement {
		NONE,
		TOP,
		BOTTOM,
		RIGHT,
		LEFT,
		CENTER,
		FLOATING
	}
	[CCode (cprefix = "ANJUTA_CONVERT_ERROR_AUTO_DETECTION_", cheader_filename = "libanjuta/libanjuta.h")]
	public enum GeditConvertError {
		FAILED
	}
	[CCode (cprefix = "ANJUTA_VCS_STATUS_", cheader_filename = "libanjuta/libanjuta.h")]
	[Flags]
	public enum VcsStatus {
		MODIFIED,
		ADDED,
		DELETED,
		CONFLICTED,
		MISSING
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class PluginDescription {
		public void foreach_key (string section, bool include_localized, Anjuta.PluginDescriptionLineFunc func);
		public void foreach_section (Anjuta.PluginDescriptionSectionFunc func);
		public bool get_integer (string section, string keyname, int val);
		public bool get_locale_string (string section, string keyname, string val);
		public bool get_raw (string section, string keyname, string locale, string val);
		public bool get_string (string section, string keyname, string val);
		public PluginDescription (string filename) throws GLib.Error;
		public PluginDescription.from_string (string data) throws GLib.Error;
		public static GLib.Quark parse_error_quark ();
		public weak string to_string ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Property {
		public weak Gtk.Widget get_widget ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class UtilStringMap {
		public int type;
		public weak string name;
	}
	[CCode (copy_function = "anjuta_encoding_copy", cheader_filename = "libanjuta/libanjuta.h")]
	public class Encoding : GLib.Boxed {
		public weak Anjuta.Encoding copy ();
		public weak string get_charset ();
		public static weak Anjuta.Encoding get_current ();
		public static weak Anjuta.Encoding get_from_charset (string charset);
		public static weak Anjuta.Encoding get_from_index (int index);
		public weak string get_name ();
		public static weak Anjuta.Encoding get_utf8 ();
		public weak string to_string ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class GError : GLib.Boxed {
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class AsyncCommand : Anjuta.Command {
		public static weak string get_error_message (Anjuta.Command command);
		public void @lock ();
		public static void set_error_message (Anjuta.Command command, string error_message);
		public void unlock ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Command : GLib.Object {
		public virtual weak string get_error_message ();
		public virtual void notify_complete (uint return_code);
		public virtual void notify_data_arrived ();
		[NoWrapper]
		public virtual uint run ();
		public virtual void set_error_message (string error_message);
		public virtual void start ();
		public signal void command_finished (uint p0);
		public signal void data_arrived ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Launcher : GLib.Object {
		public bool execute (string command_str, Anjuta.LauncherOutputCallback callback, void* callback_data);
		public bool execute_v (string[] argv, Anjuta.LauncherOutputCallback callback, void* callback_data);
		public int get_child_pid ();
		public bool is_busy ();
		public Launcher ();
		public void reset ();
		public void send_ptyin (string input_str);
		public void send_stdin (string input_str);
		public void send_stdin_eof ();
		public bool set_buffered_output (bool buffered);
		public bool set_check_passwd_prompt (bool check_passwd);
		public void set_encoding (string charset);
		public void set_env (string name, string value);
		public bool set_terminal_echo (bool echo_on);
		public bool set_terminate_on_exit (bool terminate_on_exit);
		public void @signal (int sig);
		public signal void busy (bool busy_flag);
		public signal void child_exited (int child_pid, int exit_status, ulong time_taken_in_seconds);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Plugin : GLib.Object {
		public uint add_watch (string name, [CCode (delegate_target_pos = 3.1)] Anjuta.PluginValueAdded added, Anjuta.PluginValueRemoved removed);
		public bool is_active ();
		public void remove_watch (uint id, bool send_remove);
		public virtual bool activate ();
		public virtual bool deactivate ();
		[NoAccessorMethod]
		public weak Anjuta.Shell shell { get; set; }
		public signal void activated ();
		public signal void deactivated ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class PluginHandle : GLib.Object {
		public weak string get_about ();
		public bool get_can_load ();
		public bool get_checked ();
		public weak GLib.HashTable get_dependencies ();
		public weak GLib.List get_dependency_names ();
		public weak GLib.HashTable get_dependents ();
		public weak Anjuta.PluginDescription get_description ();
		public weak string get_icon_path ();
		public weak string get_id ();
		public weak GLib.List get_interfaces ();
		public weak string get_language ();
		public weak string get_name ();
		public weak string get_path ();
		public bool get_resident ();
		public int get_resolve_pass ();
		public bool get_user_activatable ();
		public PluginHandle (string plugin_desc_path);
		public void set_can_load (bool can_load);
		public void set_checked (bool checked);
		public void set_resolve_pass (bool resolve_pass);
		public void unresolve_dependencies ();
		public weak string about { get; }
		public weak bool can_load { get; }
		public weak bool checked { get; }
		public weak void* dependencies { get; }
		public weak void* dependency_names { get; }
		public weak void* dependents { get; }
		public weak void* description { get; }
		public weak string icon_path { get; }
		public weak string id { get; }
		public weak void* interfaces { get; }
		public weak string language { get; }
		public weak string name { get; }
		public weak string path { get; }
		public weak bool resident { get; }
		public weak int resolve_pass { get; }
		public weak bool user_activatable { get; }
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class PluginManager : GLib.Object {
		public void activate_plugins (GLib.List plugin_descs);
		public static GLib.Quark error_quark ();
		public weak GLib.List get_active_plugin_objects ();
		public weak GLib.List get_active_plugins ();
		public weak GLib.Object get_plugin (string iface_name);
		public weak GLib.Object get_plugin_by_id (string plugin_id);
		public weak Gtk.Widget get_plugins_page ();
		public weak string get_remembered_plugins ();
		public weak Gtk.Widget get_remembered_plugins_page ();
		public PluginManager (GLib.Object shell, Anjuta.Status status, GLib.List plugin_search_paths);
		public weak GLib.List query (string section_name, string attribute_name, string attribute_value);
		public weak Anjuta.PluginDescription select (string title, string description, GLib.List plugin_descriptions);
		public weak GLib.Object select_and_activate (string title, string description, GLib.List plugin_descriptions);
		public void set_remembered_plugins (string remembered_plugins);
		public void unload_all_plugins ();
		public bool unload_plugin (GLib.Object plugin);
		public bool unload_plugin_by_id (string plugin_id);
		[NoAccessorMethod]
		public weak void* activated_plugins { get; }
		[NoAccessorMethod]
		public weak void* available_plugins { get; }
		[NoAccessorMethod]
		public weak void* profiles { get; }
		[NoAccessorMethod]
		public weak GLib.Object shell { get; set construct; }
		[NoAccessorMethod]
		public weak Anjuta.Status status { get; set construct; }
		public signal void plugin_activated (void* plugin_desc, Anjuta.Plugin plugin);
		public signal void plugin_deactivated (void* plugin_desc, Anjuta.Plugin plugin);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Preferences : GLib.Object {
		public void add_dir (string dir, GConf.ClientPreloadType preload);
		public void add_page (Glade.XML gxml, string glade_widget_name, string title, string icon_filename);
		public weak string default_get (string key);
		public int default_get_int (string key);
		public bool dir_exists (string dir);
		public void @foreach (Anjuta.PreferencesFilterType filter, Anjuta.PreferencesCallback callback, void* data);
		public weak string get (string key);
		public weak Gtk.Widget get_dialog ();
		public int get_int (string key);
		public int get_int_with_default (string key, int default_value);
		public weak GLib.SList get_list (string key, GConf.ValueType list_type);
		public bool get_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, void* car_retloc, void* cdr_retloc);
		public weak string get_prefix ();
		public bool is_dialog_created ();
		public bool load_gconf ();
		public Preferences (Anjuta.PluginManager plugin_manager);
		public uint notify_add (string key, GConf.ClientNotifyFunc func, void* data, GLib.FreeFunc destroy_notify);
		public void notify_remove (uint notify_id);
		public void register_all_properties_from_glade_xml (Glade.XML gxml, Gtk.Widget parent);
		public bool register_property_custom (Gtk.Widget object, string key, string default_value, Anjuta.PropertyDataType data_type, uint flags, GLib.Callback set_property, GLib.Callback get_property);
		public bool register_property_from_string (Gtk.Widget object, string property_desc);
		public bool register_property_raw (Gtk.Widget object, string key, string default_value, uint flags, Anjuta.PropertyObjectType object_type, Anjuta.PropertyDataType data_type);
		public void remove_dir (string dir);
		public void remove_page (string page_name);
		public void reset_defaults ();
		public bool save (GLib.FileStream stream);
		public bool save_filtered (GLib.FileStream stream, Anjuta.PreferencesFilterType filter);
		public bool save_gconf (Anjuta.PreferencesFilterType filter);
		public void set (string key, string value);
		public void set_int (string key, int value);
		public void set_list (string key, GConf.ValueType list_type, GLib.SList list);
		public bool set_pair (string key, GConf.ValueType car_type, GConf.ValueType cdr_type, void* address_of_car, void* address_of_cdr);
		public void sync_to_session ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class PreferencesDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		public void add_page (string name, string title, Gdk.Pixbuf icon, Gtk.Widget page);
		public PreferencesDialog ();
		public void remove_page (string title);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Profile : GLib.Object {
		public void add_plugin (Anjuta.PluginDescription plugin);
		public bool add_plugins_from_xml (string profile_xml_uri, bool exclude_from_sync) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public weak string get_name ();
		public weak GLib.List get_plugins ();
		public bool has_plugin (Anjuta.PluginDescription plugin);
		public Profile (string profile_name, Anjuta.PluginManager plugin_manager);
		public void remove_plugin (Anjuta.PluginDescription plugin);
		public void set_sync_uri (string sync_uri);
		public bool sync () throws GLib.Error;
		public weak string to_xml ();
		[NoAccessorMethod]
		public weak Anjuta.PluginManager plugin_manager { get; set construct; }
		[NoAccessorMethod]
		public weak void* plugins { get; set construct; }
		[NoAccessorMethod]
		public weak string profile_name { get; set construct; }
		[NoAccessorMethod]
		public weak string sync_uri { get; set; }
		public signal void changed (void* plugins);
		public signal void plugin_added (void* plugin);
		public signal void plugin_removed (void* plugin);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class ProfileManager : GLib.Object {
		public void freeze ();
		public weak Anjuta.Profile get_current ();
		public ProfileManager (Anjuta.PluginManager plugin_manager);
		public bool pop (string profile_name) throws GLib.Error;
		public bool push (Anjuta.Profile profile) throws GLib.Error;
		public bool thaw () throws GLib.Error;
		[NoAccessorMethod]
		public weak Anjuta.PluginManager plugin_manager { get; set construct; }
		public signal void profile_descoped (Anjuta.Profile profile);
		public signal void profile_popped (Anjuta.Profile profile);
		public signal void profile_pushed (Anjuta.Profile profile);
		public signal void profile_scoped (Anjuta.Profile profile);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class SavePrompt : Gtk.MessageDialog, Atk.Implementor, Gtk.Buildable {
		public void add_item (string item_name, string item_detail, void* item, Anjuta.SavePromptSaveFunc item_save_func);
		public int get_items_count ();
		public SavePrompt (Gtk.Window parent);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Serializer : GLib.Object {
		public Serializer (string filepath, Anjuta.SerializerMode mode);
		public bool read_float (string name, float value);
		public bool read_int (string name, int value);
		public bool read_string (string name, string value, bool replace);
		public bool write_float (string name, float value);
		public bool write_int (string name, int value);
		public bool write_string (string name, string value);
		[NoAccessorMethod]
		public weak string filepath { get; construct; }
		[NoAccessorMethod]
		public weak Anjuta.SerializerMode mode { get; construct; }
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Session : GLib.Object {
		public void clear ();
		public void clear_section (string section);
		public float get_float (string section, string key);
		public int get_int (string section, string key);
		public weak string get_session_directory ();
		public weak string get_session_filename ();
		public weak string get_string (string section, string key);
		public weak GLib.List get_string_list (string section, string key);
		public Session (string session_directory);
		public void set_float (string section, string key, float value);
		public void set_int (string section, string key, int value);
		public void set_string (string section, string key, string value);
		public void set_string_list (string section, string key, GLib.List value);
		public void sync ();
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class Status : Gnome.AppBar, Atk.Implementor, Gtk.Buildable {
		public void add_widget (Gtk.Widget widget);
		public void busy_pop ();
		public void busy_push ();
		public void disable_splash (bool disable_splash);
		public Status ();
		public void progress_add_ticks (int ticks);
		public void progress_pulse (string text);
		public void progress_reset ();
		public void progress_tick (Gdk.Pixbuf icon, string text);
		public void push (string mesg);
		public void set (string mesg);
		public void set_default (string label, string value_format);
		public void set_splash (string splash_file, int splash_progress_position);
		public void set_title (string title);
		public void set_title_window (Gtk.Widget window);
		public signal void busy (bool state);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class UI : Gtk.UIManager, Gtk.Buildable {
		public void activate_action_by_group (Gtk.ActionGroup action_group, string action_name);
		public void activate_action_by_path (string action_path);
		public void add_action_group (string action_group_name, string action_group_label, Gtk.ActionGroup action_group, bool can_customize);
		public weak Gtk.ActionGroup add_action_group_entries (string action_group_name, string action_group_label, Gtk.ActionEntry[] entries, string translation_domain, bool can_customize, void* user_data);
		public weak Gtk.ActionGroup add_toggle_action_group_entries (string action_group_name, string action_group_label, Gtk.ToggleActionEntry entries, int num_entries, string translation_domain, bool can_customize);
		public void dump_tree ();
		public weak Gtk.Widget get_accel_editor ();
		public weak Gtk.AccelGroup get_accel_group ();
		public weak Gtk.Action get_action (string action_group_name, string action_name);
		public weak Gtk.IconFactory get_icon_factory ();
		public int merge (string ui_filename);
		public UI ();
		public void remove_action_group (Gtk.ActionGroup action_group);
		public void unmerge (int id);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public class VcsStatusTreeView : Gtk.TreeView, Atk.Implementor, Gtk.Buildable {
		public void add (string path, Anjuta.VcsStatus status, bool selected);
		public void destroy ();
		public weak GLib.List get_selected ();
		public VcsStatusTreeView ();
		public void select_all ();
		public void unselect_all ();
		[NoAccessorMethod]
		public weak bool show_status { get; set; }
		[NoAccessorMethod]
		public weak Anjuta.VcsStatus status_codes { get; construct; }
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public interface Shell : GLib.Object {
		public void add (string first_name, ...);
		public void add_valist (string first_name, GLib.Type first_type, void* var_args);
		public void add_widget (Gtk.Widget widget, string name, string title, string stock_id, Anjuta.ShellPlacement placement) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public void freeze () throws GLib.Error;
		public void get (string first_name, ...);
		public void get_valist (string first_name, GLib.Type first_type, void* var_args);
		public void notify_exit () throws GLib.Error;
		public void session_load (string session_directory) throws GLib.Error;
		public void session_save (string session_directory) throws GLib.Error;
		public void thaw () throws GLib.Error;
		public abstract void add_value (string name, GLib.Value value) throws GLib.Error;
		public abstract void add_widget_full (Gtk.Widget widget, string name, string title, string stock_id, Anjuta.ShellPlacement placement, bool locked) throws GLib.Error;
		public abstract weak GLib.Object get_object (string iface_name) throws GLib.Error;
		public abstract weak Anjuta.PluginManager get_plugin_manager () throws GLib.Error;
		public abstract weak Anjuta.Preferences get_preferences () throws GLib.Error;
		public abstract weak Anjuta.ProfileManager get_profile_manager () throws GLib.Error;
		public abstract weak Anjuta.Status get_status () throws GLib.Error;
		public abstract weak Anjuta.UI get_ui () throws GLib.Error;
		public abstract void get_value (string name, GLib.Value value) throws GLib.Error;
		public abstract void present_widget (Gtk.Widget widget) throws GLib.Error;
		public abstract void remove_value (string name) throws GLib.Error;
		public abstract void remove_widget (Gtk.Widget widget) throws GLib.Error;
		public signal void exiting ();
		public signal void load_session (int phase, GLib.Object session);
		[HasEmitter]
		public signal void save_prompt (GLib.Object save_prompt);
		public signal void save_session (int phase, GLib.Object session);
		public signal void value_added (string name, GLib.Value value);
		public signal void value_removed (string name);
	}
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate void LauncherOutputCallback (Anjuta.Launcher launcher, Anjuta.LauncherOutputType output_type, string chars);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate void PluginDescriptionLineFunc (Anjuta.PluginDescription df, string key, string locale, string value);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate void PluginDescriptionSectionFunc (Anjuta.PluginDescription df, string name);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate void PluginValueAdded (Anjuta.Plugin plugin, string name, GLib.Value value);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate void PluginValueRemoved (Anjuta.Plugin plugin, string name);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate bool PreferencesCallback (Anjuta.Preferences pr, string key);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public delegate bool SavePromptSaveFunc (Anjuta.SavePrompt save_prompt, void* item);
	public const int VCS_DEFAULT_STATUS_CODES;
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static GLib.Quark convert_error_quark ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string convert_from_utf8 (string content, ulong len, Anjuta.Encoding encoding, ulong new_len) throws GLib.Error;
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string convert_to_utf8 (string content, ulong len, out weak Anjuta.Encoding encoding, ulong new_len) throws GLib.Error;
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_data_dir ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_data_file (string pixfile);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_doc_dir ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_doc_file (string docfile);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_help_dir ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_help_dir_locale (string locale);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_help_file (string helpfile);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_help_file_locale (string helpfile, string locale);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak Gtk.Widget res_get_image (string filename);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak Gtk.Widget res_get_image_sized (string filename, int width, int height);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_pixmap_dir ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string res_get_pixmap_file (string pixfile);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void res_help_search (string word);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak Gtk.Widget res_lookup_widget (Gtk.Widget widget, string widget_name);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void res_url_show (string url);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void status (Anjuta.Status status, string mesg, int timeout);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak Gtk.Widget util_button_new_with_stock_image (string text, string stock_id);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_color_from_string (string val, ushort r, ushort g, ushort b);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static Gdk.Color util_convert_color (Anjuta.Preferences prefs, string pref_name);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_convert_to_utf8 (string str);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_copy_file (string src, string dest, bool show_error);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_create_dir (string d);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak Gtk.Widget util_dialog_add_button (Gtk.Dialog dialog, string text, string stock_id, int response_id);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_dialog_boolean_question (Gtk.Window parent, string mesg);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_dialog_error (Gtk.Window parent, string mesg);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_dialog_error_system (Gtk.Window parent, int errnum, string mesg);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_dialog_info (Gtk.Window parent, string mesg);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_dialog_input (Gtk.Window parent, string label, string default_value, string value);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_dialog_warning (Gtk.Window parent, string mesg);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_diff (string uri, string text);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_escape_quotes (string str);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static int util_execute_shell (string dir, string command);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_get_a_tmp_file ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_get_real_path (string path);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_get_uri_mime_type (string uri);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_get_user_config_dir ();
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_glist_from_map (Anjuta.UtilStringMap map);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_glist_from_string (string id);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_glist_path_dedup (GLib.List list);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_glist_strings_dup (GLib.List list);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_glist_strings_free (GLib.List list);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_glist_strings_join (GLib.List list, string delimiter);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_glist_strings_prefix (GLib.List list, string prefix);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_glist_strings_sort (GLib.List list);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_glist_strings_sufix (GLib.List list, string sufix);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static void util_help_display (Gtk.Window parent, string doc_id, string file_name);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_parse_args_from_string (string str);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_path_has_extension (string path, string ext);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static bool util_prog_is_installed (string prog, bool show);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_replace_home_dir_with_tilde (string uri);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_str_middle_truncate (string str, uint truncate_length);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_string_from_color (ushort r, ushort g, ushort b);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_string_from_type (Anjuta.UtilStringMap map, int type);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static int util_type_from_string (Anjuta.UtilStringMap map, string str);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak GLib.List util_update_string_list (GLib.List p_list, string p_str, int length);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_uri_get_dirname (string uri);
	[CCode (cheader_filename = "libanjuta/libanjuta.h")]
	public static weak string util_user_shell ();
}
/* libanjuta-interfaces.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "IAnjuta", lower_case_cprefix = "ianjuta_")]
namespace IAnjuta {
	[CCode (cprefix = "IANJUTA_BUILDABLE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum BuildableCommand {
		COMMAND_COMPILE,
		COMMAND_BUILD,
		COMMAND_BUILD_TARBALL,
		COMMAND_INSTALL,
		COMMAND_CONFIGURE,
		COMMAND_GENERATE,
		COMMAND_CLEAN,
		COMMAND_EXECUTE,
		COMMAND_IS_BUILT,
		N_COMMANDS
	}
	[CCode (cprefix = "IANJUTA_BUILDER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum BuilderError {
		SUCCEED,
		FAILED,
		CANCELED,
		ABORTED,
		INTERRUPTED,
		TERMINATED,
		UNKNOWN_TARGET,
		UNKNOWN_ERROR,
		OTHER_ERROR
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_BREAKPOINT_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerBreakpointMethod {
		SET_AT_ADDRESS,
		SET_AT_FUNCTION,
		ENABLE,
		IGNORE,
		CONDITION
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_BREAKPOINT_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerBreakpointType {
		REMOVED,
		UPDATED,
		ON_LINE,
		ON_ADDRESS,
		ON_FUNCTION,
		ON_READ,
		ON_WRITE,
		WITH_ENABLE,
		WITH_IGNORE,
		WITH_TIME,
		WITH_CONDITION,
		WITH_TEMPORARY
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerData {
		INFORMATION,
		BREAKPOINT,
		FRAME,
		VARIABLE,
		REGISTER
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerError {
		OK,
		NOT_READY,
		NOT_RUNNING,
		NOT_STOPPED,
		NOT_LOADED,
		NOT_STARTED,
		NOT_CONNECTED,
		NOT_IMPLEMENTED,
		CANCEL,
		UNABLE_TO_CREATE_VARIABLE,
		UNABLE_TO_ACCESS_MEMORY,
		UNABLE_TO_OPEN_FILE,
		UNSUPPORTED_FILE_TYPE,
		UNSUPPORTED_VERSION,
		UNABLE_TO_FIND_DEBUGGER,
		ALREADY_DONE,
		PROGRAM_NOT_FOUND,
		UNKNOWN_ERROR,
		OTHER_ERROR
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerOutputType {
		OUTPUT,
		WARNING_OUTPUT,
		ERROR_OUTPUT,
		INFO_OUTPUT
	}
	[CCode (cprefix = "IANJUTA_DEBUGGER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DebuggerState {
		BUSY,
		STOPPED,
		STARTED,
		PROGRAM_LOADED,
		PROGRAM_STOPPED,
		PROGRAM_RUNNING
	}
	[CCode (cprefix = "IANJUTA_DOCUMENT_MANAGER_DOESNT_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum DocumentManagerError {
		EXIST
	}
	[CCode (cprefix = "IANJUTA_EDITOR_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum EditorAttribute {
		TEXT,
		KEYWORD,
		COMMENT,
		STRING
	}
	[CCode (cprefix = "IANJUTA_EDITOR_DOESNT_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum EditorError {
		EXIST
	}
	[CCode (cprefix = "IANJUTA_EDITOR_LINE_MODE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum EditorLineModeType {
		LF,
		CR,
		CRLF
	}
	[CCode (cprefix = "IANJUTA_INDICABLE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum IndicableIndicator {
		NONE,
		IMPORTANT,
		WARNING,
		CRITICAL
	}
	[CCode (cprefix = "IANJUTA_MARKABLE_INVALID_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum MarkableError {
		LOCATION
	}
	[CCode (cprefix = "IANJUTA_MARKABLE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum MarkableMarker {
		LINEMARKER,
		BOOKMARK,
		BREAKPOINT_DISABLED,
		BREAKPOINT_ENABLED,
		PROGRAM_COUNTER
	}
	[CCode (cprefix = "IANJUTA_MESSAGE_MANAGER_DOESNT_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum MessageManagerError {
		EXIST
	}
	[CCode (cprefix = "IANJUTA_MESSAGE_VIEW_TYPE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum MessageViewType {
		NORMAL,
		INFO,
		WARNING,
		ERROR
	}
	[CCode (cprefix = "IANJUTA_PLUGIN_FACTORY_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum PluginFactoryError {
		OK,
		MISSING_LOCATION,
		MISSING_TYPE,
		MISSING_MODULE,
		INVALID_MODULE,
		MISSING_FUNCTION,
		INVALID_TYPE,
		UNKNOWN_ERROR
	}
	[CCode (cprefix = "IANJUTA_PROJECT_MANAGER_CAN_ADD_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum ProjectManagerCapabilities {
		NONE,
		GROUP,
		TARGET,
		SOURCE
	}
	[CCode (cprefix = "IANJUTA_PROJECT_MANAGER_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum ProjectManagerElementType {
		UNKNOWN,
		SOURCE,
		TARGET,
		GROUP
	}
	[CCode (cprefix = "IANJUTA_PROJECT_MANAGER_TARGET_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum ProjectManagerTargetType {
		UNKNOWN,
		SHAREDLIB,
		STATICLIB,
		EXECUTABLE
	}
	[CCode (cprefix = "IANJUTA_SYMBOL_FIELD_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum SymbolField {
		SIMPLE,
		FILE_PATH,
		IMPLEMENTATION,
		ACCESS,
		KIND,
		TYPE,
		TYPE_NAME,
		LANGUAGE,
		FILE_IGNORE,
		FILE_INCLUDE,
		PROJECT_NAME,
		WORKSPACE_NAME
	}
	[CCode (cprefix = "IANJUTA_SYMBOL_TYPE_", cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public enum SymbolType {
		UNDEF,
		CLASS,
		ENUM,
		ENUMERATOR,
		FIELD,
		FUNCTION,
		INTERFACE,
		MEMBER,
		METHOD,
		NAMESPACE,
		PACKAGE,
		PROTOTYPE,
		STRUCT,
		TYPEDEF,
		UNION,
		VARIABLE,
		EXTERNVAR,
		MACRO,
		MACRO_WITH_ARG,
		FILE,
		OTHER,
		MAX
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class BuilderHandle {
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerBreakpointItem {
		public int type;
		public uint id;
		public weak string file;
		public uint line;
		public weak string function;
		public ulong address;
		public bool enable;
		public uint ignore;
		public uint times;
		public weak string condition;
		public bool temporary;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerFrame {
		public int thread;
		public uint level;
		public weak string args;
		public weak string file;
		public uint line;
		public weak string function;
		public weak string library;
		public ulong address;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerInstructionALine {
		public ulong address;
		public weak string label;
		public weak string text;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerInstructionDisassembly {
		public uint size;
		[NoArrayLength]
		public IAnjuta.DebuggerInstructionALine[] data;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerMemoryBlock {
		public ulong address;
		public uint length;
		public weak string data;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerRegisterData {
		public uint num;
		public weak string name;
		public weak string value;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class DebuggerVariableObject {
		public weak string name;
		public weak string expression;
		public weak string type;
		public weak string value;
		public bool changed;
		public bool exited;
		public bool deleted;
		public int children;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public class LanguageId {
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Bookmark : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void clear_all () throws GLib.Error;
		public abstract void first () throws GLib.Error;
		public abstract void last () throws GLib.Error;
		public abstract void next () throws GLib.Error;
		public abstract void previous () throws GLib.Error;
		public abstract void toggle (int location, bool ensure_visible) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Buildable : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void build (string uri) throws GLib.Error;
		public abstract void clean (string uri) throws GLib.Error;
		public abstract void configure (string uri) throws GLib.Error;
		public abstract void execute (string uri) throws GLib.Error;
		public abstract void generate (string uri) throws GLib.Error;
		public abstract weak string get_command (IAnjuta.BuildableCommand command_id) throws GLib.Error;
		public abstract void install (string uri) throws GLib.Error;
		public abstract void reset_commands () throws GLib.Error;
		public abstract void set_command (IAnjuta.BuildableCommand command_id, string command) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Builder : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.BuilderHandle build (string uri, IAnjuta.BuilderCallback callback) throws GLib.Error;
		public abstract void cancel (IAnjuta.BuilderHandle handle) throws GLib.Error;
		public abstract weak IAnjuta.BuilderHandle is_built (string uri, IAnjuta.BuilderCallback callback) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebugManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public signal void breakpoint_changed (void* breakpoint);
		public signal void debugger_started ();
		public signal void debugger_stopped (GLib.Error err);
		public signal void frame_changed (uint frame, int thread);
		public signal void location_changed (ulong address, string uri, uint line);
		public signal void program_exited ();
		public signal void program_loaded ();
		public signal void program_moved (int pid, int tid, ulong address, string file, uint line);
		public signal void program_running ();
		public signal void program_started ();
		public signal void program_stopped ();
		public signal void program_unloaded ();
		public signal void sharedlib_event ();
		public signal void signal_received (string name, string description);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Debugger : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool abort () throws GLib.Error;
		public abstract bool attach (int pid, GLib.List source_search_directories) throws GLib.Error;
		public abstract bool callback (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract void disable_log () throws GLib.Error;
		public abstract void enable_log (IAnjuta.MessageView log) throws GLib.Error;
		public abstract bool evaluate (string name, string value, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool exit () throws GLib.Error;
		public abstract IAnjuta.DebuggerState get_state () throws GLib.Error;
		public abstract bool handle_signal (string name, bool stop, bool print, bool ignore) throws GLib.Error;
		public abstract bool info_args (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_frame (uint frame, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_program (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_sharedlib (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_signal (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_target (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_thread (int thread, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_udot (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool info_variables (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool inspect (string name, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool interrupt () throws GLib.Error;
		public abstract bool list_argument (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool list_frame (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool list_local (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool list_register (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool list_thread (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool load (string file, string mime_type, GLib.List source_search_directories) throws GLib.Error;
		public abstract bool print (string variable, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool quit () throws GLib.Error;
		public abstract bool run () throws GLib.Error;
		public abstract bool run_to (string uri, int line) throws GLib.Error;
		public abstract bool send_command (string command) throws GLib.Error;
		public abstract bool set_environment (string env) throws GLib.Error;
		public abstract bool set_frame (uint frame) throws GLib.Error;
		public abstract bool set_thread (int thread) throws GLib.Error;
		public abstract bool set_working_directory (string dir) throws GLib.Error;
		public abstract bool start (string args, bool terminal, bool stop) throws GLib.Error;
		public abstract bool step_in () throws GLib.Error;
		public abstract bool step_out () throws GLib.Error;
		public abstract bool step_over () throws GLib.Error;
		public abstract bool unload () throws GLib.Error;
		public signal void debugger_ready (IAnjuta.DebuggerState state);
		public signal void debugger_started ();
		public signal void debugger_stopped (GLib.Error err);
		public signal void frame_changed (uint frame, int thread);
		public signal void program_exited ();
		public signal void program_loaded ();
		public signal void program_moved (int pid, int tid, ulong address, string file, uint line);
		public signal void program_running ();
		public signal void program_stopped ();
		public signal void sharedlib_event ();
		public signal void signal_received (string name, string description);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebuggerBreakpoint : IAnjuta.Debugger, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool clear (uint id, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool condition (uint id, string condition, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool enable (uint id, bool enable, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool ignore (uint id, uint ignore, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract int implement () throws GLib.Error;
		public abstract bool list (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool set_at_address (ulong address, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool set_at_function (string file, string function, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool set_at_line (string file, uint line, IAnjuta.DebuggerCallback callback) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebuggerInstruction : IAnjuta.Debugger, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool disassemble (ulong address, uint length, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool run_to_address (ulong address) throws GLib.Error;
		public abstract bool step_in () throws GLib.Error;
		public abstract bool step_over () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebuggerMemory : IAnjuta.Debugger, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool inspect (ulong address, uint length, IAnjuta.DebuggerCallback callback) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebuggerRegister : IAnjuta.Debugger, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool list (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool update (IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool write (IAnjuta.DebuggerRegisterData value) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DebuggerVariable : IAnjuta.Debugger, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool assign (string name, string value) throws GLib.Error;
		public abstract bool create (string expression, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool destroy (string name) throws GLib.Error;
		public abstract bool evaluate (string name, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool list_children (string name, IAnjuta.DebuggerCallback callback) throws GLib.Error;
		public abstract bool update (IAnjuta.DebuggerCallback callback) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Document : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void begin_undo_action () throws GLib.Error;
		public abstract bool can_redo () throws GLib.Error;
		public abstract bool can_undo () throws GLib.Error;
		public abstract void clear () throws GLib.Error;
		public abstract void copy () throws GLib.Error;
		public abstract void cut () throws GLib.Error;
		public abstract void end_undo_action () throws GLib.Error;
		public abstract weak string get_filename () throws GLib.Error;
		public abstract void grab_focus () throws GLib.Error;
		public abstract void paste () throws GLib.Error;
		public abstract void redo () throws GLib.Error;
		public abstract void undo () throws GLib.Error;
		public signal void update_ui ();
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface DocumentManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.Editor add_buffer (string name, string content) throws GLib.Error;
		public abstract void add_document (IAnjuta.Document document) throws GLib.Error;
		public abstract weak IAnjuta.Document find_document_with_uri (string uri) throws GLib.Error;
		public abstract weak IAnjuta.Document get_current_document () throws GLib.Error;
		public abstract weak GLib.List get_doc_widgets () throws GLib.Error;
		public abstract weak string get_uri (string file) throws GLib.Error;
		public abstract weak IAnjuta.Editor goto_uri_line (string uri, int lineno) throws GLib.Error;
		public abstract weak IAnjuta.Editor goto_uri_line_mark (string uri, int lineno, bool mark) throws GLib.Error;
		public abstract bool remove_document (IAnjuta.Document document, bool save_before) throws GLib.Error;
		public abstract void set_current_document (IAnjuta.Document document) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Editor : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void append (string text, int length) throws GLib.Error;
		public abstract void erase (IAnjuta.Iterable position_start, IAnjuta.Iterable position_end) throws GLib.Error;
		public abstract void erase_all () throws GLib.Error;
		public abstract int get_column () throws GLib.Error;
		public abstract weak string get_current_word () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_end_position () throws GLib.Error;
		public abstract int get_length () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_line_begin_position (int line) throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_line_end_position (int line) throws GLib.Error;
		public abstract int get_line_from_position (IAnjuta.Iterable position) throws GLib.Error;
		public abstract int get_lineno () throws GLib.Error;
		public abstract int get_offset () throws GLib.Error;
		public abstract bool get_overwrite () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_position () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_position_from_offset (int offset) throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_start_position () throws GLib.Error;
		public abstract int get_tabsize () throws GLib.Error;
		public abstract weak string get_text (IAnjuta.Iterable begin, IAnjuta.Iterable end) throws GLib.Error;
		public abstract weak string get_text_all () throws GLib.Error;
		public abstract bool get_use_spaces () throws GLib.Error;
		[NoWrapper]
		public abstract void goto_end () throws GLib.Error;
		[NoWrapper]
		public abstract void goto_line (int lineno) throws GLib.Error;
		[NoWrapper]
		public abstract void goto_position (IAnjuta.Iterable position) throws GLib.Error;
		[NoWrapper]
		public abstract void goto_start () throws GLib.Error;
		public abstract void insert (IAnjuta.Iterable position, string text, int length) throws GLib.Error;
		public abstract void set_auto_indent (bool auto_indent) throws GLib.Error;
		public abstract void set_popup_menu (Gtk.Widget menu) throws GLib.Error;
		public abstract void set_tabsize (int tabsize) throws GLib.Error;
		public abstract void set_use_spaces (bool use_spaces) throws GLib.Error;
		public signal void changed (GLib.Object position, bool added, int length, int lines, string text);
		public signal void char_added (GLib.Object position, char ch);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorAssist : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void cancel_tips () throws GLib.Error;
		public abstract weak GLib.List get_suggestions (string context) throws GLib.Error;
		public abstract void hide_suggestions () throws GLib.Error;
		public abstract void show_tips (GLib.List tips, IAnjuta.Iterable position, int char_alignment) throws GLib.Error;
		public abstract void suggest (GLib.List choices, IAnjuta.Iterable position, int char_alignment) throws GLib.Error;
		public signal void assist_chosen (int selection);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorCell : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract IAnjuta.EditorAttribute get_attribute () throws GLib.Error;
		public abstract char get_char (int char_index) throws GLib.Error;
		public abstract weak string get_character () throws GLib.Error;
		public abstract int get_length () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorCellStyle : IAnjuta.EditorCell, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get_background_color () throws GLib.Error;
		public abstract weak string get_color () throws GLib.Error;
		public abstract weak string get_font_description () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorComment : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void block () throws GLib.Error;
		public abstract void box () throws GLib.Error;
		public abstract void stream () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorConvert : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void to_lower (IAnjuta.Iterable start_position, IAnjuta.Iterable end_position) throws GLib.Error;
		public abstract void to_upper (IAnjuta.Iterable start_position, IAnjuta.Iterable end_position) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorFactory : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.Editor new_editor (string uri, string filename) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorFolds : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void close_all () throws GLib.Error;
		public abstract void open_all () throws GLib.Error;
		public abstract void toggle_current () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorGoto : IAnjuta.Editor, GLib.Object {
		public static void end (IAnjuta.Editor obj) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public static void line (IAnjuta.Editor obj, int lineno) throws GLib.Error;
		public static void position (IAnjuta.Editor obj, IAnjuta.Iterable position) throws GLib.Error;
		public static void start (IAnjuta.Editor obj) throws GLib.Error;
		public abstract void end_block () throws GLib.Error;
		public abstract void matching_brace () throws GLib.Error;
		public abstract void start_block () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorHover : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void display (IAnjuta.Iterable position, string info) throws GLib.Error;
		public signal void hover_leave (GLib.Object position);
		public signal void hover_over (GLib.Object position);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorLanguage : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get_language () throws GLib.Error;
		public abstract weak string get_language_name (string language) throws GLib.Error;
		public abstract weak GLib.List get_supported_languages () throws GLib.Error;
		public abstract void set_language (string language) throws GLib.Error;
		public signal void language_changed (string language);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorLineMode : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void convert (IAnjuta.EditorLineModeType mode) throws GLib.Error;
		public abstract void fix () throws GLib.Error;
		public abstract IAnjuta.EditorLineModeType get () throws GLib.Error;
		public abstract void set (IAnjuta.EditorLineModeType mode) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorSearch : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool backward (string search, bool case_sensitive, IAnjuta.EditorCell start, IAnjuta.EditorCell end, out weak IAnjuta.EditorCell result_start, out weak IAnjuta.EditorCell result_end) throws GLib.Error;
		public abstract bool forward (string search, bool case_sensitive, IAnjuta.EditorCell start, IAnjuta.EditorCell end, out weak IAnjuta.EditorCell result_start, out weak IAnjuta.EditorCell result_end) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorSelection : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_end () throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_start () throws GLib.Error;
		public abstract bool has_selection () throws GLib.Error;
		public abstract void replace (string text, int length) throws GLib.Error;
		public abstract void select_all () throws GLib.Error;
		public abstract void select_block () throws GLib.Error;
		public abstract void select_function () throws GLib.Error;
		public abstract void select_to_brace () throws GLib.Error;
		public abstract void set (IAnjuta.Iterable start, IAnjuta.Iterable end) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorView : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void create () throws GLib.Error;
		public abstract int get_count () throws GLib.Error;
		public abstract void remove_current () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface EditorZoom : IAnjuta.Editor, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void @in () throws GLib.Error;
		public abstract void @out () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface File : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get_uri () throws GLib.Error;
		public abstract void open (string uri) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface FileLoader : IAnjuta.Loader, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak GLib.Object load (string uri, bool readonly) throws GLib.Error;
		public abstract weak string peek_interface (string uri) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface FileManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get_selected () throws GLib.Error;
		public abstract void set_root (string root_uri) throws GLib.Error;
		public abstract void set_selected (string uri) throws GLib.Error;
		public signal void section_changed (string uri);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface FileSavable : IAnjuta.File, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool is_dirty () throws GLib.Error;
		public abstract void save () throws GLib.Error;
		public abstract void save_as (string uri) throws GLib.Error;
		public abstract void set_dirty (bool dirty) throws GLib.Error;
		public signal void save_point (bool entered);
		public signal void saved (string uri);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Help : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void search (string query) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Indicable : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void clear () throws GLib.Error;
		public abstract void set (IAnjuta.Iterable begin_location, IAnjuta.Iterable end_location, IAnjuta.IndicableIndicator indicator) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Iterable : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void assign (IAnjuta.Iterable src_iter) throws GLib.Error;
		public abstract weak IAnjuta.Iterable clone () throws GLib.Error;
		public abstract int compare (IAnjuta.Iterable iter2) throws GLib.Error;
		public abstract int diff (IAnjuta.Iterable iter2) throws GLib.Error;
		public abstract bool first () throws GLib.Error;
		public abstract void @foreach (GLib.Func callback) throws GLib.Error;
		public abstract int get_length () throws GLib.Error;
		public abstract int get_position () throws GLib.Error;
		public abstract bool last () throws GLib.Error;
		public abstract bool next () throws GLib.Error;
		public abstract bool previous () throws GLib.Error;
		public abstract bool set_position (int position) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface IterableTree : IAnjuta.Iterable, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract bool children () throws GLib.Error;
		public abstract void foreach_post (GLib.Func callback) throws GLib.Error;
		public abstract void foreach_pre (GLib.Func callback) throws GLib.Error;
		public abstract bool has_children () throws GLib.Error;
		public abstract bool parent () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Language : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.LanguageId get_from_editor (IAnjuta.EditorLanguage editor) throws GLib.Error;
		public abstract weak IAnjuta.LanguageId get_from_mime_type (string mime_type) throws GLib.Error;
		public abstract weak IAnjuta.LanguageId get_from_string (string str) throws GLib.Error;
		public abstract weak string get_name (IAnjuta.LanguageId id) throws GLib.Error;
		public abstract weak string get_name_from_editor (IAnjuta.EditorLanguage editor) throws GLib.Error;
		public abstract weak GLib.List get_strings (IAnjuta.LanguageId id) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface LanguageSupport : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak GLib.List get_supported_languages () throws GLib.Error;
		public abstract bool supports (string language) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Loader : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak GLib.List find_plugins () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Macro : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void insert (string key) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Markable : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void delete_all_markers (IAnjuta.MarkableMarker marker) throws GLib.Error;
		public abstract bool is_marker_set (int location, IAnjuta.MarkableMarker marker) throws GLib.Error;
		public abstract int location_from_handle (int handle) throws GLib.Error;
		public abstract int mark (int location, IAnjuta.MarkableMarker marker) throws GLib.Error;
		public abstract void unmark (int location, IAnjuta.MarkableMarker marker) throws GLib.Error;
		public signal void marker_clicked (bool double_click, int location);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface MessageManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.MessageView add_view (string name, string icon) throws GLib.Error;
		public abstract weak GLib.List get_all_views () throws GLib.Error;
		public abstract weak IAnjuta.MessageView get_current_view () throws GLib.Error;
		public abstract weak IAnjuta.MessageView get_view_by_name (string name) throws GLib.Error;
		public abstract void remove_view (IAnjuta.MessageView view) throws GLib.Error;
		public abstract void set_current_view (IAnjuta.MessageView view) throws GLib.Error;
		public abstract void set_view_title (IAnjuta.MessageView view, string title) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface MessageView : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void append (IAnjuta.MessageViewType type, string summary, string details) throws GLib.Error;
		public abstract void buffer_append (string text) throws GLib.Error;
		public abstract void clear () throws GLib.Error;
		public abstract weak GLib.List get_all_messages () throws GLib.Error;
		public abstract weak string get_current_message () throws GLib.Error;
		public abstract void select_next () throws GLib.Error;
		public abstract void select_previous () throws GLib.Error;
		public signal void buffer_flushed (string line);
		public signal void message_clicked (string message);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface PluginFactory : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak Anjuta.Plugin new_plugin (Anjuta.PluginHandle handle, Anjuta.Shell shell) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Preferences : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void merge (Anjuta.Preferences prefs) throws GLib.Error;
		public abstract void unmerge (Anjuta.Preferences prefs) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Print : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void print () throws GLib.Error;
		public abstract void print_preview () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface ProjectManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string add_group (string group_name_to_add, string default_location_uri) throws GLib.Error;
		public abstract weak string add_source (string source_uri_to_add, string default_location_uri) throws GLib.Error;
		public abstract weak GLib.List add_sources (GLib.List source_uri_to_add, string default_location_uri) throws GLib.Error;
		public abstract weak string add_target (string target_name_to_add, string default_location_uri) throws GLib.Error;
		public abstract IAnjuta.ProjectManagerCapabilities get_capabilities () throws GLib.Error;
		public abstract weak GLib.List get_children (string element_uri) throws GLib.Error;
		public abstract IAnjuta.ProjectManagerElementType get_element_type (string element_uri) throws GLib.Error;
		public abstract weak GLib.List get_elements (IAnjuta.ProjectManagerElementType element_type) throws GLib.Error;
		public abstract weak GLib.List get_packages () throws GLib.Error;
		public abstract weak string get_parent (string element_uri) throws GLib.Error;
		public abstract weak string get_selected () throws GLib.Error;
		public abstract IAnjuta.ProjectManagerTargetType get_target_type (string target_uri) throws GLib.Error;
		public abstract weak GLib.List get_targets (IAnjuta.ProjectManagerTargetType target_type) throws GLib.Error;
		public abstract bool is_open () throws GLib.Error;
		public signal void element_added (string element_uri);
		public signal void element_removed (string element_uri);
		public signal void element_selected (string element_uri);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Stream : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void open (GLib.FileStream stream) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface StreamLoader : IAnjuta.Loader, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak GLib.Object load (GLib.FileStream stream, bool readonly) throws GLib.Error;
		public abstract weak string peek_interface (GLib.FileStream stream) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface StreamSavable : IAnjuta.Stream, GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void save (GLib.FileStream stream) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Symbol : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak string get_args () throws GLib.Error;
		public abstract weak string get_extra_info_string (IAnjuta.SymbolField sym_info) throws GLib.Error;
		public abstract weak Gdk.Pixbuf get_icon () throws GLib.Error;
		public abstract ulong get_line () throws GLib.Error;
		public abstract weak string get_name () throws GLib.Error;
		public abstract IAnjuta.SymbolType get_sym_type () throws GLib.Error;
		public abstract weak string get_uri () throws GLib.Error;
		public abstract bool is_local () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface SymbolManager : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract weak IAnjuta.Iterable get_class_parents (IAnjuta.Symbol symbol, IAnjuta.SymbolField info_fields) throws GLib.Error;
		public abstract weak IAnjuta.Iterable get_members (IAnjuta.Symbol symbol, IAnjuta.SymbolField info_fields, bool global_search) throws GLib.Error;
		public abstract weak IAnjuta.Iterable search (IAnjuta.SymbolType match_types, bool include_types, IAnjuta.SymbolField info_fields, string match_name, bool partial_name_match, bool global_symbols_search, bool global_tags_search, int results_limit, int results_offset) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Terminal : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract int execute_command (string directory, string command, string environment) throws GLib.Error;
		public signal void child_exited (int pid, int status);
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Todo : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void load (string uri) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Vcs : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void add (string filename) throws GLib.Error;
		public abstract void commit (string filename, string log, bool recurse) throws GLib.Error;
		public abstract void remove (string filename) throws GLib.Error;
		public abstract void update (string filename, bool recurse) throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public interface Wizard : GLib.Object {
		public static GLib.Quark error_quark ();
		public abstract void activate () throws GLib.Error;
	}
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public delegate void BuilderCallback (GLib.Object sender, GLib.Error err);
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public static delegate void DebuggerCallback (void* data, void* user_data, GLib.Error err);
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public static delegate void DebuggerGCharCallback (string value, void* user_data, GLib.Error err);
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public static delegate void DebuggerGListCallback (GLib.List list, void* user_data, GLib.Error err);
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public static delegate void DebuggerMemoryCallback (ulong address, uint length, string data, void* user_data, GLib.Error err);
	[CCode (cheader_filename = "libanjuta/interfaces/libanjuta-interfaces.h")]
	public delegate void DebuggerOutputCallback (IAnjuta.DebuggerOutputType type, string output);
	public const string PROJECT_MANAGER_CURRENT_URI;
	public const string PROJECT_MANAGER_PROJECT_ROOT_URI;
}
