<!-- ============= Debugging ====================== -->
 <chapter id="debugging">
  <title>Debugging: session</title>
  <para>
   <citetitle>To debug is human. To fix it is divine</citetitle>
  </para>
  <para>
   Well, the <citetitle>human</citetitle> part is what I am going to deal here. The 
   <citetitle>Divine</citetitle> part is yours.
   When a program does not behave according to what it is suppose to, we say the program
   contains bug or bugs. By bugs we don't mean the compilation errors. The compilation errors
   are simply errors and they are relatively easier to clear (because compiler tells you where
   they are). On the other hand, <citetitle>Bugs</citetitle> refer to those errors that happen
   during the execution of the program and they are hard, sometimes very hard, to detect.
  </para>
  <para>
   Any program that you think is bug-free is never always bug-free. What we try to do is reduce the
   number of bugs contained in the program. The process of removing bugs is, therefore, called
   <citetitle>Debugging</citetitle>. And the tool that is used for debugging is called <citetitle>
   Debugger</citetitle>. Anjuta provides a very user friendly and powerful debugging environment
   (actually, a GUI wrapping over Gdb, a powerful command line debugging tool).
  </para>
  <para>
   A debugger tracks and traces the execution of the program and provides you the
   various information needed to study the execution of the program.
  </para>
  
  <sect1 id="debugger_targets">
   <title>Debugger Targets:</title>
   <para>
    Before we actually start debugging, let me briefly summarize what the debugging targets
    are. Debugging targets refer to those entities that the debugger interacts during its
    operation. There are four types debugging targets. Namely:
   </para>
   <para>
    <orderedlist>
     <listitem><para> Executable</para></listitem>
     <listitem><para> Symbol table</para></listitem>
     <listitem><para> Core file</para></listitem>
     <listitem><para> Process</para></listitem>
    </orderedlist>
   </para>
   <para>
    There can be, at most, only one target active for each of the four types of targets at
    any give time instance.
    All the targets may not be necessarily active for the debugger to work. But there
    are certain combinations of the above targets which are required to be active
    for a meaningful debugging session. Such as the combination of
    [ <citetitle>executable, symbol table, and Process</citetitle> ]
    or [ <citetitle>executable, symbol-table and core-file</citetitle> ].
   </para>
   <para>
    The target <citetitle>Executable</citetitle> become active when you load an
    executable file into the debugger.
   </para>
   <para>
    The target <citetitle>Symbol table</citetitle> is automatically loaded
    from the executable file, therefore you don't
    need to worry about it. The symbol table is necessary for the debugger to identify the
    various symbols in the source code of the program. The information is included into
    the executable during the compilation (You need to compile
    the program with the debug option enabled. See <citetitle>Setting Compiler
    options</citetitle> for details).
   </para>
   <para>
    The target <citetitle>Core file</citetitle> becomes active
    when you load the core file into the debugger.
    Core file is the memory image of the program which was core-dumped by the
    kernel, usually because it had performed an illegal operation. The core file
    can give various information such as variable contents, register values, stack trace etc
    of the program at the time of core-dump. By studying the core file you can easily know
    which part of the program has misbehaved resulting in core-dump.
   </para>
   <para>
    The target <citetitle>Process</citetitle> becomes active when you execute the program
    under the debugger or when you attach to an already running process.
   </para>
  </sect1>
  
  <sect1 id="debug-start">
   <title>Starting and Stopping Debugger</title>
   <para>
    To start the debugger, activate <citetitle>Debug-&gt;Start Debugger</citetitle>. This will start the
    debugger with the executable of the currently opened project. If there is no project
    opened, then it will load the executable of the currently active file. Otherwise, if
    there is neither a project opened or a file opened, then it won't load any executable,
    though the debugger will be started. You will have to load the executable yourself
    (see the next part: Loading executable).
   </para>
   <para>
    Once the debugger is started, you will enter into debugging session. When you are
    done with the debugging session, you can exit the debugger by activating
    <citetitle>Debug-&gt;Stop Debugger</citetitle>.
   </para>
  </sect1>
  
  <sect1 id="debug-loading">
   <title>Loading executables</title>
   <para>
    As mentioned above, debugger will automatically load the executable, if you
    have a project or a file opened. Later, if you want to load a different executable,
    activate the menu item <citetitle>Debug-&gt;Load Executable</citetitle>. A file selection dialog box
    will appear. Select the executable you want to debug and click OK.
   </para>
  </sect1>
  
  <sect1 id="debug-attach">
  <title>Attaching to process</title>
   <para>
    You can attach to an already running process for debugging. Activate
    <citetitle>Debug-&gt;Attach to Process</citetitle>. You will be given a list of all the
    process running on your computer. Select the process you want to attach to
    and click OK. In this case also make sure you have first loaded the executable
    (and hence the symbol table) into the debugger.
   </para>
   <para>
    If you get lots of question marks (??) during the debugging session, then the
    process you are attaching to and the executable aren't matching.
   </para>
  </sect1>
  
  <sect1 id="debug-core">
   <title>Loading core file</title>
   <para>
    Activate <citetitle>Debug-&gt;Load Core file</citetitle> to load the core file. Select the core file
    in the file selection dialog box and click OK. When you load the core file, make sure
    you have already loaded its executable file (and hence the symbol table). Otherwise,
    you won't feel happy while debugging.
   </para>
   <para>
    If you get lots of question marks (??) during the debugging session, then the
    core file you have just loaded and the executable aren't matching.
   </para>
  </sect1>
 </chapter>
