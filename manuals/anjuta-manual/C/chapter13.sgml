<!-- Debugger: Others-->
 <chapter id="debugger-others">
  <title>Debugging: Others</title>
  <para>
   There are a number of other debugger features which are used
   less frequently, but are nevertheless handy.
  </para>
  <sect1 id="dbg-kernel">
   <title>Kernel Signals</title>
   <para>
    Kernel signals are a way of signaling between processes in Linux. The list 
	of signals available for a program can be displayed by choosing the menu item
    <menuchoice><guisubmenu>View</guisubmenu><guimenuitem>Kernel Signals</guimenuitem></menuchoice>.
    A window will open which lists all of the signals available in the system along with
    a brief description of each signal.
   </para>
   <para>
    <figure>
      <title>Kernel Signals window</title>
      <screenshot>
	   <screeninfo>Kernel Signals window</screeninfo>
       <graphic fileref="figures/signals" format="png" srccredit="andyp"/>
      </screenshot>
    </figure>
   </para>
   <para>
    There are three columns which specify what to do when the signal is received:
   </para>
   
   <orderedlist>
    <listitem>
     <para><emphasis>Stop</emphasis> &mdash; this tells the debugger whether to 
	 stop the program execution (and return control) when the program receives 
	 this signal.
     </para>
    </listitem>
    <listitem>
     <para><emphasis>Print</emphasis> &mdash; this tells the debugger whether to 
	 display the received signal.
     </para>
    </listitem>
    <listitem>
     <para><emphasis>Pass</emphasis> &mdash; this tells the debugger whether to pass 
	 the signal to the program.
     </para>
    </listitem>
   </orderedlist>
   
   <sect2 id="dbg-kernel-beh">
    <title>Changing behaviour on signals</title>
    <para>
     To change the way debugger behaves when a particular signal is
     received, select the signal in the list. Right-click to open the 
	 <interface>Operation menu</interface>. Choose <guimenuitem>Modify Signal</guimenuitem>. 
	 This will open a dialog. Set the three behaviours and click <guibutton>OK</guibutton> 
	 to commit the change.
    </para>
    <para>
     <figure>
       <title>Modify Kernel Signal dialog</title>
       <screenshot>
	   <screeninfo>Modify Kernel Signal dialog</screeninfo>
        <graphic fileref="figures/signal_mod" format="png" srccredit="andyp"/>
       </screenshot>
     </figure>
    </para>
   </sect2>
   <sect2 id="dbg-kernel-send">
    <title>Sending the signal to the program</title>
    <para>
     To explicitly sent the signal to the program being debugged, select the signal 
	 in the given list. Right-click to open the <interface>Operation menu</interface>. 
	 Choose the menu item <guimenuitem>Send to process</guimenuitem>. A confirmation 
	 dialog will appear. Click <guibutton>OK</guibutton> to confirm and send the 
	 signal to the program.
    </para>
   </sect2>
   <sect2 id="dbg-kernel-update">
    <title>Updating the signal list</title>
    <para>
     Choose the menu item <guimenuitem>Update</guimenuitem>
     from the <interface>Operation menu</interface> (right-click in the <interface>Kernal Signals 
	 window</interface> to open) to refresh the <interface>Kernel Signals window</interface>.
    </para>
   </sect2>
  </sect1>
 
  <sect1 id="dbg-registers">
   <title>CPU registers</title>
   <para>
    It is possible to examine the contents of the internal registers of the 
	CPU (microprocessor). Choose the menu item <menuchoice><guisubmenu>View</guisubmenu>
	<guimenuitem>Registers</guimenuitem></menuchoice>. A window listing all 
	of the available registers in the microprocessor and their corrosponding contents 
	will appear.
   </para>
   <para>
    <figure>
      <title>CPU Registers window</title>
      <screenshot>
	   <screeninfo>CPU Registers window</screeninfo>
       <graphic fileref="figures/registers" format="png" srccredit="andyp"/>
      </screenshot>
    </figure>
   </para>
  </sect1>
 
  <sect1 id="dbg-dyna-libs">
   <title>Dynamically loaded Libraries</title>
   <para>
    To obtain a list of the dynamic libraries used by the program, choose the 
	menu item <menuchoice><guisubmenu>View</guisubmenu>
	<guimenuitem>Shared Libraries</guimenuitem></menuchoice>. This will bring 
	open a window which will list all the shared libraries the program has loaded 
	and their locations in the memory. It also shows whether the symbol table is 
	loaded or not (Yes/No).
   </para>
   <para>
    <figure>
      <title>Shared Libraries window</title>
      <screenshot>
	   <screeninfo>Shared Libraries window</screeninfo>
       <graphic fileref="figures/sharedlibs" format="png" srccredit="andyp"/>
      </screenshot>
    </figure>
   </para>
  </sect1>
 
  <sect1 id="dbg-interrupt">
   <title>Interrupting the program</title>
   <para>
    While the program is running and has control, no debugging tasks can be 
	performed. To obtain control while the program is running, choose the menu item
	<menuchoice><guisubmenu>Debug</guisubmenu>
	<guimenuitem>Interrupt Program</guimenuitem></menuchoice>.
    This will interrupt the program and return control to the debugger.
   </para>
   <para>
    For interruption to work properly, set the debugger behaviour for the interrupt 
	signal (SIGINT) to the value [ Stop:Yes, Print:Yes, Pass:No ]. This is the default value.
   </para>
  </sect1>
 </chapter>
