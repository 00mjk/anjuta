 <chapter id="debugging">
  <title>デバッグ</title>

<sect1 id="debugger-session">
<title>デバッグとは</title>
  <para>
   <emphasis>デバッグするのは人間です。問題を解決するのは神です...</emphasis>
  </para>
  <para>
   えーと、<emphasis>人間</emphasis> という部分はこのセクションで紹介することです。そして <emphasis>神</emphasis> になれるかどうかは貴方次第です！
  </para>
  <para>
   プログラムが思い通りに動かない時を想定してみると、そのプログラムにはバグまたは複数のバグが潜んでいると考えられます。これはコンパイル・エラーが原因ではありません - コンパイル・エラーは単純なエラーで先のバグと比較すると簡単に解決できます。その理由は、どこが問題であるかコンパイラが教えてくれるからです。言い換えると、<emphasis>バグ</emphasis> はプログラムを実行した時に発生するエラーで、解決するのは難しい (時には非常に難しい！) です。
  </para>
  <para>
   バグがないと考えているプログラムは、必ずしも完璧にバグが無いわけではありません。我々が試行できることの全てがプログラムに潜むバグの数を減らします。バグを取り除く作業は <emphasis>デバッグ</emphasis> と呼ばれ、デバッグに使用するツールのことを <emphasis>デバッガ</emphasis> と言います。<application>Anjuta</application> はとてもユーザフレンドリでパワフルなデバッグ環境 (実際は、コマンドラインで使用するパワフルな GNU デバッガ <application>gdb</application> の GUI ラッパー版です) を提供します。
  </para>
  <para>
   デバッガはプログラムの実行経過をたどって問題がありそうな部分を探しあてて、プログラムの実行を観察するために必要な情報をたくさん提供します。
  </para>
  
  <sect2 id="debugger-targets">
   <title>デバッグの対象</title>
   <para>
    デバッグを始める前に、<emphasis>デバッグの対象</emphasis> が何であるかを理解することが重要です。デバッグの対象はバグの実体に関係しており、プログラムを操作している最中に互いに影響を与えるものです。デバッグの対象には四つの種類があります:
   </para>
   <para>
    <orderedlist>
     <listitem><para>実行型式ファイル</para></listitem>
     <listitem><para>シンボル・テーブル</para></listitem>
     <listitem><para>コア・ファイル</para></listitem>
     <listitem><para>プロセス</para></listitem>
    </orderedlist>
   </para>
   <para>
    好きな時にこれらの対象のうち一つだけを有効にすることができます。デバッガを使う際に、これらの対象の全てを有効にする必要はありませんが、デバッグ作業を効率化するために、いくつか相互の連携が必要になってきます。例えば、[ <emphasis>実行型式ファイル、シンボル・テーブル、プロセス</emphasis> ] という連携や [ <emphasis>実行型式ファイル、シンボル・テーブル、コア・ファイル</emphasis> ] といった連携などです。
   </para>
   <para>
    デバッグの対象のひとつである <emphasis>実行型式ファイル</emphasis> は、デバッガを起動して実行型式ファイルを読み込むときに有効になります。
   </para>
   <para>
    <emphasis>シンボル・テーブル</emphasis> は自動的に実行型式ファイルから読み込まれるので、各々操作する必要はありません。シンボル・テーブルは、プログラムのソース・コードに記述されたいろいろなシンボル (変数名や定数名など) をデバッガが識別するのに必要です。その情報はプログラムをコンパイルする際に追加されます (プログラムがデバッグ・オプション付きでコンパイルされた場合にのみ - 詳細は <xref linkend="setting-compiler-options"/> を参照下さい)。
   </para>
   <para>
    <emphasis>コア・ファイル</emphasis> は、デバッガがコア・ファイルを読み込んだときに有効になります。コア・ファイルとはプログラムのメモリイメージで、通常は何か不正な処理が実行されたときにカーネルによってダンプされます。コア・ファイルは変数の内容、レジスタの値そしてエラーが発生した時点でのスタックのトレース情報を提供します。コア・ファイルを調査することで、プログラムのどの部分でおかしな処理を行ってコアがダンプしたかを見つけることが可能になります。
   </para>
   <para>
    <emphasis>プロセス</emphasis> はデバッガ配下でプログラムが実行された時、または既に起動中のプロセスを追加した時に有効になります。
   </para>
  </sect2>
  
  <sect2 id="debug-start">
   <title>デバッガの起動と停止</title>
   <para>
    デバッガを起動する場合は、メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>デバッガの起動</guimenuitem></menuchoice> を選択して下さい。すると現在開発中のプロジェクトの実行型式ファイルを使ってデバッガが起動します。もしプロジェクトが開かれていない場合、現在編集しているファイルの実行型式ファイルを読み込みます。またプロジェクトが開かれておらず、さらに現在編集しているファイルもない場合、デバッガは起動しますが、実行型式ファイルは読み込みません。その場合は実行型式ファイルを手動で読み込んで下さい。
   </para>
   <para>
    デバッガを起動したら、デバッグ・モードに移行します。デバッグが完了したら、メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>デバッガの解放</guimenuitem></menuchoice> を選択してデバッグ・モードを終了して下さい。
   </para>
  </sect2>
  
  <sect2 id="debug-loading">
   <title>実行型式ファイルの読み込み</title>
   <para>
    既にプロジェクトまたはファイルが開かれている場合、デバッガは自動的にその実行型式ファイルを読み込みます。別の実行型式ファイルを読み込む場合は、メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>実行型式の読み込み(_X)&hellip;</guimenuitem></menuchoice> を選択して下さい。ファイル選択ダイアログが表示されます。デバッグする実行型式ファイルを選択して <guibutton>OK</guibutton> ボタンをクリックして下さい。
   </para>
  </sect2>
  
  <sect2 id="debug-attach">
  <title>プロセスに追加する</title>
   <para>
    起動中のプロセスをデバッガに追加することが可能です。メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>プロセスに取り込む(_A)&hellip;</guimenuitem></menuchoice> を選択して下さい。すると、システムで起動中の全プロセスの一覧が表示されます。
   </para>
   <figure id="attach">
    <title>プロセス追加ダイアログ</title>
    <screenshot>
	<screeninfo>プロセス追加ダイアログ</screeninfo>
     <graphic fileref="figures/attach.png" format="PNG" srccredit="andyp"></graphic>
    </screenshot>
   </figure>
   <para>	
	追加するプロセスを選択して <guibutton>OK</guibutton> をクリックして下さい。そして先に実行型式ファイル (とシンボル・テーブル) がデバッガの中に読み込まれていることを確認して下さい。
   </para>
   <para>
    複数のクェスチョンマーク (??) がデバッグ作業中に表示されると、追加したプロセスと実行型式ファイルが一致していない状態です。
   </para>
  </sect2>
  
  <sect2 id="debug-core">
   <title>コア・ファイルの読み込み</title>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>core ファイルの読み込み(_C)&hellip;</guimenuitem></menuchoice> を選択してコア・ファイルを読み込みます。ファイル選択ダイアログの中からコア・ファイルを選択して、<guibutton>OK</guibutton> をクリックして下さい。コア・ファイルを読み込む時に、先に実行型式ファイル (とシンボル・テーブル) が読み込まれていることを確認して下さい - そうでないと、デバッグがおかしくなるかもしれません！
   </para>
   <para>
    複数のクェスチョンマーク (??) がデバッグ作業中に表示されると、追加したプロセスと実行型式ファイルが一致していない状態です。
   </para>
  </sect2>
 </sect1>
 
 <!-- Debugger: Execution -->
 
 <sect1 id="debugger-exec">
  <title>実行</title>
  <para>
   デバッガの中でプログラムを実行すると、細部までコントロールすることができます。
プログラムをステップ単位、あるいはブレークポイントを設定した場所まで連続して実行することができます。
このような実行は、プログラムの動作を追跡するために必要不可欠です。
ビデオの編集作業のように前に進んで、一時停止して、停止するといった感じで、プログラムを <emphasis>スローモーション</emphasis> で実行することができます。
  </para>
  <para>
   デバッガの中でプログラムを実行する方法は先のセクションで紹介します。
  </para>
  
  <sect2 id="dbg-step-in">
   <title>ステップ単位で実行する (ステップ・イン)</title>
   <para>
    ステップ単位で実行するというのは、(停止した場所から) プログラムの一行分の命令を実行して制御を戻すことです。一つ以上の関数を含む命令が実行されると、デバッガは (その関数の内部に入って) 一行分の命令を実行します。命令が実行され制御が戻ると、いろいろなプログラムのパラメータを調査することが可能です。
   </para>
   <para>
    ステップ単位で実行を開始しようとした時にプログラムが起動されていない場合は、プログラムが自動的に起動されてプログラムの一番最初の命令 (<emphasis>main()</emphasis> 関数にある一番最初の命令) で停止した状態になります。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>実行(_E)</guisubmenu><guimenuitem>ステップイン(_I)</guimenuitem></menuchoice> を選択するか <interface>デバッグ・ツールバー</interface> にある <guibutton>ステップ・イン </guibutton> アイコンをクリックすると、プログラムをステップ単位で実行させます。
   </para>
  </sect2>

  <sect2 id="dbg-step-over">
   <title>ステップ単位で実行する (ステップ・オーバー)</title>
   <para>
    <emphasis>ステップ・オーバー</emphasis> は実行される命令として関数の内部に入らないことを除くと、<emphasis>ステップ・イン</emphasis> とほぼ同じです。命令は一行単位で実行されます。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>実行(_E)</guisubmenu><guimenuitem>ステップオーバー(_V)</guimenuitem></menuchoice> を選択するか <interface>デバッグ・ツールバー</interface> にある <guibutton>ステップ・オーバー</guibutton> アイコンをクリックすると、プログラムをステップ・オーバー単位で実行させます。
   </para>
  </sect2>
  
  <sect2 id="dbg-step-out">
   <title>ステップ単位で実行する (ステップ・アウト)</title>
   <para>
    <emphasis>ステップ・アウト</emphasis> は現在デバッグ中の関数が終了するまで実行します。プログラムは関数から外にでると停止します。実際ステップ・アウトはステップ単位の実行ではないですが、その理由は一行単位で命令を実行しないからです - つまり、制御がその関数の呼び出し元に戻るまで関数全体を実行することを意味します。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>実行(_E)</guisubmenu><guimenuitem>ステップアウト(_O)</guimenuitem></menuchoice> を選択するか <interface>デバッグ・ツールバー</interface> にある <guibutton>ステップ・アウト</guibutton> アイコンをクリックすると、プログラムをステップ・アウト単位で実行させます。
   </para>
  </sect2>
  
  <sect2 id="dbg-run">
   <title>実行/続行</title>
   <para>
    このオプションはブレークポイントが設定されている場所まで、あるいはプログラムが終了する場所までそのプログラムの実行を続行します。
   </para>
   <para>
    プログラムが未だ起動されていない場合は、プログラムが自動的に起動してブレークポイントが設定されている場所か、プログラムが終了する場所に到達するまで実行します。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>実行(_E)</guisubmenu><guimenuitem>実行/続行(_C)</guimenuitem></menuchoice> を選択するか <interface>デバッグ・ツールバー</interface> にある <guibutton>実行/続行</guibutton> アイコンをクリックすると、プログラムの実行を続けます。
    </para>
  </sect2>
  
  <sect2 id="dbg-stop">
   <title>プログラムの停止</title>
   <para>
    このオプションはデバッグ対象のプログラムを強制終了します。追加したプロセスを停止することはできないので注意して下さい。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>プログラムの停止(_T)</guisubmenu></menuchoice> を選択するか <interface>デバッグ・ツールバー</interface> にある <guibutton>プログラムの停止</guibutton> アイコンをクリックすると、プログラムの実行が終了します。
    </para>
  </sect2>
  
  <sect2 id="dbg-restart">
   <title>プログラムの再起動</title>
   <para>
    このオプションは、プログラムを停止して再度起動します。有効な全てのブレークポイントは残ったままです。追加したプロセスは再起動することができないので注意して下さい。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>プログラムの再起動(_R)</guisubmenu></menuchoice> を選択すると、プログラムを再起動します。
   </para>
  </sect2>
 
 </sect1>
 
 
 <sect1 id="debugging-breaks">
  <title>ブレークポイント</title>
  <para>
   プログラムをデバッグする時、特定の場所でプログラムの実行と停止することができたら便利です。そうすると、その場所でプログラムを調査することができるからです。ブレークポイントはこれを可能にしてくれます。ブレークポイントはソースファイルの別々の場所にセットすることが可能で、そのあとにプログラムを実行することができます。ブレークポイントの場所にくると、式を評価したり変数を調査したり、スタックをたどったりするたにプログラムの実行は一時停止します。
  </para>
  <para>
   <figure>
     <title>ブレークポイント・ダイアログ</title>
     <screenshot>
      <screeninfo>ブレークポイント・ダイアログ</screeninfo>
      <graphic fileref="figures/brk_dlg.png" format="PNG" srccredit="andyp"></graphic>
     </screenshot>
   </figure>
  </para>
  <para>
   <emphasis>場所</emphasis>、これはソースファイルの中のコードの場所を指しています。<emphasis>場所</emphasis> は次のような書式で指定します。
  </para>
  <para>
   <orderedlist>
    <listitem><para>File_name:Line_number</para></listitem>
    <listitem><para>Function_name</para></listitem>
    <listitem><para>File_name:Function_name</para></listitem>
   </orderedlist>
  </para>
  <para>
   最初の書式は簡単です - 場所はソースファイル <emphasis>File_name</emphasis> の中にある行番号 <emphasis>Line_number</emphasis> を表します。二番目は関数 <emphasis>Function_name</emphasis> の先頭を表します。三番目は、プログラムの中で同じ名前の関数 <emphasis>Function_name</emphasis> が一つ以上ある場所で使われる表記であることを除けば、二番目とほぼ同じです。<emphasis>File_name</emphasis> が提供する別の関数として認識するので、ファイル <emphasis>File_name</emphasis> の中にある関数 <emphasis>Function_name</emphasis> を表します。
  </para>
  <para>
   二つのパラメータが各ブレークポイントで使われます:
   <orderedlist>
    <listitem><para>ブレーク条件</para></listitem>
    <listitem><para>パスする回数</para></listitem>
   </orderedlist>
  </para>
  <para>
   <emphasis>ブレーク条件</emphasis> は論理値を評価する正しい C 言語スタイルの式です - つまり、この式を評価すると真(1) か 偽(0) のどちらかを返します。もし最後の評価値が論理値ではない場合、適切な論理値にキャストされます。
  </para>
  <para>
   実行中にブレークポイントに遭遇する度に、ブレーク条件が評価されます。デバッガはその評価結果が真 (1) の場合にのみ実行を停止し、対して偽 (0) の時はブレークポイントがなかったかのように実行を続けます。
  </para>
  <para>
   <emphasis>ブレーク条件</emphasis> のデフォルト値はつねに真 (1) です。そのため、デバッガはブレークポイントが設定されている場所で実行をデフォルトで停止します。
  </para>
  <para>
   <emphasis>パスする回数</emphasis> は (符号なし) 整数値で、ブレークポイントを無視する回数をデバッガに指示します。<emphasis>パスする回数</emphasis> の優先度は <emphasis>ブレーク条件</emphasis> よりも高いです。<emphasis>パスする回数</emphasis> がゼロに到達した場合にのみ (いくつかの条件があるとすると)、デバッガは <emphasis>ブレーク条件</emphasis> を評価します。条件が無い場合、デバッガは <emphasis>パスする回数</emphasis> がゼロになった時点で実行を停止します。
  </para>
  <para>
   <emphasis>パスする回数</emphasis> のデフォルト値は０です。ブレークポイントに遭遇した時にカウントされます。
  </para>
  
  <sect2 id="breaks-set">
   <title>ブレークポイントの追加または設定</title>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>ブレークポイント(_B)</guimenuitem></menuchoice> または <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>ブレークポイント(_B)</guisubmenu><guimenuitem>ブレークポイント(_B)&hellip;</guimenuitem></menuchoice> を選択すると <interface>ブレークポイント編集ウィンドウ</interface> を開くことができます。<guibutton>追加</guibutton> ボタンをクリックして下さい。ダイアログが表示されます。
   </para>
   <para>
    <figure>
      <title>ブレークポイント追加ダイアログ</title>
      <screenshot>
	   <screeninfo>ブレークポイント追加ダイアログ</screeninfo>
       <graphic fileref="figures/brk_add.png" format="PNG" srccredit="mkv"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    ブレークポイントをセットする場所を入力して下さい。オプションとして、<emphasis>ブレーク条件</emphasis> と <emphasis>パスする回数</emphasis> を該当するエントリ・ボックスに入力して下さい。<guibutton>OK</guibutton> をクリックするとブレークポイントがセットされます。
	breakpoint.
   </para>
   <para>
    エディタの中でブレークポイントがある行の関数名が強調表示されるので、メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>ブレークポイント(_B)</guisubmenu><guimenuitem>ブレークポイント ON</guimenuitem></menuchoice> (あるいは、<interface>Debug Toolbar</interface> の中にある <guibutton>カーソル行のブレークポイント表示の切り替え</guibutton> ボタンをクリックして下さい) を選択して下さい。
   </para>
  </sect2>
  
  <sect2 id="breaks-edit">
   <title>ブレークポイントの編集</title>
   <para>
	メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>ブレークポイント(_B)</guimenuitem></menuchoice> または <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>ブレークポイント(_B)</guisubmenu><guimenuitem>ブレークポイント(_B)&hellip;</guimenuitem></menuchoice> を選択して <interface>ブレークポイント編集ウィンドウ</interface> を開いて下さい。編集するブレークポイントを選択して <guibutton>編集</guibutton> ボタンをクリックします。するとダイアログが表示されます。
   </para>
   <para>
    <figure>
      <title>ブレークポイント編集ダイアログ</title>
      <screenshot>
	   <screeninfo>ブレークポイント編集ダイアログ</screeninfo>
       <graphic fileref="figures/brk_edit.png" format="PNG" srccredit="mkv"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    エントリを編集して <guibutton>OK</guibutton> ボタンをクリックし変更を適用して下さい。
   </para>
  </sect2>

  <sect2 id="breaks-del">
   <title>ブレークポイントの削除</title>
   <para>
	メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>ブレークポイント(_B)</guimenuitem></menuchoice> または <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>ブレークポイント(_B)</guisubmenu><guimenuitem>ブレークポイント(_B)&hellip;</guimenuitem></menuchoice> を選択して <interface>ブレークポイント編集ウィンドウ</interface> を開いて下さい。編集するブレークポイントを選択して <guibutton>削除</guibutton> ボタンをクリックします。するとそのブレークポイントが削除されます。
   </para>
   <para>
    全てのブレークポイントを削除する場合は <guibutton>全て削除</guibutton> ボタンをクリックして下さい。
   </para>
  </sect2>

  <sect2 id="breaks-enbdis">
   <title>ブレークポイントの有効/無効の切り替え</title>
   <para>
	メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>ブレークポイント(_B)</guimenuitem></menuchoice> または <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>ブレークポイント(_B)</guisubmenu><guimenuitem>ブレークポイント(_B)&hellip;</guimenuitem></menuchoice> を選択して <interface>ブレークポイント編集ウィンドウ</interface> を開いて下さい。有効または無効にするブレークポイントを選択して <guibutton>有効にする</guibutton> ボタンをクリックします。するとそのブレークポイントが現在の状態に応じて、有効または無効になります。
   </para>
   <para>
    ブレークポイントの全てを有効または全てを無効にする場合は <guibutton>全て有効</guibutton> または <guibutton>全て無効</guibutton> ボタンをクリックして下さい。
   </para>
   <para>
    <note>
     <title>注記</title>
     <para>
      デバッグを起動すると、全てのブレークポイントがセットされます。(ブレークポイントよりも新しいソースファイルにある) 古いブレークポイントは無効になります。
     </para>
    </note>
   </para>
  </sect2>
 </sect1>

 <sect1 id="debugging-exprs">
  <title>式を使ったデバッグ</title>
  <para>
   FIXME:
  </para>
  
  <sect2 id="expr-eval">
   <title>式の評価</title>
   <para>
    プログラムから制御が戻った時 - 場合によってはブレークポイントの場所で - 式を評価したりプログラムの中の変数の値を検証したりすることが可能です。メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guimenuitem>検証/評価(_P) &hellip;</guimenuitem></menuchoice> を選択するか、<interface>Debug Toolbar</interface> の中にある <guibutton>検証</guibutton> ボタンをクリックして下さい。式の検証ダイアログがポップアップして表示されます。正しい C 言語スタイルの式、あるいは変数名を入力して <guibutton>OK</guibutton> ボタンをクリックして下さい。
   </para>
   <para>
    <figure>
      <title>検証/評価ダイアログ</title>
      <screenshot>
	   <screeninfo>検証/評価ダイアログ</screeninfo>
       <graphic fileref="figures/evaluate.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    評価の結果を表示したウィンドウが表示されます。
   </para>
   <para>
    <figure>
      <title>評価の結果</title>
      <screenshot>
	   <screeninfo>評価の結果</screeninfo>
       <graphic fileref="figures/inspect.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    あるいは、エディタの中で式を強調表示し上述の作業を行うことが可能です。<interface>検証ダイアログ</interface> の中で式を入力するのを支援します。
   </para>
   <para>
    式は C 言語スタイルで正しく入力し、プログラムからの関数呼び出し、ライブラリ呼び出し、システムコール、などなどを含めることも可能です。
   </para>
  </sect2>
  
  <sect2 id="expr-watch">
   <title>式の監視</title>
   <para>
    式の調査または評価は一度だけ結果を返します。変数や式の連続的な監視には、<emphasis>式の監視</emphasis> を使用して下さい。
   </para>
   <para>
   監視する全ての式と変数を追加して下さい。これらの値は自動的に更新し <interface>式の監視ウィンドウ</interface> に表示されます。
   </para>
   <para>
    <figure>
      <title>式の監視ウィンドウ</title>
      <screenshot>
	   <screeninfo>評価の監視</screeninfo>
       <graphic fileref="figures/watch.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
   <sect3 id="watch-add">
    <title>監視する式を追加する</title>
    <para>
     メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>監視ウィンドウ(_W)</guimenuitem></menuchoice> を選択して下さい。<interface>式の監視ウィンドウ</interface> の上を右クリックすると <interface>オペレーション・メニュー</interface> が開きます。メニュー・アイテム <guimenuitem>追加</guimenuitem> をクリックして下さい。式の入力待ちダイアログが表示されます。式を入力して <guibutton>OK</guibutton> ボタンをクリックして下さい。
    </para>
    <para>
     <figure>
       <title>式の追加ダイアログ</title>
       <screenshot>
	   <screeninfo>式の追加ダイアログ</screeninfo>
        <graphic fileref="figures/watch_add.png" format="PNG" srccredit="andyp"></graphic>
       </screenshot>
     </figure>
    </para>
    <para>
     エディタ内で選択した式が先に追加したものよりも優先度が高い場合は、自動的にダイアログの中に表示されます。
    </para>
   </sect3>
   <sect3 id="watch-remove">
    <title>監視する式を削除する</title>
    <para>
     メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>監視ウィンドウ(_W)</guimenuitem></menuchoice> を選択して下さい。<interface>式の監視ウィンドウ</interface> の上を右クリックすると <interface>オペレーション・メニュー</interface> が開きます。メニュー・アイテム <guimenuitem>削除</guimenuitem> をクリックするとエントリが削除されます。
	</para>
   </sect3>
   <sect3 id="watch-clear">
    <title>監視のクリア</title>
    <para>
     メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>監視ウィンドウ(_W)</guimenuitem></menuchoice> を選択して下さい。<interface>式の監視ウィンドウ</interface> の上を右クリックすると <interface>オペレーション・メニュー</interface> が開きます。メニュー・アイテム <guimenuitem>クリア</guimenuitem> をクリックすると更新またはクリアされます。
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 id="debugging-stack">
  <title>スタック・トレース</title>
  <sect2 id="stack-win">
   <title>スタック・ウィンドウ</title>
   <para>
    <interface>スタック・トレース・ウィンドウ</interface> はプログラムのスタックの内容を表示します。全ての関数の一覧とそれらの関数が呼び出された際に引き渡された全ての引数を一覧表示します。またそれらの関数が呼び出された回数も表示されます。この回数は <emphasis>フレーム</emphasis> と呼ばれます。トレースの中の各呼び出しは異なるフレームの中に存在します。これはフレーム 0 (最後に呼び出された関数を表す) から始まって 関数呼び出しが深くなるにつれて大きくなります。
   </para>
   <para>
    メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>スタック(_S)</guimenuitem></menuchoice> を選択して、デバッグしていたプログラムのスタック・トレースを開いて下さい。
   </para>
   <para>
    <figure>
      <title>スタック・トレース・ウィンドウ</title>
      <screenshot>
	   <screeninfo>スタック・トレース・ウィンドウ</screeninfo>
       <graphic fileref="figures/stack.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    スタックトレースの中で小さい矢印が、現在選択されているフレームを指しています。デフォルトで、これはフレーム 0 を指し、それは最後に呼び出された関数です。式や変数の検証/評価では、この選択されたフレームを参照することになります。評価された変数または式のスコープ (適用範囲) は選択されたフレームにのみ限定されています。監視する式にも同様に適用されます。
   </para>
  </sect2>
  
  <sect2 id="stack-frame">
   <title>現在のフレームに対する設定</title>
   <para>
    スタック・トレースの中にあるフレームをダブル・クリックすると、指定したフレームが現在のフレームとしてセットされます (矢印はそのフレームを指し、現在のフレームであることを意味することになります)。あるいは、<interface>スタック・トレース・ウィンドウ</interface> の上で右クリックして <interface>オペレーション・メニュー</interface> を開き、メニュー・アイテム <guimenuitem>フレームセット</guimenuitem> を選択すると、そのフレームがセットされます。
   </para>
  </sect2>
  
  <sect2 id="stack-frame-info">
   <title>現在のフレームに対する情報</title>
   <para>
メニュー・アイテム <menuchoice><guisubmenu>デバッグ(_D)</guisubmenu><guisubmenu>情報(_I)</guisubmenu><guimenuitem>現在のフレーム(_C)</guimenuitem></menuchoice> を選択すると、現在選択しているフレームについての情報を取得することが可能です。現在のフレームに対する情報を表示したウィンドウが表示されます。
   </para>
   <para>
    <figure>
      <title>現在のフレームに対する情報</title>
      <screenshot>
	   <screeninfo>現在のフレームに対する情報</screeninfo>
       <graphic fileref="figures/frame.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
  </sect2>
  
  <sect2 id="stack-update">
   <title>スタック・トレースの更新</title>
   <para>
    <interface>オペレーション・メニュー</interface> (<interface>スタック・トレース・ウィンドウ</interface> の上で右クリックする) のメニュー・アイテム <guimenuitem>更新</guimenuitem> を選択すると <interface>スタック・トレース・ウィンドウ</interface> をリフレッシュします。
   </para>
  </sect2>
 </sect1>
 <sect1 id="debugger-others">
  <title>その他</title>
  <para>
   デバッガのあまり使われないその他の機能がいくつかありますが、以外と便利な機能なのでご紹介します。
  </para>
  <sect2 id="dbg-kernel">
   <title>カーネル・シグナル</title>
   <para>
    カーネル・シグナルはプロセスと Linux の間でやりとりをする一つの手段です。プログラムで利用可能なシグナルの一覧は、メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>カーネルシグナル(_K)</guimenuitem></menuchoice> を選択すると表示することができます。システムで利用可能な全てのシグナルについて、短い説明とともに一覧表示するウィンドウが開きます。
   </para>
   <para>
    <figure>
      <title>カーネル・シグナル・ウィンドウ</title>
      <screenshot>
	   <screeninfo>カーネル・シグナル・ウィンドウ</screeninfo>
       <graphic fileref="figures/signals.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
   <para>
    シグナルを受け取った時に何を行うかを指示する三つの情報があります:
   </para>
   
   <orderedlist>
    <listitem>
     <para><emphasis>停止</emphasis> - これはプログラムがシグナルを受け取った時に実行を停止する (かつ制御を戻す) かどうかを、デバッガに指示するものです。
     </para>
    </listitem>
    <listitem>
     <para><emphasis>表示</emphasis> - これは受け取ったシグナルを表示するかどうかを、デバッガに指示するものです。
     </para>
    </listitem>
    <listitem>
     <para><emphasis>パス</emphasis> - これはプログラムが受け取ったシグナルを無視するかどうかを、デバッガに指示するものです。
     </para>
    </listitem>
   </orderedlist>
   
   <sect3 id="dbg-kernel-beh">
    <title>シグナル受信時の動作を変更する</title>
    <para>
     特定のシグナルを受信した時にそれに対応するデバッガの動作 (前述の三つの指示) を変更する場合は、一覧からシグナルを選択して右クリックして <interface>オペレーション・メニュー</interface> を開きます。そしてメニュー・アイテム <guimenuitem>シグナルの変更</guimenuitem> を選択して下さい。するとダイアログが開きます。三つの指示を設定し変更を適用する場合は <guibutton>OK</guibutton> ボタンをクリックして下さい。
    </para>
    <para>
     <figure>
       <title>カーネル・シグナル変更ダイアログ</title>
       <screenshot>
	   <screeninfo>カーネル・シグナル変更ダイアログ</screeninfo>
        <graphic fileref="figures/signal_mod.png" format="PNG" srccredit="andyp"></graphic>
       </screenshot>
     </figure>
    </para>
   </sect3>
   <sect3 id="dbg-kernel-send">
    <title>プログラムにシグナルを送信する</title>
    <para>
明示的にデバッグ中のプログラムにシグナルを送信する場合は、一覧からシグナルを選択して右クリックして <interface>オペレーション・メニュー</interface> を開きます。そしてメニュー・アイテム <guimenuitem>シグナル送信</guimenuitem> を選択して下さい。すると確認ダイアログが開きます。プログラムに送信するシグナルを確認して <guibutton>OK</guibutton> ボタンをクリックして下さい。
    </para>
   </sect3>
   <sect3 id="dbg-kernel-update">
    <title>シグナル一覧の更新</title>
    <para>
 (<interface>カーネル・シグナル・ウィンドウ</interface> の上で右クリックして表示される) <interface>オペレーション・メニュー</interface> からメニュー・アイテム <guimenuitem>更新</guimenuitem> を選択して、<interface>カーネル・シグナル・ウィンドウ</interface> をリフレッシュして下さい。
    </para>
   </sect3>
  </sect2>
 
  <sect2 id="dbg-registers">
   <title>CPU レジスタ情報</title>
   <para>
CPU (マイクロプロセッサ) の内部レジスタの内容を調査することが可能です。メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>レジスタ(_R)</guimenuitem></menuchoice> を選択して下さい。マイクロプロセッサ内の利用可能な全てのレジスタとそれに対する内容が表示されたウィンドウが開きます。
   </para>
   <para>
    <figure>
      <title>CPU レジスタ・ウィンドウ</title>
      <screenshot>
	   <screeninfo>CPU レジスタ・ウィンドウ</screeninfo>
       <graphic fileref="figures/registers.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
  </sect2>
 
  <sect2 id="dbg-dyna-libs">
   <title>直接ライブラリを読み込む</title>
   <para>
    プログラムで使用している動的ライブラリの一覧を取得する場合は、メニュー・アイテム <menuchoice><guisubmenu>表示(_V)</guisubmenu><guimenuitem>共有ライブラリ群(_L)</guimenuitem></menuchoice> を選択して下さい。すると、プログラムがメモリに読み込んだ全ての共有ライブラリの一覧を表示したウィンドウが開かれます。またシンボル・テーブルも一緒に読み込んでいるかどうか (Yes/No) も表示されます。
   </para>
   <para>
    <figure>
      <title>共有ライブラリ・ウィンドウ</title>
      <screenshot>
	   <screeninfo>共有ライブラリ・ウィンドウ</screeninfo>
       <graphic fileref="figures/sharedlibs.png" format="PNG" srccredit="andyp"></graphic>
      </screenshot>
    </figure>
   </para>
  </sect2>
 
  <sect2 id="dbg-interrupt">
   <title>プログラムへの割り込み</title>
   <para>
    プログラムが動作中でかつ制御を保持している間、デバッグ作業を行うことはできません。プログラムが動作中に制御を取得する場合は、メニュー・アイテム <menuchoice><guisubmenu>デバッグ</guisubmenu><guimenuitem>プログラムの割り込み(_I)</guimenuitem></menuchoice> を選択して下さい。プログラムに割り込んで制御をデバッガに戻します。
   </para>
   <para>
    適切に割り込みが行われるために、割り込みシグナル (SIGINT) に対応するデバッガの動作を [ 停止:Yes, 表示:Yes, パス:No ] に設定して下さい。これはデフォルトです。
   </para>
  </sect2>
 </sect1>
 
 </chapter>
