<MACRO>
<NAME>XML_TEMPLATE_TYPE</NAME>
#define XML_TEMPLATE_TYPE (xml_template_get_type ())
</MACRO>
<MACRO>
<NAME>XML_TEMPLATE</NAME>
#define XML_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XML_TEMPLATE_TYPE, XmlTemplate))
</MACRO>
<MACRO>
<NAME>XML_TEMPLATE_CLASS</NAME>
#define XML_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XML_TEMPLATE_TYPE, XmlTemplateClass))
</MACRO>
<MACRO>
<NAME>XML_IS_TEMPLATE</NAME>
#define XML_IS_TEMPLATE(obj) (G_TYPE_CHECK_TYPE ((obj), XML_TEMPLATE_TYPE))
</MACRO>
<MACRO>
<NAME>XML_IS_TEMPLATE_CLASS</NAME>
#define XML_IS_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XML_TEMPLATE_TYPE))
</MACRO>
<MACRO>
<NAME>XML_TEMPLATE_GET_CLASS</NAME>
#define XML_TEMPLATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XML_TEMPLATE_TYPE, XmlTemplateClass))
</MACRO>
<STRUCT>
<NAME>XmlTemplate</NAME>
</STRUCT>
<STRUCT>
<NAME>XmlTemplateClass</NAME>
</STRUCT>
<STRUCT>
<NAME>XmlTemplatePrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>XmlTemplate</NAME>
struct XmlTemplate
{
	GObject parent;
	
	XmlTemplatePrivate* priv;
};
</STRUCT>
<STRUCT>
<NAME>XmlTemplateClass</NAME>
struct XmlTemplateClass
{
	GObjectClass parent;
};
</STRUCT>
<FUNCTION>
<NAME>xml_template_get_type</NAME>
<RETURNS>GType  </RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>xml_template_new</NAME>
<RETURNS>XmlTemplate *</RETURNS>

</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_all_projects</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_project</NAME>
<RETURNS>PrjTemplate *</RETURNS>
XmlTemplate* xtmp, const gchar* name
</FUNCTION>
<FUNCTION>
<NAME>xml_template_query_projects_by_language</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp,const gchar* language
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_all_libs</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_lib</NAME>
<RETURNS>LibTemplate *</RETURNS>
XmlTemplate* xtmp, const gchar* name
</FUNCTION>
<FUNCTION>
<NAME>xml_template_query_libs_by_language</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp,const gchar* language
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_all_languages</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_language</NAME>
<RETURNS>LangTemplate *</RETURNS>
XmlTemplate* xtmp, const gchar* name
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_all_texts</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp
</FUNCTION>
<FUNCTION>
<NAME>xml_template_get_text</NAME>
<RETURNS>TextTemplate *</RETURNS>
XmlTemplate* xtmp, const gchar* name
</FUNCTION>
<FUNCTION>
<NAME>xml_template_query_texts_by_language</NAME>
<RETURNS>GList *</RETURNS>
XmlTemplate* xtmp,const gchar* language
</FUNCTION>
<STRUCT>
<NAME>PrjTemplate</NAME>
</STRUCT>
<ENUM>
<NAME>PrjTarget</NAME>
typedef enum 
{
	TARGET_EXEC,
	TARGET_STATIC_LIB,
	TARGET_SHARED_LIB,
	TARGET_MISC,
	TARGET_END
} PrjTarget;
</ENUM>
<STRUCT>
<NAME>PrjTemplate</NAME>
struct PrjTemplate
{
	gchar* name;
	gchar* description;
	gchar* lang;
	
	PrjTarget target;
	
	Autotools* autotools;
	GList* libs;
	
	gchar* init_tarball;
	gchar* init_script;
};
</STRUCT>
<FUNCTION>
<NAME>prj_template_parse</NAME>
<RETURNS>PrjTemplate *</RETURNS>
xmlDocPtr doc
</FUNCTION>
<FUNCTION>
<NAME>prj_template_free</NAME>
<RETURNS>void  </RETURNS>
PrjTemplate* prj
</FUNCTION>
<STRUCT>
<NAME>LangTemplate</NAME>
</STRUCT>
<STRUCT>
<NAME>LangTemplate</NAME>
struct LangTemplate
{
	gchar* name;
	gchar* description;
		
	Autotools* autotools;
};
</STRUCT>
<FUNCTION>
<NAME>lang_template_parse</NAME>
<RETURNS>LangTemplate *</RETURNS>
xmlDocPtr doc
</FUNCTION>
<FUNCTION>
<NAME>lang_template_free</NAME>
<RETURNS>void  </RETURNS>
LangTemplate* lang
</FUNCTION>
<VARIABLE>
<NAME>TEXT_TYPE</NAME>
extern const xmlChar* TEXT_TYPE;
</VARIABLE>
<VARIABLE>
<NAME>AUTOTOOLS_TYPE</NAME>
extern const xmlChar* AUTOTOOLS_TYPE;
</VARIABLE>
<VARIABLE>
<NAME>LANG_TYPE</NAME>
extern const xmlChar* LANG_TYPE;
</VARIABLE>
<VARIABLE>
<NAME>LIB_TYPE</NAME>
extern const xmlChar* LIB_TYPE;
</VARIABLE>
<VARIABLE>
<NAME>PRJ_TYPE</NAME>
extern const xmlChar* PRJ_TYPE;
</VARIABLE>
<VARIABLE>
<NAME>NAME</NAME>
extern const xmlChar* NAME;
</VARIABLE>
<VARIABLE>
<NAME>LANGUAGE</NAME>
extern const xmlChar* LANGUAGE;
</VARIABLE>
<VARIABLE>
<NAME>DESCRIPTION</NAME>
extern const xmlChar* DESCRIPTION;
</VARIABLE>
<VARIABLE>
<NAME>CONTENT</NAME>
extern const xmlChar* CONTENT;
</VARIABLE>
<VARIABLE>
<NAME>TARGET</NAME>
extern const xmlChar* TARGET;
</VARIABLE>
<VARIABLE>
<NAME>LIBS</NAME>
extern const xmlChar* LIBS;
</VARIABLE>
<VARIABLE>
<NAME>LIBRARY</NAME>
extern const xmlChar* LIBRARY;
</VARIABLE>
<VARIABLE>
<NAME>INIT_SCRIPT</NAME>
extern const xmlChar* INIT_SCRIPT;
</VARIABLE>
<VARIABLE>
<NAME>INIT_TARBALL</NAME>
extern const xmlChar* INIT_TARBALL;
</VARIABLE>
<VARIABLE>
<NAME>AUTOCONF</NAME>
extern const xmlChar* AUTOCONF;
</VARIABLE>
<VARIABLE>
<NAME>AUTOMAKE</NAME>
extern const xmlChar* AUTOMAKE;
</VARIABLE>
<VARIABLE>
<NAME>MACRO</NAME>
extern const xmlChar* MACRO;
</VARIABLE>
<VARIABLE>
<NAME>INCLUDE</NAME>
extern const xmlChar* INCLUDE;
</VARIABLE>
<VARIABLE>
<NAME>LD_ADD</NAME>
extern const xmlChar* LD_ADD;
</VARIABLE>
<VARIABLE>
<NAME>PKGCONFIG</NAME>
extern const xmlChar* PKGCONFIG;
</VARIABLE>
<VARIABLE>
<NAME>PACKAGE</NAME>
extern const xmlChar* PACKAGE;
</VARIABLE>
<VARIABLE>
<NAME>PKGVERSION</NAME>
extern const xmlChar* PKGVERSION;
</VARIABLE>
<VARIABLE>
<NAME>VERSION</NAME>
extern const xmlChar* VERSION;
</VARIABLE>
<STRUCT>
<NAME>Autotools</NAME>
</STRUCT>
<STRUCT>
<NAME>Pkgconfig</NAME>
</STRUCT>
<STRUCT>
<NAME>Pkgconfig</NAME>
struct Pkgconfig
{
	gchar* package;
	gchar* version;
};
</STRUCT>
<STRUCT>
<NAME>Autotools</NAME>
struct Autotools
{
	GList* autoconf_macros;
	GList* pkgconfig;
	
	GList* automake_includes;
	GList* automake_ld_add;
};
</STRUCT>
<FUNCTION>
<NAME>parse_autotools</NAME>
<RETURNS>Autotools *</RETURNS>
xmlDocPtr doc, xmlNodePtr cur_node
</FUNCTION>
<FUNCTION>
<NAME>autotools_free</NAME>
<RETURNS>void  </RETURNS>
Autotools* autotools
</FUNCTION>
<STRUCT>
<NAME>TextTemplate</NAME>
</STRUCT>
<STRUCT>
<NAME>TextTemplate</NAME>
struct TextTemplate
{
	gchar* name;
	gchar* description;
	
	gchar* lang;
	
	gchar* text;
};
</STRUCT>
<FUNCTION>
<NAME>text_template_parse</NAME>
<RETURNS>TextTemplate *</RETURNS>
xmlDocPtr doc
</FUNCTION>
<FUNCTION>
<NAME>text_template_free</NAME>
<RETURNS>void  </RETURNS>
TextTemplate* temp
</FUNCTION>
<STRUCT>
<NAME>LibTemplate</NAME>
</STRUCT>
<STRUCT>
<NAME>LibTemplate</NAME>
struct LibTemplate
{
	gchar* name;
	gchar* description;
	gchar* lang;
	
	gchar* version;
	
	Autotools* autotools;	
};
</STRUCT>
<FUNCTION>
<NAME>lib_template_parse</NAME>
<RETURNS>LibTemplate *</RETURNS>
xmlDocPtr doc
</FUNCTION>
<FUNCTION>
<NAME>lib_template_free</NAME>
<RETURNS>void  </RETURNS>
LibTemplate* lib
</FUNCTION>
