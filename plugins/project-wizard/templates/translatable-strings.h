char *s = N_("A GNOME applet project");
char *s = N_("A generic C++ project");
char *s = N_("A generic GTK+ project");
char *s = N_("A generic GTKmm (C++) project");
char *s = N_("A generic Xlib dock applet");
char *s = N_("A generic Xlib project");
char *s = N_("A generic java project using automake project management");
char *s = N_("A generic minimal and flat project");
char *s = N_("A generic natively compiled java project using the GNU Java Compiler (gcj)");
char *s = N_("A generic project");
char *s = N_("A generic python project using automake project management");
char *s = N_("A generic wx Widgets project");
char *s = N_("A sample SDL project");
char *s = N_("Add C++ support:");
char *s = N_("Add gtk-doc system:");
char *s = N_("Add internationalization:");
char *s = N_("Add shared library support:");
char *s = N_("Adds C++ support to the project so that C++ source files can be built");
char *s = N_("Adds support for building shared libraries in your project");
char *s = N_("Adds support for internationalization so that your project can have translations in different languages");
char *s = N_("Anjuta Plugin");
char *s = N_("Anjuta plugin project that uses libanjuta framework");
char *s = N_("Applet Title:");
char *s = N_("Author:");
char *s = N_("Basic information");
char *s = N_("Berkeley Software Distribution License (BSD)");
char *s = N_("Comma separated, other plugins that this plugin depends on. It could be either primary interface name or plugin location (library:class)");
char *s = N_("Configure external packages");
char *s = N_("Configure external packages:");
char *s = N_("Create Gtk Builder interface file");
char *s = N_("Create a template Gtk Builder interface file");
char *s = N_("Create a template glade interface file");
char *s = N_("Create glade interface file");
char *s = N_("Description:");
char *s = N_("Destination:");
char *s = N_("Display description of the applet");
char *s = N_("Display description of the plugin");
char *s = N_("Display title of the applet");
char *s = N_("Display title of the plugin");
char *s = N_("Django Project");
char *s = N_("Django Project information");
char *s = N_("Email address:");
char *s = N_("GCJ needs to know which class contains the main() function");
char *s = N_("GNOME Applet");
char *s = N_("GTK+");
char *s = N_("GTKmm");
char *s = N_("General Project Information");
char *s = N_("General Public License (GPL)");
char *s = N_("Generic");
char *s = N_("Generic (Minimal)");
char *s = N_("Generic C++");
char *s = N_("Generic gcj compiled java");
char *s = N_("Generic java (automake)");
char *s = N_("Generic python (automake)");
char *s = N_("Give a package name that your project require. You may also mention what is the required version of the package. For example, 'libgnomeui-2.0' or 'libgnomeui-2.0 >= 2.2.0'");
char *s = N_("Icon File:");
char *s = N_("Icon file for the plugin");
char *s = N_("Implement plugin interfaces");
char *s = N_("Interface implemented by the plugin");
char *s = N_("Interface:");
char *s = N_("Lesser General Public License (LGPL)");
char *s = N_("License");
char *s = N_("Main Class:");
char *s = N_("Main class");
char *s = N_("Makefile project");
char *s = N_("Makefile-based project");
char *s = N_("Mininum SDL version required");
char *s = N_("Name of the value to watch");
char *s = N_("No license");
char *s = N_("Options for project build system");
char *s = N_("Plugin Class Name:");
char *s = N_("Plugin Dependencies:");
char *s = N_("Plugin Description:");
char *s = N_("Plugin Title:");
char *s = N_("Plugin class name");
char *s = N_("Plugin has menus or/and toolbars");
char *s = N_("Plugin interfaces to implement");
char *s = N_("Project Name:");
char *s = N_("Project directory, output file etc.");
char *s = N_("Project directory:");
char *s = N_("Project name must not contain spaces, because it will be the name of the project build target (executable, library etc.)");
char *s = N_("Project name:");
char *s = N_("Project options");
char *s = N_("Python webproject using Django Web Framework");
char *s = N_("Require Package:");
char *s = N_("Require SDL version:");
char *s = N_("Require SDL_gfx library");
char *s = N_("Require SDL_gfx:");
char *s = N_("Require SDL_image library");
char *s = N_("Require SDL_image:");
char *s = N_("Require SDL_mixer library");
char *s = N_("Require SDL_mixer:");
char *s = N_("Require SDL_net library");
char *s = N_("Require SDL_net:");
char *s = N_("Require SDL_ttf library");
char *s = N_("Require SDL_ttf:");
char *s = N_("SDL");
char *s = N_("Select code license");
char *s = N_("Shell values to watch");
char *s = N_("Use pkg-config to add library support from other packages");
char *s = N_("Value Name:");
char *s = N_("Values to watch");
char *s = N_("Version:");
char *s = N_("Whether the plugin has menus or toolbars");
char *s = N_("Wx Widgets");
char *s = N_("Xlib");
char *s = N_("Xlib dock");
char *s = N_("gtk-doc is used to compile API documentations for GObject based classes");
char *s = N_("project name");
