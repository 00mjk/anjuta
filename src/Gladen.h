/*
 * This file was generated by orbit-idl - DO NOT EDIT!
 */

#include <glib.h>
#define ORBIT_IDL_SERIAL 9
#include <orb/orbit.h>

#ifndef Gladen_H
#define Gladen_H 1
#ifdef __cplusplus
extern "C"
{
#endif				/* __cplusplus */

/** typedefs **/
#if !defined(ORBIT_DECL_Gladen_GladeRef) && !defined(_Gladen_GladeRef_defined)
#define ORBIT_DECL_Gladen_GladeRef 1
#define _Gladen_GladeRef_defined 1
#define Gladen_GladeRef__free CORBA_Object__free
   typedef CORBA_Object Gladen_GladeRef;
   extern CORBA_unsigned_long Gladen_GladeRef__classid;
#if !defined(TC_IMPL_TC_Gladen_GladeRef_0)
#define TC_IMPL_TC_Gladen_GladeRef_0 'G'
#define TC_IMPL_TC_Gladen_GladeRef_1 'l'
#define TC_IMPL_TC_Gladen_GladeRef_2 'a'
#define TC_IMPL_TC_Gladen_GladeRef_3 'd'
#define TC_IMPL_TC_Gladen_GladeRef_4 'e'
#define TC_IMPL_TC_Gladen_GladeRef_5 'n'
   extern const struct CORBA_TypeCode_struct TC_Gladen_GladeRef_struct;
#define TC_Gladen_GladeRef ((CORBA_TypeCode)&TC_Gladen_GladeRef_struct)
#endif
#endif

/** POA structures **/
   typedef struct
   {
      void *_private;
      void (*AddComponent) (PortableServer_Servant _servant,
			    const CORBA_char * szComponent,
			    const CORBA_char * szClassName,
			    CORBA_Environment * ev);
      void (*LoadFile) (PortableServer_Servant _servant,
			const CORBA_char * szFullPathName,
			CORBA_Environment * ev);
      void (*SaveFile) (PortableServer_Servant _servant,
			const CORBA_boolean bSaveNewName,
			const CORBA_char * szFullPath,
			CORBA_Environment * ev);
      void (*SaveModified) (PortableServer_Servant _servant,
			    CORBA_Environment * ev);
      void (*Exit) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*ShowUI) (PortableServer_Servant _servant,
		      const CORBA_boolean bShow, CORBA_Environment * ev);
       CORBA_boolean(*GenerateSourceFile) (PortableServer_Servant _servant,
					   CORBA_Environment * ev);
      CORBA_char *(*_get_name) (PortableServer_Servant _servant,
				CORBA_Environment * ev);
      void (*_set_name) (PortableServer_Servant _servant,
			 const CORBA_char * value, CORBA_Environment * ev);
      CORBA_char *(*_get_programName) (PortableServer_Servant _servant,
				       CORBA_Environment * ev);
      void (*_set_programName) (PortableServer_Servant _servant,
				const CORBA_char * value,
				CORBA_Environment * ev);
      CORBA_char *(*_get_fileName) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      void (*_set_fileName) (PortableServer_Servant _servant,
			     const CORBA_char * value,
			     CORBA_Environment * ev);
      CORBA_char *(*_get_dir) (PortableServer_Servant _servant,
			       CORBA_Environment * ev);
      void (*_set_dir) (PortableServer_Servant _servant,
			const CORBA_char * value, CORBA_Environment * ev);
      CORBA_char *(*_get_sourceDir) (PortableServer_Servant _servant,
				     CORBA_Environment * ev);
      void (*_set_sourceDir) (PortableServer_Servant _servant,
			      const CORBA_char * value,
			      CORBA_Environment * ev);
      CORBA_char *(*_get_pixmapsDir) (PortableServer_Servant _servant,
				      CORBA_Environment * ev);
      void (*_set_pixmapsDir) (PortableServer_Servant _servant,
			       const CORBA_char * value,
			       CORBA_Environment * ev);
      CORBA_char *(*_get_language) (PortableServer_Servant _servant,
				    CORBA_Environment * ev);
      void (*_set_language) (PortableServer_Servant _servant,
			     const CORBA_char * value,
			     CORBA_Environment * ev);
       CORBA_boolean(*_get_gnomeSupport) (PortableServer_Servant _servant,
					  CORBA_Environment * ev);
      void (*_set_gnomeSupport) (PortableServer_Servant _servant,
				 const CORBA_boolean value,
				 CORBA_Environment * ev);
       CORBA_boolean(*_get_outputSupportFiles) (PortableServer_Servant
						_servant,
						CORBA_Environment * ev);
      void (*_set_outputSupportFiles) (PortableServer_Servant _servant,
				       const CORBA_boolean value,
				       CORBA_Environment * ev);
       CORBA_boolean(*_get_outputMainFile) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
      void (*_set_outputMainFile) (PortableServer_Servant _servant,
				   const CORBA_boolean value,
				   CORBA_Environment * ev);
       CORBA_boolean(*_get_getTextSupport) (PortableServer_Servant _servant,
					    CORBA_Environment * ev);
      void (*_set_getTextSupport) (PortableServer_Servant _servant,
				   const CORBA_boolean value,
				   CORBA_Environment * ev);
   }
   POA_Gladen_GladeRef__epv;
   typedef struct
   {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Gladen_GladeRef__epv *Gladen_GladeRef_epv;
   }
   POA_Gladen_GladeRef__vepv;
   typedef struct
   {
      void *_private;
      POA_Gladen_GladeRef__vepv *vepv;
   }
   POA_Gladen_GladeRef;
   extern void POA_Gladen_GladeRef__init(PortableServer_Servant servant,
					 CORBA_Environment * ev);
   extern void POA_Gladen_GladeRef__fini(PortableServer_Servant servant,
					 CORBA_Environment * ev);

/** prototypes **/
   void Gladen_GladeRef_AddComponent(Gladen_GladeRef _obj,
				     const CORBA_char * szComponent,
				     const CORBA_char * szClassName,
				     CORBA_Environment * ev);
   void Gladen_GladeRef_LoadFile(Gladen_GladeRef _obj,
				 const CORBA_char * szFullPathName,
				 CORBA_Environment * ev);
   void Gladen_GladeRef_SaveFile(Gladen_GladeRef _obj,
				 const CORBA_boolean bSaveNewName,
				 const CORBA_char * szFullPath,
				 CORBA_Environment * ev);
   void Gladen_GladeRef_SaveModified(Gladen_GladeRef _obj,
				     CORBA_Environment * ev);
   void Gladen_GladeRef_Exit(Gladen_GladeRef _obj, CORBA_Environment * ev);
   void Gladen_GladeRef_ShowUI(Gladen_GladeRef _obj,
			       const CORBA_boolean bShow,
			       CORBA_Environment * ev);
   CORBA_boolean Gladen_GladeRef_GenerateSourceFile(Gladen_GladeRef _obj,
						    CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_name(Gladen_GladeRef _obj,
					 CORBA_Environment * ev);
   void Gladen_GladeRef__set_name(Gladen_GladeRef _obj,
				  const CORBA_char * value,
				  CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_programName(Gladen_GladeRef _obj,
						CORBA_Environment * ev);
   void Gladen_GladeRef__set_programName(Gladen_GladeRef _obj,
					 const CORBA_char * value,
					 CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_fileName(Gladen_GladeRef _obj,
					     CORBA_Environment * ev);
   void Gladen_GladeRef__set_fileName(Gladen_GladeRef _obj,
				      const CORBA_char * value,
				      CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_dir(Gladen_GladeRef _obj,
					CORBA_Environment * ev);
   void Gladen_GladeRef__set_dir(Gladen_GladeRef _obj,
				 const CORBA_char * value,
				 CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_sourceDir(Gladen_GladeRef _obj,
					      CORBA_Environment * ev);
   void Gladen_GladeRef__set_sourceDir(Gladen_GladeRef _obj,
				       const CORBA_char * value,
				       CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_pixmapsDir(Gladen_GladeRef _obj,
					       CORBA_Environment * ev);
   void Gladen_GladeRef__set_pixmapsDir(Gladen_GladeRef _obj,
					const CORBA_char * value,
					CORBA_Environment * ev);
   CORBA_char *Gladen_GladeRef__get_language(Gladen_GladeRef _obj,
					     CORBA_Environment * ev);
   void Gladen_GladeRef__set_language(Gladen_GladeRef _obj,
				      const CORBA_char * value,
				      CORBA_Environment * ev);
   CORBA_boolean Gladen_GladeRef__get_gnomeSupport(Gladen_GladeRef _obj,
						   CORBA_Environment * ev);
   void Gladen_GladeRef__set_gnomeSupport(Gladen_GladeRef _obj,
					  const CORBA_boolean value,
					  CORBA_Environment * ev);
   CORBA_boolean Gladen_GladeRef__get_outputSupportFiles(Gladen_GladeRef _obj,
							 CORBA_Environment *
							 ev);
   void Gladen_GladeRef__set_outputSupportFiles(Gladen_GladeRef _obj,
						const CORBA_boolean value,
						CORBA_Environment * ev);
   CORBA_boolean Gladen_GladeRef__get_outputMainFile(Gladen_GladeRef _obj,
						     CORBA_Environment * ev);
   void Gladen_GladeRef__set_outputMainFile(Gladen_GladeRef _obj,
					    const CORBA_boolean value,
					    CORBA_Environment * ev);
   CORBA_boolean Gladen_GladeRef__get_getTextSupport(Gladen_GladeRef _obj,
						     CORBA_Environment * ev);
   void Gladen_GladeRef__set_getTextSupport(Gladen_GladeRef _obj,
					    const CORBA_boolean value,
					    CORBA_Environment * ev);

   void _ORBIT_skel_Gladen_GladeRef_AddComponent(POA_Gladen_GladeRef *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_AddComponent)
						 (PortableServer_Servant
						  _servant,
						  const CORBA_char *
						  szComponent,
						  const CORBA_char *
						  szClassName,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_LoadFile(POA_Gladen_GladeRef *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_LoadFile)
					     (PortableServer_Servant _servant,
					      const CORBA_char *
					      szFullPathName,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_SaveFile(POA_Gladen_GladeRef *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl_SaveFile)
					     (PortableServer_Servant _servant,
					      const CORBA_boolean
					      bSaveNewName,
					      const CORBA_char * szFullPath,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_SaveModified(POA_Gladen_GladeRef *
						 _ORBIT_servant,
						 GIOPRecvBuffer *
						 _ORBIT_recv_buffer,
						 CORBA_Environment * ev,
						 void (*_impl_SaveModified)
						 (PortableServer_Servant
						  _servant,
						  CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_Exit(POA_Gladen_GladeRef * _ORBIT_servant,
					 GIOPRecvBuffer * _ORBIT_recv_buffer,
					 CORBA_Environment * ev,
					 void (*_impl_Exit)
					 (PortableServer_Servant _servant,
					  CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_ShowUI(POA_Gladen_GladeRef *
					   _ORBIT_servant,
					   GIOPRecvBuffer *
					   _ORBIT_recv_buffer,
					   CORBA_Environment * ev,
					   void (*_impl_ShowUI)
					   (PortableServer_Servant _servant,
					    const CORBA_boolean bShow,
					    CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef_GenerateSourceFile(POA_Gladen_GladeRef *
						       _ORBIT_servant,
						       GIOPRecvBuffer *
						       _ORBIT_recv_buffer,
						       CORBA_Environment * ev,
						       CORBA_boolean
						       (*_impl_GenerateSourceFile)
						       (PortableServer_Servant
							_servant,
							CORBA_Environment *
							ev));
   void _ORBIT_skel_Gladen_GladeRef__get_name(POA_Gladen_GladeRef *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      CORBA_char *
					      (*_impl__get_name)
					      (PortableServer_Servant
					       _servant,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_name(POA_Gladen_GladeRef *
					      _ORBIT_servant,
					      GIOPRecvBuffer *
					      _ORBIT_recv_buffer,
					      CORBA_Environment * ev,
					      void (*_impl__set_name)
					      (PortableServer_Servant
					       _servant,
					       const CORBA_char * value,
					       CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_programName(POA_Gladen_GladeRef *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     CORBA_char *
						     (*_impl__get_programName)
						     (PortableServer_Servant
						      _servant,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Gladen_GladeRef__set_programName(POA_Gladen_GladeRef *
						     _ORBIT_servant,
						     GIOPRecvBuffer *
						     _ORBIT_recv_buffer,
						     CORBA_Environment * ev,
						     void
						     (*_impl__set_programName)
						     (PortableServer_Servant
						      _servant,
						      const CORBA_char *
						      value,
						      CORBA_Environment *
						      ev));
   void _ORBIT_skel_Gladen_GladeRef__get_fileName(POA_Gladen_GladeRef *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_char *
						  (*_impl__get_fileName)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_fileName(POA_Gladen_GladeRef *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl__set_fileName)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * value,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_dir(POA_Gladen_GladeRef *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     CORBA_char *
					     (*_impl__get_dir)
					     (PortableServer_Servant _servant,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_dir(POA_Gladen_GladeRef *
					     _ORBIT_servant,
					     GIOPRecvBuffer *
					     _ORBIT_recv_buffer,
					     CORBA_Environment * ev,
					     void (*_impl__set_dir)
					     (PortableServer_Servant _servant,
					      const CORBA_char * value,
					      CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_sourceDir(POA_Gladen_GladeRef *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   CORBA_char *
						   (*_impl__get_sourceDir)
						   (PortableServer_Servant
						    _servant,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_sourceDir(POA_Gladen_GladeRef *
						   _ORBIT_servant,
						   GIOPRecvBuffer *
						   _ORBIT_recv_buffer,
						   CORBA_Environment * ev,
						   void
						   (*_impl__set_sourceDir)
						   (PortableServer_Servant
						    _servant,
						    const CORBA_char * value,
						    CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_pixmapsDir(POA_Gladen_GladeRef *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    CORBA_char *
						    (*_impl__get_pixmapsDir)
						    (PortableServer_Servant
						     _servant,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_pixmapsDir(POA_Gladen_GladeRef *
						    _ORBIT_servant,
						    GIOPRecvBuffer *
						    _ORBIT_recv_buffer,
						    CORBA_Environment * ev,
						    void
						    (*_impl__set_pixmapsDir)
						    (PortableServer_Servant
						     _servant,
						     const CORBA_char * value,
						     CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_language(POA_Gladen_GladeRef *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  CORBA_char *
						  (*_impl__get_language)
						  (PortableServer_Servant
						   _servant,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__set_language(POA_Gladen_GladeRef *
						  _ORBIT_servant,
						  GIOPRecvBuffer *
						  _ORBIT_recv_buffer,
						  CORBA_Environment * ev,
						  void (*_impl__set_language)
						  (PortableServer_Servant
						   _servant,
						   const CORBA_char * value,
						   CORBA_Environment * ev));
   void _ORBIT_skel_Gladen_GladeRef__get_gnomeSupport(POA_Gladen_GladeRef *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      CORBA_boolean
						      (*_impl__get_gnomeSupport)
						      (PortableServer_Servant
						       _servant,
						       CORBA_Environment *
						       ev));
   void _ORBIT_skel_Gladen_GladeRef__set_gnomeSupport(POA_Gladen_GladeRef *
						      _ORBIT_servant,
						      GIOPRecvBuffer *
						      _ORBIT_recv_buffer,
						      CORBA_Environment * ev,
						      void
						      (*_impl__set_gnomeSupport)
						      (PortableServer_Servant
						       _servant,
						       const CORBA_boolean
						       value,
						       CORBA_Environment *
						       ev));
   void
      _ORBIT_skel_Gladen_GladeRef__get_outputSupportFiles(POA_Gladen_GladeRef
							  * _ORBIT_servant,
							  GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev,
							  CORBA_boolean
							  (*_impl__get_outputSupportFiles)
							  (PortableServer_Servant
							   _servant,
							   CORBA_Environment *
							   ev));
   void
      _ORBIT_skel_Gladen_GladeRef__set_outputSupportFiles(POA_Gladen_GladeRef
							  * _ORBIT_servant,
							  GIOPRecvBuffer *
							  _ORBIT_recv_buffer,
							  CORBA_Environment *
							  ev,
							  void
							  (*_impl__set_outputSupportFiles)
							  (PortableServer_Servant
							   _servant,
							   const CORBA_boolean
							   value,
							   CORBA_Environment *
							   ev));
   void _ORBIT_skel_Gladen_GladeRef__get_outputMainFile(POA_Gladen_GladeRef *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							CORBA_boolean
							(*_impl__get_outputMainFile)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Gladen_GladeRef__set_outputMainFile(POA_Gladen_GladeRef *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							void
							(*_impl__set_outputMainFile)
							(PortableServer_Servant
							 _servant,
							 const CORBA_boolean
							 value,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Gladen_GladeRef__get_getTextSupport(POA_Gladen_GladeRef *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							CORBA_boolean
							(*_impl__get_getTextSupport)
							(PortableServer_Servant
							 _servant,
							 CORBA_Environment *
							 ev));
   void _ORBIT_skel_Gladen_GladeRef__set_getTextSupport(POA_Gladen_GladeRef *
							_ORBIT_servant,
							GIOPRecvBuffer *
							_ORBIT_recv_buffer,
							CORBA_Environment *
							ev,
							void
							(*_impl__set_getTextSupport)
							(PortableServer_Servant
							 _servant,
							 const CORBA_boolean
							 value,
							 CORBA_Environment *
							 ev));
#ifdef __cplusplus
}
#endif				/* __cplusplus */

#endif
#undef ORBIT_IDL_SERIAL
